
HIC15FW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00004cf6  00004d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025b  0080019c  0080019c  00004e26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004e26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000870  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015ccb  00000000  00000000  00005734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003307  00000000  00000000  0001b3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e0f  00000000  00000000  0001e706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024c8  00000000  00000000  00024518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004781  00000000  00000000  000269e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011971  00000000  00000000  0002b161  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a58  00000000  00000000  0003cad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__dtors_end>
       4:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
       8:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
       c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      10:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      14:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      18:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      1c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      20:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      24:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      28:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      2c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      30:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      34:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      38:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      3c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      40:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__vector_16>
      44:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      48:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__vector_18>
      4c:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__vector_19>
      50:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      54:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      58:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      5c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      60:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__vector_24>
      64:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_ZL12splash1_data+0x8f>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 08       	sbc	r0, r0
      ee:	00 02       	muls	r16, r16
      f0:	01 00       	.word	0x0001	; ????
      f2:	00 03       	mulsu	r16, r16
      f4:	04 07       	cpc	r16, r20
	...

000000fe <digital_pin_to_bit_mask_PGM>:
      fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10e:	04 08 10 20                                         ... 

00000112 <digital_pin_to_port_PGM>:
     112:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     122:	03 03 03 03                                         ....

00000126 <port_to_input_PGM>:
     126:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000130 <port_to_output_PGM>:
     130:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013a <port_to_mode_PGM>:
     13a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000144 <_ZL4font>:
     144:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     154:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     164:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     174:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     184:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     194:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1a4:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1b4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1c4:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1d4:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1e4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1f4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     204:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     214:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     224:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     234:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     244:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     254:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     264:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     274:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     284:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     294:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2a4:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2b4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2c4:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2d4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2e4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2f4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     304:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     314:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     324:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     334:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     344:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     354:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     364:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     374:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     384:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     394:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3a4:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3b4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3c4:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3d4:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3e4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3f4:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     404:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     414:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     424:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     434:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     444:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     454:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     464:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     474:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     484:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     494:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4a4:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4b4:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4c4:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4d4:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4e4:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4f4:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     504:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     514:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     524:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     534:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     544:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     554:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     564:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     574:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     584:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     594:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5a4:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5b4:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5c4:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5d4:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5e4:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5f4:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     604:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     614:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     624:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     634:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000644 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     644:	22 00 ff 21 00                                      "..!.

00000649 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     649:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000651 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     651:	00 80 c0 e0 f0 f8 fc fe                             ........

00000659 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     659:	db 40 a4 a6 2e af                                   .@....

0000065f <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
     65f:	da 02 81                                            ...

00000662 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
     662:	da 12 81                                            ...

00000665 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
     665:	da 02 81 8f                                         ....

00000669 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     669:	20 00 a1 c8                                          ...

0000066d <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     66d:	d3 00 40 8d                                         ..@.

00000671 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     671:	ae d5 80 a8                                         ....

00000675 <_ZL12splash2_data>:
     675:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     685:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     695:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     6b1:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6c1:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6d1:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6e1:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     6f1:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     701:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     711:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     721:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     731:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     741:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     751:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     761:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     771:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     781:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     791:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     7a1:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     7b1:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7c1:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7d1:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7e1:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     7f1:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     809:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     819:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     829:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     839:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     849:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000855 <_ZL12splash1_data>:
     855:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     865:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     875:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     885:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     895:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     8a5:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8bd:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8cd:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8dd:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8ed:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     8fd:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     90d:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     91d:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     92d:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     93d:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     94d:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     95d:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     96d:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     97d:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     98d:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     99d:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     9ad:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9bd:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9cd:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9e5:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     9fd:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     a0d:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a1d:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a2d:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a3d:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a4d:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a5d:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a6d:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a7d:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a8d:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a9d:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     aad:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     abd:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     acd:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     add:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     aed:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     afd:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     b0d:	ff fd 6b 5b db 6a fd c0 00                          ..k[.j...

00000b16 <__ctors_start>:
     b16:	b0 07       	cpc	r27, r16
     b18:	52 0e       	add	r5, r18
     b1a:	fd 1f       	adc	r31, r29

00000b1c <__ctors_end>:
     b1c:	c7 07       	cpc	r28, r23

00000b1e <__dtors_end>:
     b1e:	11 24       	eor	r1, r1
     b20:	1f be       	out	0x3f, r1	; 63
     b22:	cf ef       	ldi	r28, 0xFF	; 255
     b24:	d8 e0       	ldi	r29, 0x08	; 8
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	cd bf       	out	0x3d, r28	; 61

00000b2a <__do_copy_data>:
     b2a:	11 e0       	ldi	r17, 0x01	; 1
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	e6 ef       	ldi	r30, 0xF6	; 246
     b32:	fc e4       	ldi	r31, 0x4C	; 76
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <__do_copy_data+0x10>
     b36:	05 90       	lpm	r0, Z+
     b38:	0d 92       	st	X+, r0
     b3a:	ac 39       	cpi	r26, 0x9C	; 156
     b3c:	b1 07       	cpc	r27, r17
     b3e:	d9 f7       	brne	.-10     	; 0xb36 <__do_copy_data+0xc>

00000b40 <__do_clear_bss>:
     b40:	23 e0       	ldi	r18, 0x03	; 3
     b42:	ac e9       	ldi	r26, 0x9C	; 156
     b44:	b1 e0       	ldi	r27, 0x01	; 1
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <.do_clear_bss_start>

00000b48 <.do_clear_bss_loop>:
     b48:	1d 92       	st	X+, r1

00000b4a <.do_clear_bss_start>:
     b4a:	a7 3f       	cpi	r26, 0xF7	; 247
     b4c:	b2 07       	cpc	r27, r18
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <.do_clear_bss_loop>

00000b50 <__do_global_ctors>:
     b50:	15 e0       	ldi	r17, 0x05	; 5
     b52:	ce e8       	ldi	r28, 0x8E	; 142
     b54:	d5 e0       	ldi	r29, 0x05	; 5
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <__do_global_ctors+0x10>
     b58:	21 97       	sbiw	r28, 0x01	; 1
     b5a:	fe 01       	movw	r30, r28
     b5c:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__tablejump2__>
     b60:	cb 38       	cpi	r28, 0x8B	; 139
     b62:	d1 07       	cpc	r29, r17
     b64:	c9 f7       	brne	.-14     	; 0xb58 <__do_global_ctors+0x8>
     b66:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <main>
     b6a:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <__do_global_dtors>

00000b6e <__bad_interrupt>:
     b6e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b72 <_Z10initBufferv>:
uint8_t btnCnt = 0;



void initBuffer(){
	memset(ac, 0, sizeof(float)*RANK);
     b72:	8c e3       	ldi	r24, 0x3C	; 60
     b74:	ee e9       	ldi	r30, 0x9E	; 158
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	df 01       	movw	r26, r30
     b7a:	1d 92       	st	X+, r1
     b7c:	8a 95       	dec	r24
     b7e:	e9 f7       	brne	.-6      	; 0xb7a <_Z10initBufferv+0x8>
	memset(rawX, 0, sizeof(int)*RANK);
     b80:	8e e1       	ldi	r24, 0x1E	; 30
     b82:	e6 e1       	ldi	r30, 0x16	; 22
     b84:	f2 e0       	ldi	r31, 0x02	; 2
     b86:	df 01       	movw	r26, r30
     b88:	98 2f       	mov	r25, r24
     b8a:	1d 92       	st	X+, r1
     b8c:	9a 95       	dec	r25
     b8e:	e9 f7       	brne	.-6      	; 0xb8a <_Z10initBufferv+0x18>
	memset(rawY, 0, sizeof(int)*RANK);
     b90:	e8 ef       	ldi	r30, 0xF8	; 248
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	df 01       	movw	r26, r30
     b96:	98 2f       	mov	r25, r24
     b98:	1d 92       	st	X+, r1
     b9a:	9a 95       	dec	r25
     b9c:	e9 f7       	brne	.-6      	; 0xb98 <_Z10initBufferv+0x26>
	memset(rawZ, 0, sizeof(int)*RANK);
     b9e:	ea ed       	ldi	r30, 0xDA	; 218
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	df 01       	movw	r26, r30
     ba4:	1d 92       	st	X+, r1
     ba6:	8a 95       	dec	r24
     ba8:	e9 f7       	brne	.-6      	; 0xba4 <_Z10initBufferv+0x32>
	maxHIC15 = 0;
     baa:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <maxHIC15>
     bae:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <maxHIC15+0x1>
     bb2:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <maxHIC15+0x2>
     bb6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <maxHIC15+0x3>
	tcount = 0;
     bba:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <tcount+0x1>
     bbe:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <tcount>
	cntBuf = 0;
     bc2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <cntBuf>
     bc6:	08 95       	ret

00000bc8 <setup>:
}

void setup() {
     bc8:	0f 93       	push	r16
		
	pinMode(2, OUTPUT);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
	pinMode(8, INPUT);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	88 e0       	ldi	r24, 0x08	; 8
     bd6:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     bda:	26 e0       	ldi	r18, 0x06	; 6
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	55 e2       	ldi	r21, 0x25	; 37
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	85 e8       	ldi	r24, 0x85	; 133
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);
	// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
	if(!display.begin(SSD1306_SWITCHCAPVCC)) {	
     bec:	01 e0       	ldi	r16, 0x01	; 1
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	86 e4       	ldi	r24, 0x46	; 70
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <_ZN16Adafruit_SSD13065beginEhhbb>
     bfc:	81 11       	cpse	r24, r1
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <setup+0x3a>
     c00:	ff cf       	rjmp	.-2      	; 0xc00 <setup+0x38>
		for(;;); // Don't proceed, loop forever
	}
	initBuffer();
}
     c02:	0f 91       	pop	r16
	Serial.begin(9600);
	// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
	if(!display.begin(SSD1306_SWITCHCAPVCC)) {	
		for(;;); // Don't proceed, loop forever
	}
	initBuffer();
     c04:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <_Z10initBufferv>

00000c08 <_Z12powerHandlerv>:

}


void powerHandler(){
	Serial.print(digitalRead(8));
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	0e 94 39 11 	call	0x2272	; 0x2272 <digitalRead>
     c0e:	4a e0       	ldi	r20, 0x0A	; 10
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	bc 01       	movw	r22, r24
     c14:	85 e8       	ldi	r24, 0x85	; 133
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <_ZN5Print5printEii>
	if (digitalRead(8) == LOW) btnCnt++;
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	0e 94 39 11 	call	0x2272	; 0x2272 <digitalRead>
     c22:	89 2b       	or	r24, r25
     c24:	31 f4       	brne	.+12     	; 0xc32 <_Z12powerHandlerv+0x2a>
     c26:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <_Z12powerHandlerv+0x32>
	else {
		btnCnt = 0;
     c32:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
		isPowerOn = 0;
     c36:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isPowerOn>
	}
	Serial.println(btnCnt);
     c3a:	4a e0       	ldi	r20, 0x0A	; 10
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
     c42:	85 e8       	ldi	r24, 0x85	; 133
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN5Print7printlnEhi>
	if (btnCnt > 3)
     c4a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	10 f0       	brcs	.+4      	; 0xc56 <_Z12powerHandlerv+0x4e>
	{
		digitalWrite(2, LOW);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <_Z12powerHandlerv+0x50>
	}
	else
	{
		digitalWrite(2, HIGH);
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <digitalWrite>

00000c5e <_Z8getAccelfff>:
	}
	getMaxHICData();
	return 1;
}

float getAccel(float x, float y, float z){
     c5e:	4f 92       	push	r4
     c60:	5f 92       	push	r5
     c62:	6f 92       	push	r6
     c64:	7f 92       	push	r7
     c66:	8f 92       	push	r8
     c68:	9f 92       	push	r9
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	49 01       	movw	r8, r18
     c7c:	5a 01       	movw	r10, r20
     c7e:	67 01       	movw	r12, r14
     c80:	78 01       	movw	r14, r16

	double sum = x*x + y*y + z*z;
	
	return sqrt(sum);
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
     c86:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
     c8a:	2b 01       	movw	r4, r22
     c8c:	3c 01       	movw	r6, r24
     c8e:	a5 01       	movw	r20, r10
     c90:	94 01       	movw	r18, r8
     c92:	c5 01       	movw	r24, r10
     c94:	b4 01       	movw	r22, r8
     c96:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c3 01       	movw	r24, r6
     ca0:	b2 01       	movw	r22, r4
     ca2:	0e 94 a1 08 	call	0x1142	; 0x1142 <__addsf3>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	a7 01       	movw	r20, r14
     cac:	96 01       	movw	r18, r12
     cae:	c7 01       	movw	r24, r14
     cb0:	b6 01       	movw	r22, r12
     cb2:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c5 01       	movw	r24, r10
     cbc:	b4 01       	movw	r22, r8
     cbe:	0e 94 a1 08 	call	0x1142	; 0x1142 <__addsf3>
}
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	7f 90       	pop	r7
     cd8:	6f 90       	pop	r6
     cda:	5f 90       	pop	r5
     cdc:	4f 90       	pop	r4

float getAccel(float x, float y, float z){

	double sum = x*x + y*y + z*z;
	
	return sqrt(sum);
     cde:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <sqrt>

00000ce2 <_Z12getAccelDatav>:
}


float getAccelData(){
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
	
	scaledX = rawX[cntBuf] /2.56 - 200;
     cfe:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <cntBuf>
     d02:	d0 e0       	ldi	r29, 0x00	; 0
     d04:	cc 0f       	add	r28, r28
     d06:	dd 1f       	adc	r29, r29
     d08:	fe 01       	movw	r30, r28
     d0a:	ea 5e       	subi	r30, 0xEA	; 234
     d0c:	fd 4f       	sbci	r31, 0xFD	; 253
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	07 2e       	mov	r0, r23
     d14:	00 0c       	add	r0, r0
     d16:	88 0b       	sbc	r24, r24
     d18:	99 0b       	sbc	r25, r25
     d1a:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     d1e:	2a e0       	ldi	r18, 0x0A	; 10
     d20:	37 ed       	ldi	r19, 0xD7	; 215
     d22:	43 e2       	ldi	r20, 0x23	; 35
     d24:	50 e4       	ldi	r21, 0x40	; 64
     d26:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	48 e4       	ldi	r20, 0x48	; 72
     d30:	53 e4       	ldi	r21, 0x43	; 67
     d32:	0e 94 a0 08 	call	0x1140	; 0x1140 <__subsf3>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
     d3a:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <scaledX>
     d3e:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <scaledX+0x1>
     d42:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <scaledX+0x2>
     d46:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <scaledX+0x3>
	scaledY = rawY[cntBuf] /2.56 - 200;
     d4a:	fe 01       	movw	r30, r28
     d4c:	e8 50       	subi	r30, 0x08	; 8
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	07 2e       	mov	r0, r23
     d56:	00 0c       	add	r0, r0
     d58:	88 0b       	sbc	r24, r24
     d5a:	99 0b       	sbc	r25, r25
     d5c:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     d60:	2a e0       	ldi	r18, 0x0A	; 10
     d62:	37 ed       	ldi	r19, 0xD7	; 215
     d64:	43 e2       	ldi	r20, 0x23	; 35
     d66:	50 e4       	ldi	r21, 0x40	; 64
     d68:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	48 e4       	ldi	r20, 0x48	; 72
     d72:	53 e4       	ldi	r21, 0x43	; 67
     d74:	0e 94 a0 08 	call	0x1140	; 0x1140 <__subsf3>
     d78:	2b 01       	movw	r4, r22
     d7a:	3c 01       	movw	r6, r24
     d7c:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <scaledY>
     d80:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <scaledY+0x1>
     d84:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <scaledY+0x2>
     d88:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <scaledY+0x3>
	scaledZ = rawZ[cntBuf] /2.56 - 200;	
     d8c:	c6 52       	subi	r28, 0x26	; 38
     d8e:	de 4f       	sbci	r29, 0xFE	; 254
     d90:	68 81       	ld	r22, Y
     d92:	79 81       	ldd	r23, Y+1	; 0x01
     d94:	07 2e       	mov	r0, r23
     d96:	00 0c       	add	r0, r0
     d98:	88 0b       	sbc	r24, r24
     d9a:	99 0b       	sbc	r25, r25
     d9c:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     da0:	2a e0       	ldi	r18, 0x0A	; 10
     da2:	37 ed       	ldi	r19, 0xD7	; 215
     da4:	43 e2       	ldi	r20, 0x23	; 35
     da6:	50 e4       	ldi	r21, 0x40	; 64
     da8:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	48 e4       	ldi	r20, 0x48	; 72
     db2:	53 e4       	ldi	r21, 0x43	; 67
     db4:	0e 94 a0 08 	call	0x1140	; 0x1140 <__subsf3>
     db8:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <scaledZ>
     dbc:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <scaledZ+0x1>
     dc0:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <scaledZ+0x2>
     dc4:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <scaledZ+0x3>

	return getAccel(scaledX, scaledY, scaledZ);
     dc8:	7b 01       	movw	r14, r22
     dca:	8c 01       	movw	r16, r24
     dcc:	a3 01       	movw	r20, r6
     dce:	92 01       	movw	r18, r4
     dd0:	c5 01       	movw	r24, r10
     dd2:	b4 01       	movw	r22, r8
     dd4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_Z8getAccelfff>
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	7f 90       	pop	r7
     dee:	6f 90       	pop	r6
     df0:	5f 90       	pop	r5
     df2:	4f 90       	pop	r4
     df4:	08 95       	ret

00000df6 <_Z11pushADCDatav>:


void pushADCData(){
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
	rawX[cntBuf] = analogRead(XOUT);
     dfa:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <cntBuf>
     dfe:	d0 e0       	ldi	r29, 0x00	; 0
     e00:	8e e0       	ldi	r24, 0x0E	; 14
     e02:	0e 94 88 10 	call	0x2110	; 0x2110 <analogRead>
     e06:	cc 0f       	add	r28, r28
     e08:	dd 1f       	adc	r29, r29
     e0a:	ca 5e       	subi	r28, 0xEA	; 234
     e0c:	dd 4f       	sbci	r29, 0xFD	; 253
     e0e:	99 83       	std	Y+1, r25	; 0x01
     e10:	88 83       	st	Y, r24
	rawY[cntBuf] = analogRead(YOUT);
     e12:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <cntBuf>
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	0e 94 88 10 	call	0x2110	; 0x2110 <analogRead>
     e1e:	cc 0f       	add	r28, r28
     e20:	dd 1f       	adc	r29, r29
     e22:	c8 50       	subi	r28, 0x08	; 8
     e24:	de 4f       	sbci	r29, 0xFE	; 254
     e26:	99 83       	std	Y+1, r25	; 0x01
     e28:	88 83       	st	Y, r24
	rawZ[cntBuf] = analogRead(ZOUT);
     e2a:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <cntBuf>
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
     e30:	80 e1       	ldi	r24, 0x10	; 16
     e32:	0e 94 88 10 	call	0x2110	; 0x2110 <analogRead>
     e36:	cc 0f       	add	r28, r28
     e38:	dd 1f       	adc	r29, r29
     e3a:	c6 52       	subi	r28, 0x26	; 38
     e3c:	de 4f       	sbci	r29, 0xFE	; 254
     e3e:	99 83       	std	Y+1, r25	; 0x01
     e40:	88 83       	st	Y, r24
/*	Serial.print(rawX[cntBuf]); Serial.print(",");
	Serial.print(rawY[cntBuf]); Serial.print(",");
	Serial.print(rawZ[cntBuf]); Serial.print(",");*/
	ac[cntBuf]   = getAccelData();
     e42:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <cntBuf>
     e46:	d0 e0       	ldi	r29, 0x00	; 0
     e48:	0e 94 71 06 	call	0xce2	; 0xce2 <_Z12getAccelDatav>
     e4c:	cc 0f       	add	r28, r28
     e4e:	dd 1f       	adc	r29, r29
     e50:	cc 0f       	add	r28, r28
     e52:	dd 1f       	adc	r29, r29
     e54:	c2 56       	subi	r28, 0x62	; 98
     e56:	de 4f       	sbci	r29, 0xFE	; 254
     e58:	68 83       	st	Y, r22
     e5a:	79 83       	std	Y+1, r23	; 0x01
     e5c:	8a 83       	std	Y+2, r24	; 0x02
     e5e:	9b 83       	std	Y+3, r25	; 0x03
	
	cntBuf ++;
	cntBuf %=  RANK;
     e60:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <cntBuf>
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	6f e0       	ldi	r22, 0x0F	; 15
     e68:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__udivmodqi4>
     e6c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <cntBuf>
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <_Z8getHIC15f>:

float getHIC15(float hic15){
	
	return  pow(hic15/RANK , 2.5)/1000 * RANK;
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e7       	ldi	r20, 0x70	; 112
     e7c:	51 e4       	ldi	r21, 0x41	; 65
     e7e:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	50 e4       	ldi	r21, 0x40	; 64
     e8a:	0e 94 b5 0a 	call	0x156a	; 0x156a <pow>
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a e7       	ldi	r20, 0x7A	; 122
     e94:	54 e4       	ldi	r21, 0x44	; 68
     e96:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e7       	ldi	r20, 0x70	; 112
     ea0:	51 e4       	ldi	r21, 0x41	; 65
     ea2:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
	
}
     ea6:	08 95       	ret

00000ea8 <_Z11getSumHIC15v>:
float getSumHIC15(){
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
	float hic15 = ac[0]/2;
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	5f e3       	ldi	r21, 0x3F	; 63
     ebc:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <ac>
     ec0:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <ac+0x1>
     ec4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <ac+0x2>
     ec8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <ac+0x3>
     ecc:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
     ed0:	6b 01       	movw	r12, r22
     ed2:	7c 01       	movw	r14, r24
	hic15 += ac[RANK - 1] /2;	
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <ac+0x38>
     ee0:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <ac+0x39>
     ee4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ac+0x3a>
     ee8:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ac+0x3b>
     eec:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
     ef0:	a7 01       	movw	r20, r14
     ef2:	96 01       	movw	r18, r12
     ef4:	0e 94 a1 08 	call	0x1142	; 0x1142 <__addsf3>
     ef8:	c2 ea       	ldi	r28, 0xA2	; 162
     efa:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t i = 1; i < RANK-1; i++)
	{
		hic15 += ac[i];
     efc:	29 91       	ld	r18, Y+
     efe:	39 91       	ld	r19, Y+
     f00:	49 91       	ld	r20, Y+
     f02:	59 91       	ld	r21, Y+
     f04:	0e 94 a1 08 	call	0x1142	; 0x1142 <__addsf3>
	
}
float getSumHIC15(){
	float hic15 = ac[0]/2;
	hic15 += ac[RANK - 1] /2;	
	for(uint8_t i = 1; i < RANK-1; i++)
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	c6 3d       	cpi	r28, 0xD6	; 214
     f0c:	d2 07       	cpc	r29, r18
     f0e:	b1 f7       	brne	.-20     	; 0xefc <_Z11getSumHIC15v+0x54>
	{
		hic15 += ac[i];
	}
	return hic15;
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	08 95       	ret

00000f1e <_Z13getMaxHICDatav>:
void getMaxHICData(){
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
	float bufData = getSumHIC15();
     f26:	0e 94 54 07 	call	0xea8	; 0xea8 <_Z11getSumHIC15v>
     f2a:	6b 01       	movw	r12, r22
     f2c:	7c 01       	movw	r14, r24
	if (bufData >  maxHIC15) maxHIC15 = bufData;
     f2e:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <maxHIC15>
     f32:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <maxHIC15+0x1>
     f36:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <maxHIC15+0x2>
     f3a:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <maxHIC15+0x3>
     f3e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__gesf2>
     f42:	18 16       	cp	r1, r24
     f44:	44 f4       	brge	.+16     	; 0xf56 <_Z13getMaxHICDatav+0x38>
     f46:	c0 92 42 02 	sts	0x0242, r12	; 0x800242 <maxHIC15>
     f4a:	d0 92 43 02 	sts	0x0243, r13	; 0x800243 <maxHIC15+0x1>
     f4e:	e0 92 44 02 	sts	0x0244, r14	; 0x800244 <maxHIC15+0x2>
     f52:	f0 92 45 02 	sts	0x0245, r15	; 0x800245 <maxHIC15+0x3>
/*	
	Serial.print((int)bufData); Serial.print(".");Serial.print((int)(bufData*100)%100); Serial.print(",");
	Serial.print((int)maxHIC15); Serial.print(".");Serial.println((int)(maxHIC15*100)%100); 
	*/
	
}
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	08 95       	ret

00000f60 <_GLOBAL__sub_I_display>:
		display.write(dispstr[i]);
	}
	display.display();
	
	//delay(10);
}
     f60:	af 92       	push	r10
     f62:	cf 92       	push	r12
     f64:	ef 92       	push	r14
     f66:	0f 93       	push	r16
#define OLED_CLK   13
#define OLED_DC    4
#define OLED_CS    5
#define OLED_RESET 3

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
     f68:	85 e0       	ldi	r24, 0x05	; 5
     f6a:	a8 2e       	mov	r10, r24
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	c9 2e       	mov	r12, r25
     f70:	24 e0       	ldi	r18, 0x04	; 4
     f72:	e2 2e       	mov	r14, r18
     f74:	0d e0       	ldi	r16, 0x0D	; 13
     f76:	2b e0       	ldi	r18, 0x0B	; 11
     f78:	40 e4       	ldi	r20, 0x40	; 64
     f7a:	60 e8       	ldi	r22, 0x80	; 128
     f7c:	86 e4       	ldi	r24, 0x46	; 70
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 c4 18 	call	0x3188	; 0x3188 <_ZN16Adafruit_SSD1306C1Ehhaaaaa>
		display.write(dispstr[i]);
	}
	display.display();
	
	//delay(10);
}
     f84:	0f 91       	pop	r16
     f86:	ef 90       	pop	r14
     f88:	cf 90       	pop	r12
     f8a:	af 90       	pop	r10
     f8c:	08 95       	ret

00000f8e <_GLOBAL__sub_D_display>:
#define OLED_CLK   13
#define OLED_DC    4
#define OLED_CS    5
#define OLED_RESET 3

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
     f8e:	86 e4       	ldi	r24, 0x46	; 70
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <_ZN16Adafruit_SSD1306D1Ev>

00000f96 <_Z12oled_displayf>:
	Serial.print((int)maxHIC15); Serial.print(".");Serial.println((int)(maxHIC15*100)%100); 
	*/
	
}
void oled_display(float hic15)
{
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	64 97       	sbiw	r28, 0x14	; 20
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
	char dispstr[20];
	memset(dispstr,0,20);
     fba:	8e 01       	movw	r16, r28
     fbc:	0f 5f       	subi	r16, 0xFF	; 255
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	84 e1       	ldi	r24, 0x14	; 20
     fc2:	f8 01       	movw	r30, r16
     fc4:	11 92       	st	Z+, r1
     fc6:	8a 95       	dec	r24
     fc8:	e9 f7       	brne	.-6      	; 0xfc4 <_Z12oled_displayf+0x2e>
	
	display.clearDisplay();
     fca:	86 e4       	ldi	r24, 0x46	; 70
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(3);      // Normal 1:1 pixel scale
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	86 e4       	ldi	r24, 0x46	; 70
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <display+0x13>
     fe4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <display+0x12>
     fe8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <display+0x11>
     fec:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <display+0x10>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <display+0xd>
     ff8:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <display+0xc>
     ffc:	89 e1       	ldi	r24, 0x19	; 25
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <display+0xf>
    1004:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <display+0xe>
            'true' to this function to use correct CP437 character values
            in your code.
    @param  x  true = enable (new behavior), false = disable (old behavior)
  */
  /**********************************************************************/
  void cp437(boolean x=true) { _cp437 = x; }
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <display+0x18>
	display.setTextColor(WHITE); // Draw white text
	display.setCursor(5, 25);     // Start at top-left corner
	display.cp437(true);         // Use full 256 char 'Code Page 437' font

	sprintf(dispstr, "%d.%02d", (int)hic15, (int)(hic15*100)%100);
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	48 ec       	ldi	r20, 0xC8	; 200
    1014:	52 e4       	ldi	r21, 0x42	; 66
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
    101e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fixsfsi>
    1022:	cb 01       	movw	r24, r22
    1024:	64 e6       	ldi	r22, 0x64	; 100
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	0e 94 07 22 	call	0x440e	; 0x440e <__divmodhi4>
    102c:	9f 93       	push	r25
    102e:	8f 93       	push	r24
    1030:	c7 01       	movw	r24, r14
    1032:	b6 01       	movw	r22, r12
    1034:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fixsfsi>
    1038:	7f 93       	push	r23
    103a:	6f 93       	push	r22
    103c:	88 e0       	ldi	r24, 0x08	; 8
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	9f 93       	push	r25
    1042:	8f 93       	push	r24
    1044:	1f 93       	push	r17
    1046:	0f 93       	push	r16
    1048:	0e 94 84 23 	call	0x4708	; 0x4708 <sprintf>
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	78 01       	movw	r14, r16

	
	for(int16_t i=0; i < strlen(dispstr); i++) {
    1058:	f8 01       	movw	r30, r16
    105a:	01 90       	ld	r0, Z+
    105c:	00 20       	and	r0, r0
    105e:	e9 f7       	brne	.-6      	; 0x105a <_Z12oled_displayf+0xc4>
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	e0 1b       	sub	r30, r16
    1064:	f1 0b       	sbc	r31, r17
    1066:	c7 01       	movw	r24, r14
    1068:	80 1b       	sub	r24, r16
    106a:	91 0b       	sbc	r25, r17
    106c:	8e 17       	cp	r24, r30
    106e:	9f 07       	cpc	r25, r31
    1070:	40 f4       	brcc	.+16     	; 0x1082 <_Z12oled_displayf+0xec>
		display.write(dispstr[i]);
    1072:	f7 01       	movw	r30, r14
    1074:	61 91       	ld	r22, Z+
    1076:	7f 01       	movw	r14, r30
    1078:	86 e4       	ldi	r24, 0x46	; 70
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN12Adafruit_GFX5writeEh>
	display.cp437(true);         // Use full 256 char 'Code Page 437' font

	sprintf(dispstr, "%d.%02d", (int)hic15, (int)(hic15*100)%100);

	
	for(int16_t i=0; i < strlen(dispstr); i++) {
    1080:	eb cf       	rjmp	.-42     	; 0x1058 <_Z12oled_displayf+0xc2>
		display.write(dispstr[i]);
	}
	display.display();
    1082:	86 e4       	ldi	r24, 0x46	; 70
    1084:	92 e0       	ldi	r25, 0x02	; 2
    1086:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <_ZN16Adafruit_SSD13067displayEv>
	
	//delay(10);
}
    108a:	64 96       	adiw	r28, 0x14	; 20
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	08 95       	ret

000010a8 <_Z12HIC15Handlerv>:
	{
		digitalWrite(2, HIGH);
	}
}
uint8_t HIC15Handler(){
	tcount ++;
    10a8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <tcount>
    10ac:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <tcount+0x1>
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <tcount+0x1>
    10b6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <tcount>
	if (tcount > DISPLAY_FLASH_RATE) {
    10ba:	89 3e       	cpi	r24, 0xE9	; 233
    10bc:	93 40       	sbci	r25, 0x03	; 3
    10be:	d4 f0       	brlt	.+52     	; 0x10f4 <_Z12HIC15Handlerv+0x4c>
		powerHandler();
    10c0:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z12powerHandlerv>
		maxHIC15 = getHIC15(maxHIC15);	
    10c4:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <maxHIC15>
    10c8:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <maxHIC15+0x1>
    10cc:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <maxHIC15+0x2>
    10d0:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <maxHIC15+0x3>
    10d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <_Z8getHIC15f>
    10d8:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <maxHIC15>
    10dc:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <maxHIC15+0x1>
    10e0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <maxHIC15+0x2>
    10e4:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <maxHIC15+0x3>
/*		Serial.print("=============");	
		Serial.print((int)maxHIC15); Serial.print(".");Serial.println((int)(maxHIC15*100)%100); 
		*/
		oled_display(maxHIC15);		
    10e8:	0e 94 cb 07 	call	0xf96	; 0xf96 <_Z12oled_displayf>
		initBuffer();	
    10ec:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z10initBufferv>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
		return 0;
	}
	getMaxHICData();
    10f4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z13getMaxHICDatav>
	return 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
}
    10fa:	08 95       	ret

000010fc <loop>:
	}
	initBuffer();
}


void loop() {
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
	
	long tempTime = micros();
    1104:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <micros>
    1108:	6b 01       	movw	r12, r22
    110a:	7c 01       	movw	r14, r24
	pushADCData();
    110c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_Z11pushADCDatav>
	if (HIC15Handler() == 1) delayMicroseconds(1000 - (micros() - tempTime));
    1110:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_Z12HIC15Handlerv>
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	79 f4       	brne	.+30     	; 0x1136 <loop+0x3a>
    1118:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <micros>
    111c:	28 e1       	ldi	r18, 0x18	; 24
    111e:	c2 1a       	sub	r12, r18
    1120:	2c ef       	ldi	r18, 0xFC	; 252
    1122:	d2 0a       	sbc	r13, r18
    1124:	c6 01       	movw	r24, r12
    1126:	86 1b       	sub	r24, r22
    1128:	97 0b       	sbc	r25, r23

}
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12

void loop() {
	
	long tempTime = micros();
	pushADCData();
	if (HIC15Handler() == 1) delayMicroseconds(1000 - (micros() - tempTime));
    1132:	0c 94 42 10 	jmp	0x2084	; 0x2084 <delayMicroseconds>

}
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	08 95       	ret

00001140 <__subsf3>:
    1140:	50 58       	subi	r21, 0x80	; 128

00001142 <__addsf3>:
    1142:	bb 27       	eor	r27, r27
    1144:	aa 27       	eor	r26, r26
    1146:	0e 94 b8 08 	call	0x1170	; 0x1170 <__addsf3x>
    114a:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_round>
    114e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_pscA>
    1152:	38 f0       	brcs	.+14     	; 0x1162 <__addsf3+0x20>
    1154:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_pscB>
    1158:	20 f0       	brcs	.+8      	; 0x1162 <__addsf3+0x20>
    115a:	39 f4       	brne	.+14     	; 0x116a <__addsf3+0x28>
    115c:	9f 3f       	cpi	r25, 0xFF	; 255
    115e:	19 f4       	brne	.+6      	; 0x1166 <__addsf3+0x24>
    1160:	26 f4       	brtc	.+8      	; 0x116a <__addsf3+0x28>
    1162:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>
    1166:	0e f4       	brtc	.+2      	; 0x116a <__addsf3+0x28>
    1168:	e0 95       	com	r30
    116a:	e7 fb       	bst	r30, 7
    116c:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>

00001170 <__addsf3x>:
    1170:	e9 2f       	mov	r30, r25
    1172:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fp_split3>
    1176:	58 f3       	brcs	.-42     	; 0x114e <__addsf3+0xc>
    1178:	ba 17       	cp	r27, r26
    117a:	62 07       	cpc	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	84 07       	cpc	r24, r20
    1180:	95 07       	cpc	r25, r21
    1182:	20 f0       	brcs	.+8      	; 0x118c <__addsf3x+0x1c>
    1184:	79 f4       	brne	.+30     	; 0x11a4 <__addsf3x+0x34>
    1186:	a6 f5       	brtc	.+104    	; 0x11f0 <__addsf3x+0x80>
    1188:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__fp_zero>
    118c:	0e f4       	brtc	.+2      	; 0x1190 <__addsf3x+0x20>
    118e:	e0 95       	com	r30
    1190:	0b 2e       	mov	r0, r27
    1192:	ba 2f       	mov	r27, r26
    1194:	a0 2d       	mov	r26, r0
    1196:	0b 01       	movw	r0, r22
    1198:	b9 01       	movw	r22, r18
    119a:	90 01       	movw	r18, r0
    119c:	0c 01       	movw	r0, r24
    119e:	ca 01       	movw	r24, r20
    11a0:	a0 01       	movw	r20, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	ff 27       	eor	r31, r31
    11a6:	59 1b       	sub	r21, r25
    11a8:	99 f0       	breq	.+38     	; 0x11d0 <__addsf3x+0x60>
    11aa:	59 3f       	cpi	r21, 0xF9	; 249
    11ac:	50 f4       	brcc	.+20     	; 0x11c2 <__addsf3x+0x52>
    11ae:	50 3e       	cpi	r21, 0xE0	; 224
    11b0:	68 f1       	brcs	.+90     	; 0x120c <__addsf3x+0x9c>
    11b2:	1a 16       	cp	r1, r26
    11b4:	f0 40       	sbci	r31, 0x00	; 0
    11b6:	a2 2f       	mov	r26, r18
    11b8:	23 2f       	mov	r18, r19
    11ba:	34 2f       	mov	r19, r20
    11bc:	44 27       	eor	r20, r20
    11be:	58 5f       	subi	r21, 0xF8	; 248
    11c0:	f3 cf       	rjmp	.-26     	; 0x11a8 <__addsf3x+0x38>
    11c2:	46 95       	lsr	r20
    11c4:	37 95       	ror	r19
    11c6:	27 95       	ror	r18
    11c8:	a7 95       	ror	r26
    11ca:	f0 40       	sbci	r31, 0x00	; 0
    11cc:	53 95       	inc	r21
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__addsf3x+0x52>
    11d0:	7e f4       	brtc	.+30     	; 0x11f0 <__addsf3x+0x80>
    11d2:	1f 16       	cp	r1, r31
    11d4:	ba 0b       	sbc	r27, r26
    11d6:	62 0b       	sbc	r22, r18
    11d8:	73 0b       	sbc	r23, r19
    11da:	84 0b       	sbc	r24, r20
    11dc:	ba f0       	brmi	.+46     	; 0x120c <__addsf3x+0x9c>
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	a1 f0       	breq	.+40     	; 0x120a <__addsf3x+0x9a>
    11e2:	ff 0f       	add	r31, r31
    11e4:	bb 1f       	adc	r27, r27
    11e6:	66 1f       	adc	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	c2 f7       	brpl	.-16     	; 0x11de <__addsf3x+0x6e>
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <__addsf3x+0x9c>
    11f0:	ba 0f       	add	r27, r26
    11f2:	62 1f       	adc	r22, r18
    11f4:	73 1f       	adc	r23, r19
    11f6:	84 1f       	adc	r24, r20
    11f8:	48 f4       	brcc	.+18     	; 0x120c <__addsf3x+0x9c>
    11fa:	87 95       	ror	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f7 95       	ror	r31
    1204:	9e 3f       	cpi	r25, 0xFE	; 254
    1206:	08 f0       	brcs	.+2      	; 0x120a <__addsf3x+0x9a>
    1208:	b0 cf       	rjmp	.-160    	; 0x116a <__addsf3+0x28>
    120a:	93 95       	inc	r25
    120c:	88 0f       	add	r24, r24
    120e:	08 f0       	brcs	.+2      	; 0x1212 <__addsf3x+0xa2>
    1210:	99 27       	eor	r25, r25
    1212:	ee 0f       	add	r30, r30
    1214:	97 95       	ror	r25
    1216:	87 95       	ror	r24
    1218:	08 95       	ret

0000121a <__divsf3>:
    121a:	0e 94 21 09 	call	0x1242	; 0x1242 <__divsf3x>
    121e:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_round>
    1222:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_pscB>
    1226:	58 f0       	brcs	.+22     	; 0x123e <__divsf3+0x24>
    1228:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_pscA>
    122c:	40 f0       	brcs	.+16     	; 0x123e <__divsf3+0x24>
    122e:	29 f4       	brne	.+10     	; 0x123a <__divsf3+0x20>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	29 f0       	breq	.+10     	; 0x123e <__divsf3+0x24>
    1234:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>
    1238:	51 11       	cpse	r21, r1
    123a:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__fp_szero>
    123e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>

00001242 <__divsf3x>:
    1242:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fp_split3>
    1246:	68 f3       	brcs	.-38     	; 0x1222 <__divsf3+0x8>

00001248 <__divsf3_pse>:
    1248:	99 23       	and	r25, r25
    124a:	b1 f3       	breq	.-20     	; 0x1238 <__divsf3+0x1e>
    124c:	55 23       	and	r21, r21
    124e:	91 f3       	breq	.-28     	; 0x1234 <__divsf3+0x1a>
    1250:	95 1b       	sub	r25, r21
    1252:	55 0b       	sbc	r21, r21
    1254:	bb 27       	eor	r27, r27
    1256:	aa 27       	eor	r26, r26
    1258:	62 17       	cp	r22, r18
    125a:	73 07       	cpc	r23, r19
    125c:	84 07       	cpc	r24, r20
    125e:	38 f0       	brcs	.+14     	; 0x126e <__divsf3_pse+0x26>
    1260:	9f 5f       	subi	r25, 0xFF	; 255
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	44 1f       	adc	r20, r20
    126a:	aa 1f       	adc	r26, r26
    126c:	a9 f3       	breq	.-22     	; 0x1258 <__divsf3_pse+0x10>
    126e:	35 d0       	rcall	.+106    	; 0x12da <__divsf3_pse+0x92>
    1270:	0e 2e       	mov	r0, r30
    1272:	3a f0       	brmi	.+14     	; 0x1282 <__divsf3_pse+0x3a>
    1274:	e0 e8       	ldi	r30, 0x80	; 128
    1276:	32 d0       	rcall	.+100    	; 0x12dc <__divsf3_pse+0x94>
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	e6 95       	lsr	r30
    127e:	00 1c       	adc	r0, r0
    1280:	ca f7       	brpl	.-14     	; 0x1274 <__divsf3_pse+0x2c>
    1282:	2b d0       	rcall	.+86     	; 0x12da <__divsf3_pse+0x92>
    1284:	fe 2f       	mov	r31, r30
    1286:	29 d0       	rcall	.+82     	; 0x12da <__divsf3_pse+0x92>
    1288:	66 0f       	add	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	bb 1f       	adc	r27, r27
    1290:	26 17       	cp	r18, r22
    1292:	37 07       	cpc	r19, r23
    1294:	48 07       	cpc	r20, r24
    1296:	ab 07       	cpc	r26, r27
    1298:	b0 e8       	ldi	r27, 0x80	; 128
    129a:	09 f0       	breq	.+2      	; 0x129e <__divsf3_pse+0x56>
    129c:	bb 0b       	sbc	r27, r27
    129e:	80 2d       	mov	r24, r0
    12a0:	bf 01       	movw	r22, r30
    12a2:	ff 27       	eor	r31, r31
    12a4:	93 58       	subi	r25, 0x83	; 131
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	3a f0       	brmi	.+14     	; 0x12b8 <__divsf3_pse+0x70>
    12aa:	9e 3f       	cpi	r25, 0xFE	; 254
    12ac:	51 05       	cpc	r21, r1
    12ae:	78 f0       	brcs	.+30     	; 0x12ce <__divsf3_pse+0x86>
    12b0:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>
    12b4:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__fp_szero>
    12b8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ba:	e4 f3       	brlt	.-8      	; 0x12b4 <__divsf3_pse+0x6c>
    12bc:	98 3e       	cpi	r25, 0xE8	; 232
    12be:	d4 f3       	brlt	.-12     	; 0x12b4 <__divsf3_pse+0x6c>
    12c0:	86 95       	lsr	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	9f 5f       	subi	r25, 0xFF	; 255
    12cc:	c9 f7       	brne	.-14     	; 0x12c0 <__divsf3_pse+0x78>
    12ce:	88 0f       	add	r24, r24
    12d0:	91 1d       	adc	r25, r1
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret
    12da:	e1 e0       	ldi	r30, 0x01	; 1
    12dc:	66 0f       	add	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	88 1f       	adc	r24, r24
    12e2:	bb 1f       	adc	r27, r27
    12e4:	62 17       	cp	r22, r18
    12e6:	73 07       	cpc	r23, r19
    12e8:	84 07       	cpc	r24, r20
    12ea:	ba 07       	cpc	r27, r26
    12ec:	20 f0       	brcs	.+8      	; 0x12f6 <__divsf3_pse+0xae>
    12ee:	62 1b       	sub	r22, r18
    12f0:	73 0b       	sbc	r23, r19
    12f2:	84 0b       	sbc	r24, r20
    12f4:	ba 0b       	sbc	r27, r26
    12f6:	ee 1f       	adc	r30, r30
    12f8:	88 f7       	brcc	.-30     	; 0x12dc <__divsf3_pse+0x94>
    12fa:	e0 95       	com	r30
    12fc:	08 95       	ret

000012fe <__fixsfsi>:
    12fe:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
    1302:	68 94       	set
    1304:	b1 11       	cpse	r27, r1
    1306:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__fp_szero>
    130a:	08 95       	ret

0000130c <__fixunssfsi>:
    130c:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_splitA>
    1310:	88 f0       	brcs	.+34     	; 0x1334 <__fixunssfsi+0x28>
    1312:	9f 57       	subi	r25, 0x7F	; 127
    1314:	98 f0       	brcs	.+38     	; 0x133c <__fixunssfsi+0x30>
    1316:	b9 2f       	mov	r27, r25
    1318:	99 27       	eor	r25, r25
    131a:	b7 51       	subi	r27, 0x17	; 23
    131c:	b0 f0       	brcs	.+44     	; 0x134a <__fixunssfsi+0x3e>
    131e:	e1 f0       	breq	.+56     	; 0x1358 <__fixunssfsi+0x4c>
    1320:	66 0f       	add	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	88 1f       	adc	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	1a f0       	brmi	.+6      	; 0x1330 <__fixunssfsi+0x24>
    132a:	ba 95       	dec	r27
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__fixunssfsi+0x14>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <__fixunssfsi+0x4c>
    1330:	b1 30       	cpi	r27, 0x01	; 1
    1332:	91 f0       	breq	.+36     	; 0x1358 <__fixunssfsi+0x4c>
    1334:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_zero>
    1338:	b1 e0       	ldi	r27, 0x01	; 1
    133a:	08 95       	ret
    133c:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__fp_zero>
    1340:	67 2f       	mov	r22, r23
    1342:	78 2f       	mov	r23, r24
    1344:	88 27       	eor	r24, r24
    1346:	b8 5f       	subi	r27, 0xF8	; 248
    1348:	39 f0       	breq	.+14     	; 0x1358 <__fixunssfsi+0x4c>
    134a:	b9 3f       	cpi	r27, 0xF9	; 249
    134c:	cc f3       	brlt	.-14     	; 0x1340 <__fixunssfsi+0x34>
    134e:	86 95       	lsr	r24
    1350:	77 95       	ror	r23
    1352:	67 95       	ror	r22
    1354:	b3 95       	inc	r27
    1356:	d9 f7       	brne	.-10     	; 0x134e <__fixunssfsi+0x42>
    1358:	3e f4       	brtc	.+14     	; 0x1368 <__fixunssfsi+0x5c>
    135a:	90 95       	com	r25
    135c:	80 95       	com	r24
    135e:	70 95       	com	r23
    1360:	61 95       	neg	r22
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	8f 4f       	sbci	r24, 0xFF	; 255
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	08 95       	ret

0000136a <__floatunsisf>:
    136a:	e8 94       	clt
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <__floatsisf+0x12>

0000136e <__floatsisf>:
    136e:	97 fb       	bst	r25, 7
    1370:	3e f4       	brtc	.+14     	; 0x1380 <__floatsisf+0x12>
    1372:	90 95       	com	r25
    1374:	80 95       	com	r24
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	99 23       	and	r25, r25
    1382:	a9 f0       	breq	.+42     	; 0x13ae <__floatsisf+0x40>
    1384:	f9 2f       	mov	r31, r25
    1386:	96 e9       	ldi	r25, 0x96	; 150
    1388:	bb 27       	eor	r27, r27
    138a:	93 95       	inc	r25
    138c:	f6 95       	lsr	r31
    138e:	87 95       	ror	r24
    1390:	77 95       	ror	r23
    1392:	67 95       	ror	r22
    1394:	b7 95       	ror	r27
    1396:	f1 11       	cpse	r31, r1
    1398:	f8 cf       	rjmp	.-16     	; 0x138a <__floatsisf+0x1c>
    139a:	fa f4       	brpl	.+62     	; 0x13da <__floatsisf+0x6c>
    139c:	bb 0f       	add	r27, r27
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__floatsisf+0x36>
    13a0:	60 ff       	sbrs	r22, 0
    13a2:	1b c0       	rjmp	.+54     	; 0x13da <__floatsisf+0x6c>
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	16 c0       	rjmp	.+44     	; 0x13da <__floatsisf+0x6c>
    13ae:	88 23       	and	r24, r24
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <__floatsisf+0x48>
    13b2:	96 e9       	ldi	r25, 0x96	; 150
    13b4:	11 c0       	rjmp	.+34     	; 0x13d8 <__floatsisf+0x6a>
    13b6:	77 23       	and	r23, r23
    13b8:	21 f0       	breq	.+8      	; 0x13c2 <__floatsisf+0x54>
    13ba:	9e e8       	ldi	r25, 0x8E	; 142
    13bc:	87 2f       	mov	r24, r23
    13be:	76 2f       	mov	r23, r22
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <__floatsisf+0x5e>
    13c2:	66 23       	and	r22, r22
    13c4:	71 f0       	breq	.+28     	; 0x13e2 <__floatsisf+0x74>
    13c6:	96 e8       	ldi	r25, 0x86	; 134
    13c8:	86 2f       	mov	r24, r22
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	2a f0       	brmi	.+10     	; 0x13da <__floatsisf+0x6c>
    13d0:	9a 95       	dec	r25
    13d2:	66 0f       	add	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	da f7       	brpl	.-10     	; 0x13d0 <__floatsisf+0x62>
    13da:	88 0f       	add	r24, r24
    13dc:	96 95       	lsr	r25
    13de:	87 95       	ror	r24
    13e0:	97 f9       	bld	r25, 7
    13e2:	08 95       	ret

000013e4 <__fp_inf>:
    13e4:	97 f9       	bld	r25, 7
    13e6:	9f 67       	ori	r25, 0x7F	; 127
    13e8:	80 e8       	ldi	r24, 0x80	; 128
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	08 95       	ret

000013f0 <__fp_nan>:
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	80 ec       	ldi	r24, 0xC0	; 192
    13f4:	08 95       	ret

000013f6 <__fp_pscA>:
    13f6:	00 24       	eor	r0, r0
    13f8:	0a 94       	dec	r0
    13fa:	16 16       	cp	r1, r22
    13fc:	17 06       	cpc	r1, r23
    13fe:	18 06       	cpc	r1, r24
    1400:	09 06       	cpc	r0, r25
    1402:	08 95       	ret

00001404 <__fp_pscB>:
    1404:	00 24       	eor	r0, r0
    1406:	0a 94       	dec	r0
    1408:	12 16       	cp	r1, r18
    140a:	13 06       	cpc	r1, r19
    140c:	14 06       	cpc	r1, r20
    140e:	05 06       	cpc	r0, r21
    1410:	08 95       	ret

00001412 <__fp_round>:
    1412:	09 2e       	mov	r0, r25
    1414:	03 94       	inc	r0
    1416:	00 0c       	add	r0, r0
    1418:	11 f4       	brne	.+4      	; 0x141e <__fp_round+0xc>
    141a:	88 23       	and	r24, r24
    141c:	52 f0       	brmi	.+20     	; 0x1432 <__fp_round+0x20>
    141e:	bb 0f       	add	r27, r27
    1420:	40 f4       	brcc	.+16     	; 0x1432 <__fp_round+0x20>
    1422:	bf 2b       	or	r27, r31
    1424:	11 f4       	brne	.+4      	; 0x142a <__fp_round+0x18>
    1426:	60 ff       	sbrs	r22, 0
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <__fp_round+0x20>
    142a:	6f 5f       	subi	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	8f 4f       	sbci	r24, 0xFF	; 255
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	08 95       	ret

00001434 <__fp_split3>:
    1434:	57 fd       	sbrc	r21, 7
    1436:	90 58       	subi	r25, 0x80	; 128
    1438:	44 0f       	add	r20, r20
    143a:	55 1f       	adc	r21, r21
    143c:	59 f0       	breq	.+22     	; 0x1454 <__fp_splitA+0x10>
    143e:	5f 3f       	cpi	r21, 0xFF	; 255
    1440:	71 f0       	breq	.+28     	; 0x145e <__fp_splitA+0x1a>
    1442:	47 95       	ror	r20

00001444 <__fp_splitA>:
    1444:	88 0f       	add	r24, r24
    1446:	97 fb       	bst	r25, 7
    1448:	99 1f       	adc	r25, r25
    144a:	61 f0       	breq	.+24     	; 0x1464 <__fp_splitA+0x20>
    144c:	9f 3f       	cpi	r25, 0xFF	; 255
    144e:	79 f0       	breq	.+30     	; 0x146e <__fp_splitA+0x2a>
    1450:	87 95       	ror	r24
    1452:	08 95       	ret
    1454:	12 16       	cp	r1, r18
    1456:	13 06       	cpc	r1, r19
    1458:	14 06       	cpc	r1, r20
    145a:	55 1f       	adc	r21, r21
    145c:	f2 cf       	rjmp	.-28     	; 0x1442 <__fp_split3+0xe>
    145e:	46 95       	lsr	r20
    1460:	f1 df       	rcall	.-30     	; 0x1444 <__fp_splitA>
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <__fp_splitA+0x30>
    1464:	16 16       	cp	r1, r22
    1466:	17 06       	cpc	r1, r23
    1468:	18 06       	cpc	r1, r24
    146a:	99 1f       	adc	r25, r25
    146c:	f1 cf       	rjmp	.-30     	; 0x1450 <__fp_splitA+0xc>
    146e:	86 95       	lsr	r24
    1470:	71 05       	cpc	r23, r1
    1472:	61 05       	cpc	r22, r1
    1474:	08 94       	sec
    1476:	08 95       	ret

00001478 <__fp_zero>:
    1478:	e8 94       	clt

0000147a <__fp_szero>:
    147a:	bb 27       	eor	r27, r27
    147c:	66 27       	eor	r22, r22
    147e:	77 27       	eor	r23, r23
    1480:	cb 01       	movw	r24, r22
    1482:	97 f9       	bld	r25, 7
    1484:	08 95       	ret

00001486 <__gesf2>:
    1486:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_cmp>
    148a:	08 f4       	brcc	.+2      	; 0x148e <__gesf2+0x8>
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	08 95       	ret

00001490 <__mulsf3>:
    1490:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__mulsf3x>
    1494:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_round>
    1498:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_pscA>
    149c:	38 f0       	brcs	.+14     	; 0x14ac <__mulsf3+0x1c>
    149e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_pscB>
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__mulsf3+0x1c>
    14a4:	95 23       	and	r25, r21
    14a6:	11 f0       	breq	.+4      	; 0x14ac <__mulsf3+0x1c>
    14a8:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>
    14ac:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>
    14b0:	11 24       	eor	r1, r1
    14b2:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__fp_szero>

000014b6 <__mulsf3x>:
    14b6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fp_split3>
    14ba:	70 f3       	brcs	.-36     	; 0x1498 <__mulsf3+0x8>

000014bc <__mulsf3_pse>:
    14bc:	95 9f       	mul	r25, r21
    14be:	c1 f3       	breq	.-16     	; 0x14b0 <__mulsf3+0x20>
    14c0:	95 0f       	add	r25, r21
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	55 1f       	adc	r21, r21
    14c6:	62 9f       	mul	r22, r18
    14c8:	f0 01       	movw	r30, r0
    14ca:	72 9f       	mul	r23, r18
    14cc:	bb 27       	eor	r27, r27
    14ce:	f0 0d       	add	r31, r0
    14d0:	b1 1d       	adc	r27, r1
    14d2:	63 9f       	mul	r22, r19
    14d4:	aa 27       	eor	r26, r26
    14d6:	f0 0d       	add	r31, r0
    14d8:	b1 1d       	adc	r27, r1
    14da:	aa 1f       	adc	r26, r26
    14dc:	64 9f       	mul	r22, r20
    14de:	66 27       	eor	r22, r22
    14e0:	b0 0d       	add	r27, r0
    14e2:	a1 1d       	adc	r26, r1
    14e4:	66 1f       	adc	r22, r22
    14e6:	82 9f       	mul	r24, r18
    14e8:	22 27       	eor	r18, r18
    14ea:	b0 0d       	add	r27, r0
    14ec:	a1 1d       	adc	r26, r1
    14ee:	62 1f       	adc	r22, r18
    14f0:	73 9f       	mul	r23, r19
    14f2:	b0 0d       	add	r27, r0
    14f4:	a1 1d       	adc	r26, r1
    14f6:	62 1f       	adc	r22, r18
    14f8:	83 9f       	mul	r24, r19
    14fa:	a0 0d       	add	r26, r0
    14fc:	61 1d       	adc	r22, r1
    14fe:	22 1f       	adc	r18, r18
    1500:	74 9f       	mul	r23, r20
    1502:	33 27       	eor	r19, r19
    1504:	a0 0d       	add	r26, r0
    1506:	61 1d       	adc	r22, r1
    1508:	23 1f       	adc	r18, r19
    150a:	84 9f       	mul	r24, r20
    150c:	60 0d       	add	r22, r0
    150e:	21 1d       	adc	r18, r1
    1510:	82 2f       	mov	r24, r18
    1512:	76 2f       	mov	r23, r22
    1514:	6a 2f       	mov	r22, r26
    1516:	11 24       	eor	r1, r1
    1518:	9f 57       	subi	r25, 0x7F	; 127
    151a:	50 40       	sbci	r21, 0x00	; 0
    151c:	9a f0       	brmi	.+38     	; 0x1544 <__mulsf3_pse+0x88>
    151e:	f1 f0       	breq	.+60     	; 0x155c <__mulsf3_pse+0xa0>
    1520:	88 23       	and	r24, r24
    1522:	4a f0       	brmi	.+18     	; 0x1536 <__mulsf3_pse+0x7a>
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	bb 1f       	adc	r27, r27
    152a:	66 1f       	adc	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	88 1f       	adc	r24, r24
    1530:	91 50       	subi	r25, 0x01	; 1
    1532:	50 40       	sbci	r21, 0x00	; 0
    1534:	a9 f7       	brne	.-22     	; 0x1520 <__mulsf3_pse+0x64>
    1536:	9e 3f       	cpi	r25, 0xFE	; 254
    1538:	51 05       	cpc	r21, r1
    153a:	80 f0       	brcs	.+32     	; 0x155c <__mulsf3_pse+0xa0>
    153c:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>
    1540:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__fp_szero>
    1544:	5f 3f       	cpi	r21, 0xFF	; 255
    1546:	e4 f3       	brlt	.-8      	; 0x1540 <__mulsf3_pse+0x84>
    1548:	98 3e       	cpi	r25, 0xE8	; 232
    154a:	d4 f3       	brlt	.-12     	; 0x1540 <__mulsf3_pse+0x84>
    154c:	86 95       	lsr	r24
    154e:	77 95       	ror	r23
    1550:	67 95       	ror	r22
    1552:	b7 95       	ror	r27
    1554:	f7 95       	ror	r31
    1556:	e7 95       	ror	r30
    1558:	9f 5f       	subi	r25, 0xFF	; 255
    155a:	c1 f7       	brne	.-16     	; 0x154c <__mulsf3_pse+0x90>
    155c:	fe 2b       	or	r31, r30
    155e:	88 0f       	add	r24, r24
    1560:	91 1d       	adc	r25, r1
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	97 f9       	bld	r25, 7
    1568:	08 95       	ret

0000156a <pow>:
    156a:	fa 01       	movw	r30, r20
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	30 96       	adiw	r30, 0x00	; 0
    1572:	21 05       	cpc	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	a1 f1       	breq	.+104    	; 0x15e0 <pow+0x76>
    1578:	61 15       	cp	r22, r1
    157a:	71 05       	cpc	r23, r1
    157c:	61 f4       	brne	.+24     	; 0x1596 <pow+0x2c>
    157e:	80 38       	cpi	r24, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	9b 07       	cpc	r25, r27
    1584:	49 f1       	breq	.+82     	; 0x15d8 <pow+0x6e>
    1586:	68 94       	set
    1588:	90 38       	cpi	r25, 0x80	; 128
    158a:	81 05       	cpc	r24, r1
    158c:	61 f0       	breq	.+24     	; 0x15a6 <pow+0x3c>
    158e:	80 38       	cpi	r24, 0x80	; 128
    1590:	bf ef       	ldi	r27, 0xFF	; 255
    1592:	9b 07       	cpc	r25, r27
    1594:	41 f0       	breq	.+16     	; 0x15a6 <pow+0x3c>
    1596:	99 23       	and	r25, r25
    1598:	4a f5       	brpl	.+82     	; 0x15ec <pow+0x82>
    159a:	ff 3f       	cpi	r31, 0xFF	; 255
    159c:	e1 05       	cpc	r30, r1
    159e:	31 05       	cpc	r19, r1
    15a0:	21 05       	cpc	r18, r1
    15a2:	19 f1       	breq	.+70     	; 0x15ea <pow+0x80>
    15a4:	e8 94       	clt
    15a6:	08 94       	sec
    15a8:	e7 95       	ror	r30
    15aa:	d9 01       	movw	r26, r18
    15ac:	aa 23       	and	r26, r26
    15ae:	29 f4       	brne	.+10     	; 0x15ba <pow+0x50>
    15b0:	ab 2f       	mov	r26, r27
    15b2:	be 2f       	mov	r27, r30
    15b4:	f8 5f       	subi	r31, 0xF8	; 248
    15b6:	d0 f3       	brcs	.-12     	; 0x15ac <pow+0x42>
    15b8:	10 c0       	rjmp	.+32     	; 0x15da <pow+0x70>
    15ba:	ff 5f       	subi	r31, 0xFF	; 255
    15bc:	70 f4       	brcc	.+28     	; 0x15da <pow+0x70>
    15be:	a6 95       	lsr	r26
    15c0:	e0 f7       	brcc	.-8      	; 0x15ba <pow+0x50>
    15c2:	f7 39       	cpi	r31, 0x97	; 151
    15c4:	50 f0       	brcs	.+20     	; 0x15da <pow+0x70>
    15c6:	19 f0       	breq	.+6      	; 0x15ce <pow+0x64>
    15c8:	ff 3a       	cpi	r31, 0xAF	; 175
    15ca:	38 f4       	brcc	.+14     	; 0x15da <pow+0x70>
    15cc:	9f 77       	andi	r25, 0x7F	; 127
    15ce:	9f 93       	push	r25
    15d0:	0d d0       	rcall	.+26     	; 0x15ec <pow+0x82>
    15d2:	0f 90       	pop	r0
    15d4:	07 fc       	sbrc	r0, 7
    15d6:	90 58       	subi	r25, 0x80	; 128
    15d8:	08 95       	ret
    15da:	46 f0       	brts	.+16     	; 0x15ec <pow+0x82>
    15dc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 e8       	ldi	r24, 0x80	; 128
    15e6:	9f e3       	ldi	r25, 0x3F	; 63
    15e8:	08 95       	ret
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	9f 77       	andi	r25, 0x7F	; 127
    15ee:	5f 93       	push	r21
    15f0:	4f 93       	push	r20
    15f2:	3f 93       	push	r19
    15f4:	2f 93       	push	r18
    15f6:	0e 94 2f 0c 	call	0x185e	; 0x185e <log>
    15fa:	2f 91       	pop	r18
    15fc:	3f 91       	pop	r19
    15fe:	4f 91       	pop	r20
    1600:	5f 91       	pop	r21
    1602:	0e 94 48 0a 	call	0x1490	; 0x1490 <__mulsf3>
    1606:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <exp>
    160a:	19 f4       	brne	.+6      	; 0x1612 <pow+0xa8>
    160c:	16 f4       	brtc	.+4      	; 0x1612 <pow+0xa8>
    160e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>
    1612:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_mpack>

00001616 <sqrt>:
    1616:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_splitA>
    161a:	b8 f3       	brcs	.-18     	; 0x160a <pow+0xa0>
    161c:	99 23       	and	r25, r25
    161e:	c9 f3       	breq	.-14     	; 0x1612 <pow+0xa8>
    1620:	b6 f3       	brts	.-20     	; 0x160e <pow+0xa4>
    1622:	9f 57       	subi	r25, 0x7F	; 127
    1624:	55 0b       	sbc	r21, r21
    1626:	87 ff       	sbrs	r24, 7
    1628:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fp_norm2>
    162c:	00 24       	eor	r0, r0
    162e:	a0 e6       	ldi	r26, 0x60	; 96
    1630:	40 ea       	ldi	r20, 0xA0	; 160
    1632:	90 01       	movw	r18, r0
    1634:	80 58       	subi	r24, 0x80	; 128
    1636:	56 95       	lsr	r21
    1638:	97 95       	ror	r25
    163a:	28 f4       	brcc	.+10     	; 0x1646 <sqrt+0x30>
    163c:	80 5c       	subi	r24, 0xC0	; 192
    163e:	66 0f       	add	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	20 f0       	brcs	.+8      	; 0x164e <sqrt+0x38>
    1646:	26 17       	cp	r18, r22
    1648:	37 07       	cpc	r19, r23
    164a:	48 07       	cpc	r20, r24
    164c:	30 f4       	brcc	.+12     	; 0x165a <sqrt+0x44>
    164e:	62 1b       	sub	r22, r18
    1650:	73 0b       	sbc	r23, r19
    1652:	84 0b       	sbc	r24, r20
    1654:	20 29       	or	r18, r0
    1656:	31 29       	or	r19, r1
    1658:	4a 2b       	or	r20, r26
    165a:	a6 95       	lsr	r26
    165c:	17 94       	ror	r1
    165e:	07 94       	ror	r0
    1660:	20 25       	eor	r18, r0
    1662:	31 25       	eor	r19, r1
    1664:	4a 27       	eor	r20, r26
    1666:	58 f7       	brcc	.-42     	; 0x163e <sqrt+0x28>
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	20 f0       	brcs	.+8      	; 0x1678 <sqrt+0x62>
    1670:	26 17       	cp	r18, r22
    1672:	37 07       	cpc	r19, r23
    1674:	48 07       	cpc	r20, r24
    1676:	30 f4       	brcc	.+12     	; 0x1684 <sqrt+0x6e>
    1678:	62 0b       	sbc	r22, r18
    167a:	73 0b       	sbc	r23, r19
    167c:	84 0b       	sbc	r24, r20
    167e:	20 0d       	add	r18, r0
    1680:	31 1d       	adc	r19, r1
    1682:	41 1d       	adc	r20, r1
    1684:	a0 95       	com	r26
    1686:	81 f7       	brne	.-32     	; 0x1668 <sqrt+0x52>
    1688:	b9 01       	movw	r22, r18
    168a:	84 2f       	mov	r24, r20
    168c:	91 58       	subi	r25, 0x81	; 129
    168e:	88 0f       	add	r24, r24
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	08 95       	ret
    1696:	29 f4       	brne	.+10     	; 0x16a2 <sqrt+0x8c>
    1698:	16 f0       	brts	.+4      	; 0x169e <sqrt+0x88>
    169a:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>
    169e:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__fp_zero>
    16a2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>

000016a6 <exp>:
    16a6:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_splitA>
    16aa:	a8 f3       	brcs	.-22     	; 0x1696 <sqrt+0x80>
    16ac:	96 38       	cpi	r25, 0x86	; 134
    16ae:	a0 f7       	brcc	.-24     	; 0x1698 <sqrt+0x82>
    16b0:	07 f8       	bld	r0, 7
    16b2:	0f 92       	push	r0
    16b4:	e8 94       	clt
    16b6:	2b e3       	ldi	r18, 0x3B	; 59
    16b8:	3a ea       	ldi	r19, 0xAA	; 170
    16ba:	48 eb       	ldi	r20, 0xB8	; 184
    16bc:	5f e7       	ldi	r21, 0x7F	; 127
    16be:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__mulsf3_pse>
    16c2:	0f 92       	push	r0
    16c4:	0f 92       	push	r0
    16c6:	0f 92       	push	r0
    16c8:	4d b7       	in	r20, 0x3d	; 61
    16ca:	5e b7       	in	r21, 0x3e	; 62
    16cc:	0f 92       	push	r0
    16ce:	0e 94 77 0c 	call	0x18ee	; 0x18ee <modf>
    16d2:	e8 e6       	ldi	r30, 0x68	; 104
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_powser>
    16da:	4f 91       	pop	r20
    16dc:	5f 91       	pop	r21
    16de:	ef 91       	pop	r30
    16e0:	ff 91       	pop	r31
    16e2:	e5 95       	asr	r30
    16e4:	ee 1f       	adc	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	49 f0       	breq	.+18     	; 0x16fc <exp+0x56>
    16ea:	fe 57       	subi	r31, 0x7E	; 126
    16ec:	e0 68       	ori	r30, 0x80	; 128
    16ee:	44 27       	eor	r20, r20
    16f0:	ee 0f       	add	r30, r30
    16f2:	44 1f       	adc	r20, r20
    16f4:	fa 95       	dec	r31
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <exp+0x4a>
    16f8:	41 95       	neg	r20
    16fa:	55 0b       	sbc	r21, r21
    16fc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <ldexp>
    1700:	0f 90       	pop	r0
    1702:	07 fe       	sbrs	r0, 7
    1704:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <inverse>
    1708:	08 95       	ret

0000170a <__fp_cmp>:
    170a:	99 0f       	add	r25, r25
    170c:	00 08       	sbc	r0, r0
    170e:	55 0f       	add	r21, r21
    1710:	aa 0b       	sbc	r26, r26
    1712:	e0 e8       	ldi	r30, 0x80	; 128
    1714:	fe ef       	ldi	r31, 0xFE	; 254
    1716:	16 16       	cp	r1, r22
    1718:	17 06       	cpc	r1, r23
    171a:	e8 07       	cpc	r30, r24
    171c:	f9 07       	cpc	r31, r25
    171e:	c0 f0       	brcs	.+48     	; 0x1750 <__fp_cmp+0x46>
    1720:	12 16       	cp	r1, r18
    1722:	13 06       	cpc	r1, r19
    1724:	e4 07       	cpc	r30, r20
    1726:	f5 07       	cpc	r31, r21
    1728:	98 f0       	brcs	.+38     	; 0x1750 <__fp_cmp+0x46>
    172a:	62 1b       	sub	r22, r18
    172c:	73 0b       	sbc	r23, r19
    172e:	84 0b       	sbc	r24, r20
    1730:	95 0b       	sbc	r25, r21
    1732:	39 f4       	brne	.+14     	; 0x1742 <__fp_cmp+0x38>
    1734:	0a 26       	eor	r0, r26
    1736:	61 f0       	breq	.+24     	; 0x1750 <__fp_cmp+0x46>
    1738:	23 2b       	or	r18, r19
    173a:	24 2b       	or	r18, r20
    173c:	25 2b       	or	r18, r21
    173e:	21 f4       	brne	.+8      	; 0x1748 <__fp_cmp+0x3e>
    1740:	08 95       	ret
    1742:	0a 26       	eor	r0, r26
    1744:	09 f4       	brne	.+2      	; 0x1748 <__fp_cmp+0x3e>
    1746:	a1 40       	sbci	r26, 0x01	; 1
    1748:	a6 95       	lsr	r26
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	81 1d       	adc	r24, r1
    174e:	81 1d       	adc	r24, r1
    1750:	08 95       	ret

00001752 <__fp_mpack>:
    1752:	9f 3f       	cpi	r25, 0xFF	; 255
    1754:	31 f0       	breq	.+12     	; 0x1762 <__fp_mpack_finite+0xc>

00001756 <__fp_mpack_finite>:
    1756:	91 50       	subi	r25, 0x01	; 1
    1758:	20 f4       	brcc	.+8      	; 0x1762 <__fp_mpack_finite+0xc>
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	b7 95       	ror	r27
    1762:	88 0f       	add	r24, r24
    1764:	91 1d       	adc	r25, r1
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	97 f9       	bld	r25, 7
    176c:	08 95       	ret

0000176e <__fp_norm2>:
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	d2 f7       	brpl	.-12     	; 0x176e <__fp_norm2>
    177a:	08 95       	ret

0000177c <__fp_powser>:
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	1f 93       	push	r17
    1782:	0f 93       	push	r16
    1784:	ff 92       	push	r15
    1786:	ef 92       	push	r14
    1788:	df 92       	push	r13
    178a:	7b 01       	movw	r14, r22
    178c:	8c 01       	movw	r16, r24
    178e:	68 94       	set
    1790:	06 c0       	rjmp	.+12     	; 0x179e <__fp_powser+0x22>
    1792:	da 2e       	mov	r13, r26
    1794:	ef 01       	movw	r28, r30
    1796:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__mulsf3x>
    179a:	fe 01       	movw	r30, r28
    179c:	e8 94       	clt
    179e:	a5 91       	lpm	r26, Z+
    17a0:	25 91       	lpm	r18, Z+
    17a2:	35 91       	lpm	r19, Z+
    17a4:	45 91       	lpm	r20, Z+
    17a6:	55 91       	lpm	r21, Z+
    17a8:	a6 f3       	brts	.-24     	; 0x1792 <__fp_powser+0x16>
    17aa:	ef 01       	movw	r28, r30
    17ac:	0e 94 b8 08 	call	0x1170	; 0x1170 <__addsf3x>
    17b0:	fe 01       	movw	r30, r28
    17b2:	97 01       	movw	r18, r14
    17b4:	a8 01       	movw	r20, r16
    17b6:	da 94       	dec	r13
    17b8:	69 f7       	brne	.-38     	; 0x1794 <__fp_powser+0x18>
    17ba:	df 90       	pop	r13
    17bc:	ef 90       	pop	r14
    17be:	ff 90       	pop	r15
    17c0:	0f 91       	pop	r16
    17c2:	1f 91       	pop	r17
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <inverse>:
    17ca:	9b 01       	movw	r18, r22
    17cc:	ac 01       	movw	r20, r24
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	80 e8       	ldi	r24, 0x80	; 128
    17d4:	9f e3       	ldi	r25, 0x3F	; 63
    17d6:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__divsf3>
    17da:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>
    17de:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_mpack>

000017e2 <ldexp>:
    17e2:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_splitA>
    17e6:	d8 f3       	brcs	.-10     	; 0x17de <inverse+0x14>
    17e8:	99 23       	and	r25, r25
    17ea:	c9 f3       	breq	.-14     	; 0x17de <inverse+0x14>
    17ec:	94 0f       	add	r25, r20
    17ee:	51 1d       	adc	r21, r1
    17f0:	a3 f3       	brvs	.-24     	; 0x17da <inverse+0x10>
    17f2:	91 50       	subi	r25, 0x01	; 1
    17f4:	50 40       	sbci	r21, 0x00	; 0
    17f6:	94 f0       	brlt	.+36     	; 0x181c <ldexp+0x3a>
    17f8:	59 f0       	breq	.+22     	; 0x1810 <ldexp+0x2e>
    17fa:	88 23       	and	r24, r24
    17fc:	32 f0       	brmi	.+12     	; 0x180a <ldexp+0x28>
    17fe:	66 0f       	add	r22, r22
    1800:	77 1f       	adc	r23, r23
    1802:	88 1f       	adc	r24, r24
    1804:	91 50       	subi	r25, 0x01	; 1
    1806:	50 40       	sbci	r21, 0x00	; 0
    1808:	c1 f7       	brne	.-16     	; 0x17fa <ldexp+0x18>
    180a:	9e 3f       	cpi	r25, 0xFE	; 254
    180c:	51 05       	cpc	r21, r1
    180e:	2c f7       	brge	.-54     	; 0x17da <inverse+0x10>
    1810:	88 0f       	add	r24, r24
    1812:	91 1d       	adc	r25, r1
    1814:	96 95       	lsr	r25
    1816:	87 95       	ror	r24
    1818:	97 f9       	bld	r25, 7
    181a:	08 95       	ret
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	ac f0       	brlt	.+42     	; 0x184a <ldexp+0x68>
    1820:	98 3e       	cpi	r25, 0xE8	; 232
    1822:	9c f0       	brlt	.+38     	; 0x184a <ldexp+0x68>
    1824:	bb 27       	eor	r27, r27
    1826:	86 95       	lsr	r24
    1828:	77 95       	ror	r23
    182a:	67 95       	ror	r22
    182c:	b7 95       	ror	r27
    182e:	08 f4       	brcc	.+2      	; 0x1832 <ldexp+0x50>
    1830:	b1 60       	ori	r27, 0x01	; 1
    1832:	93 95       	inc	r25
    1834:	c1 f7       	brne	.-16     	; 0x1826 <ldexp+0x44>
    1836:	bb 0f       	add	r27, r27
    1838:	58 f7       	brcc	.-42     	; 0x1810 <ldexp+0x2e>
    183a:	11 f4       	brne	.+4      	; 0x1840 <ldexp+0x5e>
    183c:	60 ff       	sbrs	r22, 0
    183e:	e8 cf       	rjmp	.-48     	; 0x1810 <ldexp+0x2e>
    1840:	6f 5f       	subi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	e3 cf       	rjmp	.-58     	; 0x1810 <ldexp+0x2e>
    184a:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__fp_szero>
    184e:	16 f0       	brts	.+4      	; 0x1854 <ldexp+0x72>
    1850:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_mpack>
    1854:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_nan>
    1858:	68 94       	set
    185a:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__fp_inf>

0000185e <log>:
    185e:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_splitA>
    1862:	a8 f3       	brcs	.-22     	; 0x184e <ldexp+0x6c>
    1864:	99 23       	and	r25, r25
    1866:	c1 f3       	breq	.-16     	; 0x1858 <ldexp+0x76>
    1868:	ae f3       	brts	.-22     	; 0x1854 <ldexp+0x72>
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	1f 93       	push	r17
    1870:	0f 93       	push	r16
    1872:	ff 92       	push	r15
    1874:	c9 2f       	mov	r28, r25
    1876:	dd 27       	eor	r29, r29
    1878:	88 23       	and	r24, r24
    187a:	2a f0       	brmi	.+10     	; 0x1886 <log+0x28>
    187c:	21 97       	sbiw	r28, 0x01	; 1
    187e:	66 0f       	add	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	da f7       	brpl	.-10     	; 0x187c <log+0x1e>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	5f eb       	ldi	r21, 0xBF	; 191
    188e:	9f e3       	ldi	r25, 0x3F	; 63
    1890:	88 39       	cpi	r24, 0x98	; 152
    1892:	20 f0       	brcs	.+8      	; 0x189c <log+0x3e>
    1894:	80 3e       	cpi	r24, 0xE0	; 224
    1896:	38 f0       	brcs	.+14     	; 0x18a6 <log+0x48>
    1898:	21 96       	adiw	r28, 0x01	; 1
    189a:	8f 77       	andi	r24, 0x7F	; 127
    189c:	0e 94 a1 08 	call	0x1142	; 0x1142 <__addsf3>
    18a0:	e0 e9       	ldi	r30, 0x90	; 144
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <log+0x50>
    18a6:	0e 94 a1 08 	call	0x1142	; 0x1142 <__addsf3>
    18aa:	ed eb       	ldi	r30, 0xBD	; 189
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	0e 94 be 0b 	call	0x177c	; 0x177c <__fp_powser>
    18b2:	8b 01       	movw	r16, r22
    18b4:	be 01       	movw	r22, r28
    18b6:	ec 01       	movw	r28, r24
    18b8:	fb 2e       	mov	r15, r27
    18ba:	6f 57       	subi	r22, 0x7F	; 127
    18bc:	71 09       	sbc	r23, r1
    18be:	75 95       	asr	r23
    18c0:	77 1f       	adc	r23, r23
    18c2:	88 0b       	sbc	r24, r24
    18c4:	99 0b       	sbc	r25, r25
    18c6:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
    18ca:	28 e1       	ldi	r18, 0x18	; 24
    18cc:	32 e7       	ldi	r19, 0x72	; 114
    18ce:	41 e3       	ldi	r20, 0x31	; 49
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__mulsf3x>
    18d6:	af 2d       	mov	r26, r15
    18d8:	98 01       	movw	r18, r16
    18da:	ae 01       	movw	r20, r28
    18dc:	ff 90       	pop	r15
    18de:	0f 91       	pop	r16
    18e0:	1f 91       	pop	r17
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	0e 94 b8 08 	call	0x1170	; 0x1170 <__addsf3x>
    18ea:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_round>

000018ee <modf>:
    18ee:	fa 01       	movw	r30, r20
    18f0:	dc 01       	movw	r26, r24
    18f2:	aa 0f       	add	r26, r26
    18f4:	bb 1f       	adc	r27, r27
    18f6:	9b 01       	movw	r18, r22
    18f8:	ac 01       	movw	r20, r24
    18fa:	bf 57       	subi	r27, 0x7F	; 127
    18fc:	28 f4       	brcc	.+10     	; 0x1908 <modf+0x1a>
    18fe:	22 27       	eor	r18, r18
    1900:	33 27       	eor	r19, r19
    1902:	44 27       	eor	r20, r20
    1904:	50 78       	andi	r21, 0x80	; 128
    1906:	20 c0       	rjmp	.+64     	; 0x1948 <modf+0x5a>
    1908:	b7 51       	subi	r27, 0x17	; 23
    190a:	90 f4       	brcc	.+36     	; 0x1930 <modf+0x42>
    190c:	ab 2f       	mov	r26, r27
    190e:	00 24       	eor	r0, r0
    1910:	46 95       	lsr	r20
    1912:	37 95       	ror	r19
    1914:	27 95       	ror	r18
    1916:	01 1c       	adc	r0, r1
    1918:	a3 95       	inc	r26
    191a:	d2 f3       	brmi	.-12     	; 0x1910 <modf+0x22>
    191c:	00 20       	and	r0, r0
    191e:	71 f0       	breq	.+28     	; 0x193c <modf+0x4e>
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	44 1f       	adc	r20, r20
    1926:	b3 95       	inc	r27
    1928:	da f3       	brmi	.-10     	; 0x1920 <modf+0x32>
    192a:	0e d0       	rcall	.+28     	; 0x1948 <modf+0x5a>
    192c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__subsf3>
    1930:	61 30       	cpi	r22, 0x01	; 1
    1932:	71 05       	cpc	r23, r1
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	8a 07       	cpc	r24, r26
    1938:	b9 46       	sbci	r27, 0x69	; 105
    193a:	30 f4       	brcc	.+12     	; 0x1948 <modf+0x5a>
    193c:	9b 01       	movw	r18, r22
    193e:	ac 01       	movw	r20, r24
    1940:	66 27       	eor	r22, r22
    1942:	77 27       	eor	r23, r23
    1944:	88 27       	eor	r24, r24
    1946:	90 78       	andi	r25, 0x80	; 128
    1948:	30 96       	adiw	r30, 0x00	; 0
    194a:	21 f0       	breq	.+8      	; 0x1954 <modf+0x66>
    194c:	20 83       	st	Z, r18
    194e:	31 83       	std	Z+1, r19	; 0x01
    1950:	42 83       	std	Z+2, r20	; 0x02
    1952:	53 83       	std	Z+3, r21	; 0x03
    1954:	08 95       	ret

00001956 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1956:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1958:	91 8d       	ldd	r25, Z+25	; 0x19
    195a:	22 8d       	ldd	r18, Z+26	; 0x1a
    195c:	89 2f       	mov	r24, r25
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	80 5c       	subi	r24, 0xC0	; 192
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	82 1b       	sub	r24, r18
    1966:	91 09       	sbc	r25, r1
}
    1968:	8f 73       	andi	r24, 0x3F	; 63
    196a:	99 27       	eor	r25, r25
    196c:	08 95       	ret

0000196e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    196e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1970:	91 8d       	ldd	r25, Z+25	; 0x19
    1972:	82 8d       	ldd	r24, Z+26	; 0x1a
    1974:	98 17       	cp	r25, r24
    1976:	31 f0       	breq	.+12     	; 0x1984 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1978:	82 8d       	ldd	r24, Z+26	; 0x1a
    197a:	e8 0f       	add	r30, r24
    197c:	f1 1d       	adc	r31, r1
    197e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1988:	08 95       	ret

0000198a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    198a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    198c:	91 8d       	ldd	r25, Z+25	; 0x19
    198e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1990:	98 17       	cp	r25, r24
    1992:	61 f0       	breq	.+24     	; 0x19ac <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1994:	82 8d       	ldd	r24, Z+26	; 0x1a
    1996:	df 01       	movw	r26, r30
    1998:	a8 0f       	add	r26, r24
    199a:	b1 1d       	adc	r27, r1
    199c:	5d 96       	adiw	r26, 0x1d	; 29
    199e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    19a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19a2:	9f 5f       	subi	r25, 0xFF	; 255
    19a4:	9f 73       	andi	r25, 0x3F	; 63
    19a6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    19b0:	08 95       	ret

000019b2 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    19b2:	fc 01       	movw	r30, r24
    19b4:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    19b6:	44 8d       	ldd	r20, Z+28	; 0x1c
    19b8:	25 2f       	mov	r18, r21
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	84 2f       	mov	r24, r20
    19be:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    19c0:	82 1b       	sub	r24, r18
    19c2:	93 0b       	sbc	r25, r19
    19c4:	54 17       	cp	r21, r20
    19c6:	10 f0       	brcs	.+4      	; 0x19cc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    19c8:	cf 96       	adiw	r24, 0x3f	; 63
    19ca:	08 95       	ret
  return tail - head - 1;
    19cc:	01 97       	sbiw	r24, 0x01	; 1
}
    19ce:	08 95       	ret

000019d0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    19d0:	88 e4       	ldi	r24, 0x48	; 72
    19d2:	9e e0       	ldi	r25, 0x0E	; 14
    19d4:	89 2b       	or	r24, r25
    19d6:	49 f0       	breq	.+18     	; 0x19ea <_Z14serialEventRunv+0x1a>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	89 2b       	or	r24, r25
    19de:	29 f0       	breq	.+10     	; 0x19ea <_Z14serialEventRunv+0x1a>
    19e0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_Z17Serial0_availablev>
    19e4:	81 11       	cpse	r24, r1
    19e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    19ea:	08 95       	ret

000019ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    19ec:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    19ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    19f0:	df 01       	movw	r26, r30
    19f2:	a8 0f       	add	r26, r24
    19f4:	b1 1d       	adc	r27, r1
    19f6:	a3 5a       	subi	r26, 0xA3	; 163
    19f8:	bf 4f       	sbci	r27, 0xFF	; 255
    19fa:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    19fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	8f 73       	andi	r24, 0x3F	; 63
    1a04:	99 27       	eor	r25, r25
    1a06:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1a08:	a6 89       	ldd	r26, Z+22	; 0x16
    1a0a:	b7 89       	ldd	r27, Z+23	; 0x17
    1a0c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a0e:	a0 89       	ldd	r26, Z+16	; 0x10
    1a10:	b1 89       	ldd	r27, Z+17	; 0x11
    1a12:	8c 91       	ld	r24, X
    1a14:	83 70       	andi	r24, 0x03	; 3
    1a16:	80 64       	ori	r24, 0x40	; 64
    1a18:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a1a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a1c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a1e:	98 13       	cpse	r25, r24
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a22:	02 88       	ldd	r0, Z+18	; 0x12
    1a24:	f3 89       	ldd	r31, Z+19	; 0x13
    1a26:	e0 2d       	mov	r30, r0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 7d       	andi	r24, 0xDF	; 223
    1a2c:	80 83       	st	Z, r24
    1a2e:	08 95       	ret

00001a30 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	ec 01       	movw	r28, r24
  _written = true;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a42:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a46:	98 13       	cpse	r25, r24
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <_ZN14HardwareSerial5writeEh+0x24>
    1a4a:	e8 89       	ldd	r30, Y+16	; 0x10
    1a4c:	f9 89       	ldd	r31, Y+17	; 0x11
    1a4e:	80 81       	ld	r24, Z
    1a50:	85 fd       	sbrc	r24, 5
    1a52:	26 c0       	rjmp	.+76     	; 0x1aa0 <_ZN14HardwareSerial5writeEh+0x70>
    1a54:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a56:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	0f 5f       	subi	r16, 0xFF	; 255
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	0f 73       	andi	r16, 0x3F	; 63
    1a60:	11 27       	eor	r17, r17
    1a62:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1a64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a66:	e8 12       	cpse	r14, r24
    1a68:	0c c0       	rjmp	.+24     	; 0x1a82 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	07 fc       	sbrc	r0, 7
    1a6e:	fa cf       	rjmp	.-12     	; 0x1a64 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a70:	e8 89       	ldd	r30, Y+16	; 0x10
    1a72:	f9 89       	ldd	r31, Y+17	; 0x11
    1a74:	80 81       	ld	r24, Z
    1a76:	85 ff       	sbrs	r24, 5
    1a78:	f5 cf       	rjmp	.-22     	; 0x1a64 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a80:	f1 cf       	rjmp	.-30     	; 0x1a64 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a84:	fe 01       	movw	r30, r28
    1a86:	e8 0f       	add	r30, r24
    1a88:	f1 1d       	adc	r31, r1
    1a8a:	e3 5a       	subi	r30, 0xA3	; 163
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a90:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a92:	f8 94       	cli
    _tx_buffer_head = i;
    1a94:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1a96:	ea 89       	ldd	r30, Y+18	; 0x12
    1a98:	fb 89       	ldd	r31, Y+19	; 0x13
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 62       	ori	r24, 0x20	; 32
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1aa0:	9f b7       	in	r25, 0x3f	; 63
    1aa2:	f8 94       	cli
      *_udr = c;
    1aa4:	ee 89       	ldd	r30, Y+22	; 0x16
    1aa6:	ff 89       	ldd	r31, Y+23	; 0x17
    1aa8:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1aaa:	e8 89       	ldd	r30, Y+16	; 0x10
    1aac:	f9 89       	ldd	r31, Y+17	; 0x11
    1aae:	80 81       	ld	r24, Z
    1ab0:	83 70       	andi	r24, 0x03	; 3
    1ab2:	80 64       	ori	r24, 0x40	; 64
    1ab4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ab6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	08 95       	ret

00001aca <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1ad0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ad2:	88 23       	and	r24, r24
    1ad4:	c9 f0       	breq	.+50     	; 0x1b08 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ad6:	ea 89       	ldd	r30, Y+18	; 0x12
    1ad8:	fb 89       	ldd	r31, Y+19	; 0x13
    1ada:	80 81       	ld	r24, Z
    1adc:	85 fd       	sbrc	r24, 5
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <_ZN14HardwareSerial5flushEv+0x20>
    1ae0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ae2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ae4:	8c 91       	ld	r24, X
    1ae6:	86 fd       	sbrc	r24, 6
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	07 fc       	sbrc	r0, 7
    1aee:	f5 cf       	rjmp	.-22     	; 0x1ada <_ZN14HardwareSerial5flushEv+0x10>
    1af0:	80 81       	ld	r24, Z
    1af2:	85 ff       	sbrs	r24, 5
    1af4:	f2 cf       	rjmp	.-28     	; 0x1ada <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1af6:	a8 89       	ldd	r26, Y+16	; 0x10
    1af8:	b9 89       	ldd	r27, Y+17	; 0x11
    1afa:	8c 91       	ld	r24, X
    1afc:	85 ff       	sbrs	r24, 5
    1afe:	ed cf       	rjmp	.-38     	; 0x1ada <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b06:	e7 cf       	rjmp	.-50     	; 0x1ad6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	6a 01       	movw	r12, r20
    1b20:	7b 01       	movw	r14, r22
    1b22:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1b24:	e8 89       	ldd	r30, Y+16	; 0x10
    1b26:	f9 89       	ldd	r31, Y+17	; 0x11
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b2c:	41 15       	cp	r20, r1
    1b2e:	51 4e       	sbci	r21, 0xE1	; 225
    1b30:	61 05       	cpc	r22, r1
    1b32:	71 05       	cpc	r23, r1
    1b34:	b1 f0       	breq	.+44     	; 0x1b62 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	79 e0       	ldi	r23, 0x09	; 9
    1b3a:	8d e3       	ldi	r24, 0x3D	; 61
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a7 01       	movw	r20, r14
    1b40:	96 01       	movw	r18, r12
    1b42:	0e 94 1b 22 	call	0x4436	; 0x4436 <__udivmodsi4>
    1b46:	da 01       	movw	r26, r20
    1b48:	c9 01       	movw	r24, r18
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	a1 09       	sbc	r26, r1
    1b4e:	b1 09       	sbc	r27, r1
    1b50:	b6 95       	lsr	r27
    1b52:	a7 95       	ror	r26
    1b54:	97 95       	ror	r25
    1b56:	87 95       	ror	r24
    1b58:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b5a:	21 15       	cp	r18, r1
    1b5c:	80 e1       	ldi	r24, 0x10	; 16
    1b5e:	38 07       	cpc	r19, r24
    1b60:	a8 f0       	brcs	.+42     	; 0x1b8c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1b62:	e8 89       	ldd	r30, Y+16	; 0x10
    1b64:	f9 89       	ldd	r31, Y+17	; 0x11
    1b66:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b68:	60 e8       	ldi	r22, 0x80	; 128
    1b6a:	74 e8       	ldi	r23, 0x84	; 132
    1b6c:	8e e1       	ldi	r24, 0x1E	; 30
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a7 01       	movw	r20, r14
    1b72:	96 01       	movw	r18, r12
    1b74:	0e 94 1b 22 	call	0x4436	; 0x4436 <__udivmodsi4>
    1b78:	da 01       	movw	r26, r20
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	a1 09       	sbc	r26, r1
    1b80:	b1 09       	sbc	r27, r1
    1b82:	b6 95       	lsr	r27
    1b84:	a7 95       	ror	r26
    1b86:	97 95       	ror	r25
    1b88:	87 95       	ror	r24
    1b8a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1b8c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b8e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b90:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b92:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b94:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b96:	20 83       	st	Z, r18

  _written = false;
    1b98:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1b9a:	ec 89       	ldd	r30, Y+20	; 0x14
    1b9c:	fd 89       	ldd	r31, Y+21	; 0x15
    1b9e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1ba0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ba2:	fb 89       	ldd	r31, Y+19	; 0x13
    1ba4:	80 81       	ld	r24, Z
    1ba6:	80 61       	ori	r24, 0x10	; 16
    1ba8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1baa:	ea 89       	ldd	r30, Y+18	; 0x12
    1bac:	fb 89       	ldd	r31, Y+19	; 0x13
    1bae:	80 81       	ld	r24, Z
    1bb0:	88 60       	ori	r24, 0x08	; 8
    1bb2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1bb4:	ea 89       	ldd	r30, Y+18	; 0x12
    1bb6:	fb 89       	ldd	r31, Y+19	; 0x13
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1bbe:	ea 89       	ldd	r30, Y+18	; 0x12
    1bc0:	fb 89       	ldd	r31, Y+19	; 0x13
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 7d       	andi	r24, 0xDF	; 223
    1bc6:	80 83       	st	Z, r24
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	08 95       	ret

00001bd8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	08 95       	ret

00001bde <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1bde:	08 95       	ret

00001be0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1be0:	1f 92       	push	r1
    1be2:	0f 92       	push	r0
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	0f 92       	push	r0
    1be8:	11 24       	eor	r1, r1
    1bea:	2f 93       	push	r18
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1bf4:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <Serial+0x10>
    1bf8:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <Serial+0x11>
    1bfc:	80 81       	ld	r24, Z
    1bfe:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <Serial+0x16>
    1c02:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <Serial+0x17>
    1c06:	82 fd       	sbrc	r24, 2
    1c08:	12 c0       	rjmp	.+36     	; 0x1c2e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c0a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c0c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <Serial+0x19>
    1c10:	8f 5f       	subi	r24, 0xFF	; 255
    1c12:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c14:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <Serial+0x1a>
    1c18:	82 17       	cp	r24, r18
    1c1a:	51 f0       	breq	.+20     	; 0x1c30 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1c1c:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <Serial+0x19>
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	eb 57       	subi	r30, 0x7B	; 123
    1c24:	fd 4f       	sbci	r31, 0xFD	; 253
    1c26:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c28:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <Serial+0x19>
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c2e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	9f 91       	pop	r25
    1c36:	8f 91       	pop	r24
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti

00001c44 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1c44:	1f 92       	push	r1
    1c46:	0f 92       	push	r0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	2f 93       	push	r18
    1c50:	3f 93       	push	r19
    1c52:	4f 93       	push	r20
    1c54:	5f 93       	push	r21
    1c56:	6f 93       	push	r22
    1c58:	7f 93       	push	r23
    1c5a:	8f 93       	push	r24
    1c5c:	9f 93       	push	r25
    1c5e:	af 93       	push	r26
    1c60:	bf 93       	push	r27
    1c62:	ef 93       	push	r30
    1c64:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1c66:	85 e8       	ldi	r24, 0x85	; 133
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	0f 90       	pop	r0
    1c8c:	1f 90       	pop	r1
    1c8e:	18 95       	reti

00001c90 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1c90:	85 e8       	ldi	r24, 0x85	; 133
    1c92:	92 e0       	ldi	r25, 0x02	; 2
    1c94:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN14HardwareSerial9availableEv>
    1c98:	21 e0       	ldi	r18, 0x01	; 1
    1c9a:	89 2b       	or	r24, r25
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <_Z17Serial0_availablev+0x10>
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
}
    1ca0:	82 2f       	mov	r24, r18
    1ca2:	08 95       	ret

00001ca4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ca4:	e5 e8       	ldi	r30, 0x85	; 133
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	13 82       	std	Z+3, r1	; 0x03
    1caa:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1cac:	88 ee       	ldi	r24, 0xE8	; 232
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	a0 e0       	ldi	r26, 0x00	; 0
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	84 83       	std	Z+4, r24	; 0x04
    1cb6:	95 83       	std	Z+5, r25	; 0x05
    1cb8:	a6 83       	std	Z+6, r26	; 0x06
    1cba:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1cbc:	84 e1       	ldi	r24, 0x14	; 20
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	85 ec       	ldi	r24, 0xC5	; 197
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	95 87       	std	Z+13, r25	; 0x0d
    1cca:	84 87       	std	Z+12, r24	; 0x0c
    1ccc:	84 ec       	ldi	r24, 0xC4	; 196
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	97 87       	std	Z+15, r25	; 0x0f
    1cd2:	86 87       	std	Z+14, r24	; 0x0e
    1cd4:	80 ec       	ldi	r24, 0xC0	; 192
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	91 8b       	std	Z+17, r25	; 0x11
    1cda:	80 8b       	std	Z+16, r24	; 0x10
    1cdc:	81 ec       	ldi	r24, 0xC1	; 193
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	93 8b       	std	Z+19, r25	; 0x13
    1ce2:	82 8b       	std	Z+18, r24	; 0x12
    1ce4:	82 ec       	ldi	r24, 0xC2	; 194
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	95 8b       	std	Z+21, r25	; 0x15
    1cea:	84 8b       	std	Z+20, r24	; 0x14
    1cec:	86 ec       	ldi	r24, 0xC6	; 198
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	97 8b       	std	Z+23, r25	; 0x17
    1cf2:	86 8b       	std	Z+22, r24	; 0x16
    1cf4:	11 8e       	std	Z+25, r1	; 0x19
    1cf6:	12 8e       	std	Z+26, r1	; 0x1a
    1cf8:	13 8e       	std	Z+27, r1	; 0x1b
    1cfa:	14 8e       	std	Z+28, r1	; 0x1c
    1cfc:	08 95       	ret

00001cfe <initVariant>:
    1cfe:	08 95       	ret

00001d00 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1d00:	0e 94 4d 10 	call	0x209a	; 0x209a <init>

	initVariant();
    1d04:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1d08:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1d0c:	c8 ee       	ldi	r28, 0xE8	; 232
    1d0e:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1d10:	0e 94 7e 08 	call	0x10fc	; 0x10fc <loop>
		if (serialEventRun) serialEventRun();
    1d14:	20 97       	sbiw	r28, 0x00	; 0
    1d16:	e1 f3       	breq	.-8      	; 0x1d10 <main+0x10>
    1d18:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_Z14serialEventRunv>
    1d1c:	f9 cf       	rjmp	.-14     	; 0x1d10 <main+0x10>

00001d1e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1d1e:	cf 92       	push	r12
    1d20:	df 92       	push	r13
    1d22:	ef 92       	push	r14
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	6c 01       	movw	r12, r24
    1d30:	7a 01       	movw	r14, r20
    1d32:	8b 01       	movw	r16, r22
    1d34:	c0 e0       	ldi	r28, 0x00	; 0
    1d36:	d0 e0       	ldi	r29, 0x00	; 0
    1d38:	ce 15       	cp	r28, r14
    1d3a:	df 05       	cpc	r29, r15
    1d3c:	81 f0       	breq	.+32     	; 0x1d5e <_ZN5Print5writeEPKhj+0x40>
    1d3e:	d8 01       	movw	r26, r16
    1d40:	6d 91       	ld	r22, X+
    1d42:	8d 01       	movw	r16, r26
    1d44:	d6 01       	movw	r26, r12
    1d46:	ed 91       	ld	r30, X+
    1d48:	fc 91       	ld	r31, X
    1d4a:	01 90       	ld	r0, Z+
    1d4c:	f0 81       	ld	r31, Z
    1d4e:	e0 2d       	mov	r30, r0
    1d50:	c6 01       	movw	r24, r12
    1d52:	09 95       	icall
    1d54:	89 2b       	or	r24, r25
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <_ZN5Print5writeEPKhj+0x3e>
    1d58:	21 96       	adiw	r28, 0x01	; 1
    1d5a:	ee cf       	rjmp	.-36     	; 0x1d38 <_ZN5Print5writeEPKhj+0x1a>
    1d5c:	7e 01       	movw	r14, r28
    1d5e:	c7 01       	movw	r24, r14
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	08 95       	ret

00001d72 <_ZN5Print5writeEPKc>:
    1d72:	61 15       	cp	r22, r1
    1d74:	71 05       	cpc	r23, r1
    1d76:	79 f0       	breq	.+30     	; 0x1d96 <_ZN5Print5writeEPKc+0x24>
    1d78:	fb 01       	movw	r30, r22
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	00 20       	and	r0, r0
    1d7e:	e9 f7       	brne	.-6      	; 0x1d7a <_ZN5Print5writeEPKc+0x8>
    1d80:	31 97       	sbiw	r30, 0x01	; 1
    1d82:	af 01       	movw	r20, r30
    1d84:	46 1b       	sub	r20, r22
    1d86:	57 0b       	sbc	r21, r23
    1d88:	dc 01       	movw	r26, r24
    1d8a:	ed 91       	ld	r30, X+
    1d8c:	fc 91       	ld	r31, X
    1d8e:	02 80       	ldd	r0, Z+2	; 0x02
    1d90:	f3 81       	ldd	r31, Z+3	; 0x03
    1d92:	e0 2d       	mov	r30, r0
    1d94:	09 94       	ijmp
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 95       	ret

00001d9c <_ZN5Print5printEc>:
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	01 90       	ld	r0, Z+
    1da4:	f0 81       	ld	r31, Z
    1da6:	e0 2d       	mov	r30, r0
    1da8:	09 94       	ijmp

00001daa <_ZN5Print7printlnEv>:
    1daa:	62 e2       	ldi	r22, 0x22	; 34
    1dac:	71 e0       	ldi	r23, 0x01	; 1
    1dae:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <_ZN5Print5writeEPKc>

00001db2 <_ZN5Print11printNumberEmh>:
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	a1 97       	sbiw	r28, 0x21	; 33
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	7c 01       	movw	r14, r24
    1dd8:	fa 01       	movw	r30, r20
    1dda:	cb 01       	movw	r24, r22
    1ddc:	19 a2       	std	Y+33, r1	; 0x21
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <_ZN5Print11printNumberEmh+0x32>
    1de2:	2a e0       	ldi	r18, 0x0A	; 10
    1de4:	8e 01       	movw	r16, r28
    1de6:	0f 5d       	subi	r16, 0xDF	; 223
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	82 2e       	mov	r8, r18
    1dec:	91 2c       	mov	r9, r1
    1dee:	a1 2c       	mov	r10, r1
    1df0:	b1 2c       	mov	r11, r1
    1df2:	bf 01       	movw	r22, r30
    1df4:	a5 01       	movw	r20, r10
    1df6:	94 01       	movw	r18, r8
    1df8:	0e 94 1b 22 	call	0x4436	; 0x4436 <__udivmodsi4>
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	ca 01       	movw	r24, r20
    1e00:	01 50       	subi	r16, 0x01	; 1
    1e02:	11 09       	sbc	r17, r1
    1e04:	6a 30       	cpi	r22, 0x0A	; 10
    1e06:	10 f4       	brcc	.+4      	; 0x1e0c <_ZN5Print11printNumberEmh+0x5a>
    1e08:	60 5d       	subi	r22, 0xD0	; 208
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <_ZN5Print11printNumberEmh+0x5c>
    1e0c:	69 5c       	subi	r22, 0xC9	; 201
    1e0e:	d8 01       	movw	r26, r16
    1e10:	6c 93       	st	X, r22
    1e12:	23 2b       	or	r18, r19
    1e14:	24 2b       	or	r18, r20
    1e16:	25 2b       	or	r18, r21
    1e18:	61 f7       	brne	.-40     	; 0x1df2 <_ZN5Print11printNumberEmh+0x40>
    1e1a:	b8 01       	movw	r22, r16
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <_ZN5Print5writeEPKc>
    1e22:	a1 96       	adiw	r28, 0x21	; 33
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	ff 90       	pop	r15
    1e38:	ef 90       	pop	r14
    1e3a:	bf 90       	pop	r11
    1e3c:	af 90       	pop	r10
    1e3e:	9f 90       	pop	r9
    1e40:	8f 90       	pop	r8
    1e42:	08 95       	ret

00001e44 <_ZN5Print5printEmi>:
    1e44:	21 15       	cp	r18, r1
    1e46:	31 05       	cpc	r19, r1
    1e48:	41 f4       	brne	.+16     	; 0x1e5a <_ZN5Print5printEmi+0x16>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	ed 91       	ld	r30, X+
    1e4e:	fc 91       	ld	r31, X
    1e50:	01 90       	ld	r0, Z+
    1e52:	f0 81       	ld	r31, Z
    1e54:	e0 2d       	mov	r30, r0
    1e56:	64 2f       	mov	r22, r20
    1e58:	09 94       	ijmp
    1e5a:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_ZN5Print11printNumberEmh>

00001e5e <_ZN5Print5printEhi>:
    1e5e:	9a 01       	movw	r18, r20
    1e60:	46 2f       	mov	r20, r22
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <_ZN5Print5printEmi>

00001e6c <_ZN5Print7printlnEhi>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	ec 01       	movw	r28, r24
    1e76:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN5Print5printEhi>
    1e7a:	8c 01       	movw	r16, r24
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN5Print7printlnEv>
    1e82:	80 0f       	add	r24, r16
    1e84:	91 1f       	adc	r25, r17
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	08 95       	ret

00001e90 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1e90:	cf 92       	push	r12
    1e92:	df 92       	push	r13
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
  if (base == 0) {
    1ea0:	21 15       	cp	r18, r1
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	81 f4       	brne	.+32     	; 0x1ec6 <_ZN5Print5printEli+0x36>
    return write(n);
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	ed 91       	ld	r30, X+
    1eaa:	fc 91       	ld	r31, X
    1eac:	01 90       	ld	r0, Z+
    1eae:	f0 81       	ld	r31, Z
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1ec4:	09 94       	ijmp
  } else if (base == 10) {
    1ec6:	2a 30       	cpi	r18, 0x0A	; 10
    1ec8:	31 05       	cpc	r19, r1
    1eca:	01 f5       	brne	.+64     	; 0x1f0c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1ecc:	77 ff       	sbrs	r23, 7
    1ece:	1d c0       	rjmp	.+58     	; 0x1f0a <_ZN5Print5printEli+0x7a>
    1ed0:	6a 01       	movw	r12, r20
    1ed2:	7b 01       	movw	r14, r22
    1ed4:	ec 01       	movw	r28, r24
      int t = print('-');
    1ed6:	6d e2       	ldi	r22, 0x2D	; 45
    1ed8:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN5Print5printEc>
    1edc:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1ede:	44 27       	eor	r20, r20
    1ee0:	55 27       	eor	r21, r21
    1ee2:	ba 01       	movw	r22, r20
    1ee4:	4c 19       	sub	r20, r12
    1ee6:	5d 09       	sbc	r21, r13
    1ee8:	6e 09       	sbc	r22, r14
    1eea:	7f 09       	sbc	r23, r15
    1eec:	2a e0       	ldi	r18, 0x0A	; 10
    1eee:	ce 01       	movw	r24, r28
    1ef0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN5Print11printNumberEmh>
    1ef4:	80 0f       	add	r24, r16
    1ef6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1f1c:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_ZN5Print11printNumberEmh>

00001f20 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1f20:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1f22:	ab 01       	movw	r20, r22
    1f24:	77 0f       	add	r23, r23
    1f26:	66 0b       	sbc	r22, r22
    1f28:	77 0b       	sbc	r23, r23
    1f2a:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <_ZN5Print5printEli>

00001f2e <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    1f2e:	1f 92       	push	r1
    1f30:	0f 92       	push	r0
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	0f 92       	push	r0
    1f36:	11 24       	eor	r1, r1
    1f38:	2f 93       	push	r18
    1f3a:	3f 93       	push	r19
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <timer0_millis>
    1f48:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <timer0_millis+0x1>
    1f4c:	a0 91 25 03 	lds	r26, 0x0325	; 0x800325 <timer0_millis+0x2>
    1f50:	b0 91 26 03 	lds	r27, 0x0326	; 0x800326 <timer0_millis+0x3>
    1f54:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <timer0_fract>
    1f58:	23 e0       	ldi	r18, 0x03	; 3
    1f5a:	23 0f       	add	r18, r19
    1f5c:	2d 37       	cpi	r18, 0x7D	; 125
    1f5e:	20 f4       	brcc	.+8      	; 0x1f68 <__vector_16+0x3a>
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	a1 1d       	adc	r26, r1
    1f64:	b1 1d       	adc	r27, r1
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <__vector_16+0x44>
    1f68:	26 e8       	ldi	r18, 0x86	; 134
    1f6a:	23 0f       	add	r18, r19
    1f6c:	02 96       	adiw	r24, 0x02	; 2
    1f6e:	a1 1d       	adc	r26, r1
    1f70:	b1 1d       	adc	r27, r1
    1f72:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <timer0_fract>
    1f76:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <timer0_millis>
    1f7a:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <timer0_millis+0x1>
    1f7e:	a0 93 25 03 	sts	0x0325, r26	; 0x800325 <timer0_millis+0x2>
    1f82:	b0 93 26 03 	sts	0x0326, r27	; 0x800326 <timer0_millis+0x3>
    1f86:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <timer0_overflow_count>
    1f8a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <timer0_overflow_count+0x1>
    1f8e:	a0 91 29 03 	lds	r26, 0x0329	; 0x800329 <timer0_overflow_count+0x2>
    1f92:	b0 91 2a 03 	lds	r27, 0x032A	; 0x80032a <timer0_overflow_count+0x3>
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	a1 1d       	adc	r26, r1
    1f9a:	b1 1d       	adc	r27, r1
    1f9c:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <timer0_overflow_count>
    1fa0:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <timer0_overflow_count+0x1>
    1fa4:	a0 93 29 03 	sts	0x0329, r26	; 0x800329 <timer0_overflow_count+0x2>
    1fa8:	b0 93 2a 03 	sts	0x032A, r27	; 0x80032a <timer0_overflow_count+0x3>
    1fac:	bf 91       	pop	r27
    1fae:	af 91       	pop	r26
    1fb0:	9f 91       	pop	r25
    1fb2:	8f 91       	pop	r24
    1fb4:	3f 91       	pop	r19
    1fb6:	2f 91       	pop	r18
    1fb8:	0f 90       	pop	r0
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	0f 90       	pop	r0
    1fbe:	1f 90       	pop	r1
    1fc0:	18 95       	reti

00001fc2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1fc2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1fc4:	f8 94       	cli
	m = timer0_overflow_count;
    1fc6:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <timer0_overflow_count>
    1fca:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <timer0_overflow_count+0x1>
    1fce:	a0 91 29 03 	lds	r26, 0x0329	; 0x800329 <timer0_overflow_count+0x2>
    1fd2:	b0 91 2a 03 	lds	r27, 0x032A	; 0x80032a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1fd6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1fd8:	a8 9b       	sbis	0x15, 0	; 21
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <micros+0x24>
    1fdc:	2f 3f       	cpi	r18, 0xFF	; 255
    1fde:	19 f0       	breq	.+6      	; 0x1fe6 <micros+0x24>
		m++;
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1fe6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1fe8:	ba 2f       	mov	r27, r26
    1fea:	a9 2f       	mov	r26, r25
    1fec:	98 2f       	mov	r25, r24
    1fee:	88 27       	eor	r24, r24
    1ff0:	82 0f       	add	r24, r18
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	b1 1d       	adc	r27, r1
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	42 e0       	ldi	r20, 0x02	; 2
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	4a 95       	dec	r20
    2008:	d1 f7       	brne	.-12     	; 0x1ffe <micros+0x3c>
}
    200a:	08 95       	ret

0000200c <delay>:

void delay(unsigned long ms)
{
    200c:	8f 92       	push	r8
    200e:	9f 92       	push	r9
    2010:	af 92       	push	r10
    2012:	bf 92       	push	r11
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	6b 01       	movw	r12, r22
    201e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2020:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <micros>
    2024:	4b 01       	movw	r8, r22
    2026:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2028:	c1 14       	cp	r12, r1
    202a:	d1 04       	cpc	r13, r1
    202c:	e1 04       	cpc	r14, r1
    202e:	f1 04       	cpc	r15, r1
    2030:	01 f1       	breq	.+64     	; 0x2072 <delay+0x66>
		yield();
    2032:	0e 94 03 20 	call	0x4006	; 0x4006 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2036:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <micros>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	88 19       	sub	r24, r8
    2040:	99 09       	sbc	r25, r9
    2042:	aa 09       	sbc	r26, r10
    2044:	bb 09       	sbc	r27, r11
    2046:	88 3e       	cpi	r24, 0xE8	; 232
    2048:	93 40       	sbci	r25, 0x03	; 3
    204a:	a1 05       	cpc	r26, r1
    204c:	b1 05       	cpc	r27, r1
    204e:	60 f3       	brcs	.-40     	; 0x2028 <delay+0x1c>
			ms--;
    2050:	21 e0       	ldi	r18, 0x01	; 1
    2052:	c2 1a       	sub	r12, r18
    2054:	d1 08       	sbc	r13, r1
    2056:	e1 08       	sbc	r14, r1
    2058:	f1 08       	sbc	r15, r1
			start += 1000;
    205a:	88 ee       	ldi	r24, 0xE8	; 232
    205c:	88 0e       	add	r8, r24
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	98 1e       	adc	r9, r24
    2062:	a1 1c       	adc	r10, r1
    2064:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2066:	c1 14       	cp	r12, r1
    2068:	d1 04       	cpc	r13, r1
    206a:	e1 04       	cpc	r14, r1
    206c:	f1 04       	cpc	r15, r1
    206e:	19 f7       	brne	.-58     	; 0x2036 <delay+0x2a>
    2070:	db cf       	rjmp	.-74     	; 0x2028 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	8f 90       	pop	r8
    2082:	08 95       	ret

00002084 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	91 05       	cpc	r25, r1
    2088:	38 f0       	brcs	.+14     	; 0x2098 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2092:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <delayMicroseconds+0x10>
    2098:	08 95       	ret

0000209a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    209a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    209c:	84 b5       	in	r24, 0x24	; 36
    209e:	82 60       	ori	r24, 0x02	; 2
    20a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20a2:	84 b5       	in	r24, 0x24	; 36
    20a4:	81 60       	ori	r24, 0x01	; 1
    20a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    20a8:	85 b5       	in	r24, 0x25	; 37
    20aa:	82 60       	ori	r24, 0x02	; 2
    20ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20ae:	85 b5       	in	r24, 0x25	; 37
    20b0:	81 60       	ori	r24, 0x01	; 1
    20b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    20b4:	ee e6       	ldi	r30, 0x6E	; 110
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20be:	e1 e8       	ldi	r30, 0x81	; 129
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20c4:	80 81       	ld	r24, Z
    20c6:	82 60       	ori	r24, 0x02	; 2
    20c8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20ca:	80 81       	ld	r24, Z
    20cc:	81 60       	ori	r24, 0x01	; 1
    20ce:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    20d0:	e0 e8       	ldi	r30, 0x80	; 128
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	81 60       	ori	r24, 0x01	; 1
    20d8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    20da:	e1 eb       	ldi	r30, 0xB1	; 177
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	84 60       	ori	r24, 0x04	; 4
    20e2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    20e4:	e0 eb       	ldi	r30, 0xB0	; 176
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	81 60       	ori	r24, 0x01	; 1
    20ec:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    20ee:	ea e7       	ldi	r30, 0x7A	; 122
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	84 60       	ori	r24, 0x04	; 4
    20f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    20f8:	80 81       	ld	r24, Z
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    20fe:	80 81       	ld	r24, Z
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2104:	80 81       	ld	r24, Z
    2106:	80 68       	ori	r24, 0x80	; 128
    2108:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    210a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    210e:	08 95       	ret

00002110 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2110:	8e 30       	cpi	r24, 0x0E	; 14
    2112:	08 f0       	brcs	.+2      	; 0x2116 <analogRead+0x6>
    2114:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2116:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <analog_reference>
    211a:	90 e4       	ldi	r25, 0x40	; 64
    211c:	29 9f       	mul	r18, r25
    211e:	90 01       	movw	r18, r0
    2120:	11 24       	eor	r1, r1
    2122:	87 70       	andi	r24, 0x07	; 7
    2124:	82 2b       	or	r24, r18
    2126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    212a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    212e:	80 64       	ori	r24, 0x40	; 64
    2130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2134:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2138:	86 fd       	sbrc	r24, 6
    213a:	fc cf       	rjmp	.-8      	; 0x2134 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    213c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    2140:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2144:	90 e0       	ldi	r25, 0x00	; 0
}
    2146:	92 2b       	or	r25, r18
    2148:	08 95       	ret

0000214a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	81 f0       	breq	.+32     	; 0x216e <turnOffPWM+0x24>
    214e:	28 f4       	brcc	.+10     	; 0x215a <turnOffPWM+0x10>
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	99 f0       	breq	.+38     	; 0x217a <turnOffPWM+0x30>
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	a1 f0       	breq	.+40     	; 0x2180 <turnOffPWM+0x36>
    2158:	08 95       	ret
    215a:	87 30       	cpi	r24, 0x07	; 7
    215c:	a9 f0       	breq	.+42     	; 0x2188 <turnOffPWM+0x3e>
    215e:	88 30       	cpi	r24, 0x08	; 8
    2160:	b9 f0       	breq	.+46     	; 0x2190 <turnOffPWM+0x46>
    2162:	84 30       	cpi	r24, 0x04	; 4
    2164:	d1 f4       	brne	.+52     	; 0x219a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2166:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    216a:	8f 7d       	andi	r24, 0xDF	; 223
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    216e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2172:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2174:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2178:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    217a:	84 b5       	in	r24, 0x24	; 36
    217c:	8f 77       	andi	r24, 0x7F	; 127
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2180:	84 b5       	in	r24, 0x24	; 36
    2182:	8f 7d       	andi	r24, 0xDF	; 223
    2184:	84 bd       	out	0x24, r24	; 36
    2186:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2188:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    218c:	8f 77       	andi	r24, 0x7F	; 127
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2190:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    219a:	08 95       	ret

0000219c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	fc 01       	movw	r30, r24
    21a4:	e2 50       	subi	r30, 0x02	; 2
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    21aa:	fc 01       	movw	r30, r24
    21ac:	ee 5e       	subi	r30, 0xEE	; 238
    21ae:	fe 4f       	sbci	r31, 0xFE	; 254
    21b0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    21b2:	88 23       	and	r24, r24
    21b4:	61 f1       	breq	.+88     	; 0x220e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	fc 01       	movw	r30, r24
    21be:	e6 5c       	subi	r30, 0xC6	; 198
    21c0:	fe 4f       	sbci	r31, 0xFE	; 254
    21c2:	c5 91       	lpm	r28, Z+
    21c4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    21c6:	fc 01       	movw	r30, r24
    21c8:	e0 5d       	subi	r30, 0xD0	; 208
    21ca:	fe 4f       	sbci	r31, 0xFE	; 254
    21cc:	a5 91       	lpm	r26, Z+
    21ce:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    21d0:	61 11       	cpse	r22, r1
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    21d4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    21d6:	f8 94       	cli
		*reg &= ~bit;
    21d8:	88 81       	ld	r24, Y
    21da:	20 95       	com	r18
    21dc:	82 23       	and	r24, r18
    21de:	88 83       	st	Y, r24
		*out &= ~bit;
    21e0:	ec 91       	ld	r30, X
    21e2:	2e 23       	and	r18, r30
    21e4:	0b c0       	rjmp	.+22     	; 0x21fc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    21e6:	62 30       	cpi	r22, 0x02	; 2
    21e8:	61 f4       	brne	.+24     	; 0x2202 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    21ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    21ec:	f8 94       	cli
		*reg &= ~bit;
    21ee:	88 81       	ld	r24, Y
    21f0:	32 2f       	mov	r19, r18
    21f2:	30 95       	com	r19
    21f4:	83 23       	and	r24, r19
    21f6:	88 83       	st	Y, r24
		*out |= bit;
    21f8:	ec 91       	ld	r30, X
    21fa:	2e 2b       	or	r18, r30
    21fc:	2c 93       	st	X, r18
		SREG = oldSREG;
    21fe:	9f bf       	out	0x3f, r25	; 63
    2200:	06 c0       	rjmp	.+12     	; 0x220e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2202:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2204:	f8 94       	cli
		*reg |= bit;
    2206:	e8 81       	ld	r30, Y
    2208:	2e 2b       	or	r18, r30
    220a:	28 83       	st	Y, r18
		SREG = oldSREG;
    220c:	8f bf       	out	0x3f, r24	; 63
	}
}
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	08 95       	ret

00002214 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2214:	1f 93       	push	r17
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	f9 01       	movw	r30, r18
    2220:	e6 51       	subi	r30, 0x16	; 22
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2226:	f9 01       	movw	r30, r18
    2228:	e2 50       	subi	r30, 0x02	; 2
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    222e:	f9 01       	movw	r30, r18
    2230:	ee 5e       	subi	r30, 0xEE	; 238
    2232:	fe 4f       	sbci	r31, 0xFE	; 254
    2234:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2236:	cc 23       	and	r28, r28
    2238:	c1 f0       	breq	.+48     	; 0x226a <digitalWrite+0x56>
    223a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    223c:	81 11       	cpse	r24, r1
    223e:	0e 94 a5 10 	call	0x214a	; 0x214a <turnOffPWM>

	out = portOutputRegister(port);
    2242:	ec 2f       	mov	r30, r28
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	e0 5d       	subi	r30, 0xD0	; 208
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	a5 91       	lpm	r26, Z+
    2250:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2252:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2254:	f8 94       	cli

	if (val == LOW) {
    2256:	11 11       	cpse	r17, r1
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <digitalWrite+0x4e>
		*out &= ~bit;
    225a:	8c 91       	ld	r24, X
    225c:	d0 95       	com	r29
    225e:	d8 23       	and	r29, r24
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2262:	ec 91       	ld	r30, X
    2264:	de 2b       	or	r29, r30
    2266:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2268:	9f bf       	out	0x3f, r25	; 63
}
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	08 95       	ret

00002272 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	f9 01       	movw	r30, r18
    227c:	e6 51       	subi	r30, 0x16	; 22
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2282:	f9 01       	movw	r30, r18
    2284:	e2 50       	subi	r30, 0x02	; 2
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    228a:	f9 01       	movw	r30, r18
    228c:	ee 5e       	subi	r30, 0xEE	; 238
    228e:	fe 4f       	sbci	r31, 0xFE	; 254
    2290:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2292:	cc 23       	and	r28, r28
    2294:	91 f0       	breq	.+36     	; 0x22ba <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2296:	81 11       	cpse	r24, r1
    2298:	0e 94 a5 10 	call	0x214a	; 0x214a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    229c:	ec 2f       	mov	r30, r28
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	ea 5d       	subi	r30, 0xDA	; 218
    22a6:	fe 4f       	sbci	r31, 0xFE	; 254
    22a8:	a5 91       	lpm	r26, Z+
    22aa:	b4 91       	lpm	r27, Z
    22ac:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    22ae:	ed 23       	and	r30, r29
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	21 f4       	brne	.+8      	; 0x22be <digitalRead+0x4c>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <digitalRead+0x4c>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    22c4:	2f 92       	push	r2
    22c6:	3f 92       	push	r3
    22c8:	4f 92       	push	r4
    22ca:	5f 92       	push	r5
    22cc:	6f 92       	push	r6
    22ce:	7f 92       	push	r7
    22d0:	8f 92       	push	r8
    22d2:	9f 92       	push	r9
    22d4:	af 92       	push	r10
    22d6:	bf 92       	push	r11
    22d8:	cf 92       	push	r12
    22da:	df 92       	push	r13
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	2c 01       	movw	r4, r24
    22f4:	7e 83       	std	Y+6, r23	; 0x06
    22f6:	6d 83       	std	Y+5, r22	; 0x05
    22f8:	6a 01       	movw	r12, r20
    22fa:	59 01       	movw	r10, r18
    22fc:	c8 01       	movw	r24, r16
    22fe:	fc 82       	std	Y+4, r15	; 0x04
    2300:	eb 82       	std	Y+3, r14	; 0x03
    2302:	48 01       	movw	r8, r16
    2304:	84 1a       	sub	r8, r20
    2306:	95 0a       	sbc	r9, r21
    2308:	97 fe       	sbrs	r9, 7
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    230c:	91 94       	neg	r9
    230e:	81 94       	neg	r8
    2310:	91 08       	sbc	r9, r1
    2312:	35 01       	movw	r6, r10
    2314:	2d 81       	ldd	r18, Y+5	; 0x05
    2316:	3e 81       	ldd	r19, Y+6	; 0x06
    2318:	62 1a       	sub	r6, r18
    231a:	73 0a       	sbc	r7, r19
    231c:	77 fe       	sbrs	r7, 7
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    2320:	71 94       	neg	r7
    2322:	61 94       	neg	r6
    2324:	71 08       	sbc	r7, r1
    2326:	68 14       	cp	r6, r8
    2328:	79 04       	cpc	r7, r9
    232a:	5c f4       	brge	.+22     	; 0x2342 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    232c:	3a 2d       	mov	r19, r10
    232e:	2b 2d       	mov	r18, r11
    2330:	5c 01       	movw	r10, r24
    2332:	83 2f       	mov	r24, r19
    2334:	92 2f       	mov	r25, r18
    2336:	3d 81       	ldd	r19, Y+5	; 0x05
    2338:	2e 81       	ldd	r18, Y+6	; 0x06
    233a:	de 82       	std	Y+6, r13	; 0x06
    233c:	cd 82       	std	Y+5, r12	; 0x05
    233e:	c3 2e       	mov	r12, r19
    2340:	d2 2e       	mov	r13, r18
    2342:	ad 81       	ldd	r26, Y+5	; 0x05
    2344:	be 81       	ldd	r27, Y+6	; 0x06
    2346:	aa 16       	cp	r10, r26
    2348:	bb 06       	cpc	r11, r27
    234a:	5c f4       	brge	.+22     	; 0x2362 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    234c:	3c 2d       	mov	r19, r12
    234e:	2d 2d       	mov	r18, r13
    2350:	6c 01       	movw	r12, r24
    2352:	83 2f       	mov	r24, r19
    2354:	92 2f       	mov	r25, r18
    2356:	3d 81       	ldd	r19, Y+5	; 0x05
    2358:	2e 81       	ldd	r18, Y+6	; 0x06
    235a:	be 82       	std	Y+6, r11	; 0x06
    235c:	ad 82       	std	Y+5, r10	; 0x05
    235e:	a3 2e       	mov	r10, r19
    2360:	b2 2e       	mov	r11, r18
    2362:	85 01       	movw	r16, r10
    2364:	2d 81       	ldd	r18, Y+5	; 0x05
    2366:	3e 81       	ldd	r19, Y+6	; 0x06
    2368:	02 1b       	sub	r16, r18
    236a:	13 0b       	sbc	r17, r19
    236c:	1c 01       	movw	r2, r24
    236e:	2c 18       	sub	r2, r12
    2370:	3d 08       	sbc	r3, r13
    2372:	37 fe       	sbrs	r3, 7
    2374:	03 c0       	rjmp	.+6      	; 0x237c <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    2376:	31 94       	neg	r3
    2378:	21 94       	neg	r2
    237a:	31 08       	sbc	r3, r1
    237c:	78 01       	movw	r14, r16
    237e:	17 ff       	sbrs	r17, 7
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    2382:	3f ef       	ldi	r19, 0xFF	; 255
    2384:	e3 1a       	sub	r14, r19
    2386:	f3 0a       	sbc	r15, r19
    2388:	f5 94       	asr	r15
    238a:	e7 94       	ror	r14
    238c:	c8 16       	cp	r12, r24
    238e:	d9 06       	cpc	r13, r25
    2390:	2c f0       	brlt	.+10     	; 0x239c <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    2392:	8f ef       	ldi	r24, 0xFF	; 255
    2394:	9f ef       	ldi	r25, 0xFF	; 255
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    239c:	a1 e0       	ldi	r26, 0x01	; 1
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ba 83       	std	Y+2, r27	; 0x02
    23a2:	a9 83       	std	Y+1, r26	; 0x01
    23a4:	2d 81       	ldd	r18, Y+5	; 0x05
    23a6:	3e 81       	ldd	r19, Y+6	; 0x06
    23a8:	a2 16       	cp	r10, r18
    23aa:	b3 06       	cpc	r11, r19
    23ac:	24 f1       	brlt	.+72     	; 0x23f6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    23ae:	d2 01       	movw	r26, r4
    23b0:	ed 91       	ld	r30, X+
    23b2:	fc 91       	ld	r31, X
    23b4:	04 84       	ldd	r0, Z+12	; 0x0c
    23b6:	f5 85       	ldd	r31, Z+13	; 0x0d
    23b8:	e0 2d       	mov	r30, r0
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	68 14       	cp	r6, r8
    23c0:	79 04       	cpc	r7, r9
    23c2:	24 f4       	brge	.+8      	; 0x23cc <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    23c4:	4d 81       	ldd	r20, Y+5	; 0x05
    23c6:	5e 81       	ldd	r21, Y+6	; 0x06
    23c8:	b6 01       	movw	r22, r12
    23ca:	03 c0       	rjmp	.+6      	; 0x23d2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    23cc:	a6 01       	movw	r20, r12
    23ce:	6d 81       	ldd	r22, Y+5	; 0x05
    23d0:	7e 81       	ldd	r23, Y+6	; 0x06
    23d2:	c2 01       	movw	r24, r4
    23d4:	09 95       	icall
    23d6:	e2 18       	sub	r14, r2
    23d8:	f3 08       	sbc	r15, r3
    23da:	f7 fe       	sbrs	r15, 7
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    23de:	29 81       	ldd	r18, Y+1	; 0x01
    23e0:	3a 81       	ldd	r19, Y+2	; 0x02
    23e2:	c2 0e       	add	r12, r18
    23e4:	d3 1e       	adc	r13, r19
    23e6:	e0 0e       	add	r14, r16
    23e8:	f1 1e       	adc	r15, r17
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	d7 cf       	rjmp	.-82     	; 0x23a4 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    23f6:	26 96       	adiw	r28, 0x06	; 6
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ff 90       	pop	r15
    240c:	ef 90       	pop	r14
    240e:	df 90       	pop	r13
    2410:	cf 90       	pop	r12
    2412:	bf 90       	pop	r11
    2414:	af 90       	pop	r10
    2416:	9f 90       	pop	r9
    2418:	8f 90       	pop	r8
    241a:	7f 90       	pop	r7
    241c:	6f 90       	pop	r6
    241e:	5f 90       	pop	r5
    2420:	4f 90       	pop	r4
    2422:	3f 90       	pop	r3
    2424:	2f 90       	pop	r2
    2426:	08 95       	ret

00002428 <_ZN12Adafruit_GFX10writePixelEiij>:
    2428:	dc 01       	movw	r26, r24
    242a:	ed 91       	ld	r30, X+
    242c:	fc 91       	ld	r31, X
    242e:	00 84       	ldd	r0, Z+8	; 0x08
    2430:	f1 85       	ldd	r31, Z+9	; 0x09
    2432:	e0 2d       	mov	r30, r0
    2434:	09 94       	ijmp

00002436 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	dc 01       	movw	r26, r24
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	04 8c       	ldd	r0, Z+28	; 0x1c
    2442:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2444:	e0 2d       	mov	r30, r0
    2446:	09 95       	icall
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	08 95       	ret

0000244e <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	dc 01       	movw	r26, r24
    2454:	ed 91       	ld	r30, X+
    2456:	fc 91       	ld	r31, X
    2458:	06 8c       	ldd	r0, Z+30	; 0x1e
    245a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    245c:	e0 2d       	mov	r30, r0
    245e:	09 95       	icall
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    2466:	ef 92       	push	r14
    2468:	ff 92       	push	r15
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	dc 01       	movw	r26, r24
    2470:	ed 91       	ld	r30, X+
    2472:	fc 91       	ld	r31, X
    2474:	00 a0       	ldd	r0, Z+32	; 0x20
    2476:	f1 a1       	ldd	r31, Z+33	; 0x21
    2478:	e0 2d       	mov	r30, r0
    247a:	09 95       	icall
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	08 95       	ret

00002486 <_ZN12Adafruit_GFX10startWriteEv>:
    2486:	08 95       	ret

00002488 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    2488:	8f 92       	push	r8
    248a:	9f 92       	push	r9
    248c:	af 92       	push	r10
    248e:	bf 92       	push	r11
    2490:	cf 92       	push	r12
    2492:	df 92       	push	r13
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	ec 01       	movw	r28, r24
    24a2:	5b 01       	movw	r10, r22
    24a4:	4a 01       	movw	r8, r20
    24a6:	69 01       	movw	r12, r18
    24a8:	78 01       	movw	r14, r16
    24aa:	e8 81       	ld	r30, Y
    24ac:	f9 81       	ldd	r31, Y+1	; 0x01
    24ae:	02 84       	ldd	r0, Z+10	; 0x0a
    24b0:	f3 85       	ldd	r31, Z+11	; 0x0b
    24b2:	e0 2d       	mov	r30, r0
    24b4:	09 95       	icall
    24b6:	c8 0c       	add	r12, r8
    24b8:	d9 1c       	adc	r13, r9
    24ba:	86 01       	movw	r16, r12
    24bc:	01 50       	subi	r16, 0x01	; 1
    24be:	11 09       	sbc	r17, r1
    24c0:	e8 81       	ld	r30, Y
    24c2:	f9 81       	ldd	r31, Y+1	; 0x01
    24c4:	04 88       	ldd	r0, Z+20	; 0x14
    24c6:	f5 89       	ldd	r31, Z+21	; 0x15
    24c8:	e0 2d       	mov	r30, r0
    24ca:	95 01       	movw	r18, r10
    24cc:	a4 01       	movw	r20, r8
    24ce:	b5 01       	movw	r22, r10
    24d0:	ce 01       	movw	r24, r28
    24d2:	09 95       	icall
    24d4:	e8 81       	ld	r30, Y
    24d6:	f9 81       	ldd	r31, Y+1	; 0x01
    24d8:	06 88       	ldd	r0, Z+22	; 0x16
    24da:	f7 89       	ldd	r31, Z+23	; 0x17
    24dc:	e0 2d       	mov	r30, r0
    24de:	ce 01       	movw	r24, r28
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	9f 90       	pop	r9
    24f6:	8f 90       	pop	r8
    24f8:	09 94       	ijmp

000024fa <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    24fa:	8f 92       	push	r8
    24fc:	9f 92       	push	r9
    24fe:	af 92       	push	r10
    2500:	bf 92       	push	r11
    2502:	cf 92       	push	r12
    2504:	df 92       	push	r13
    2506:	ef 92       	push	r14
    2508:	ff 92       	push	r15
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	ec 01       	movw	r28, r24
    2514:	5b 01       	movw	r10, r22
    2516:	4a 01       	movw	r8, r20
    2518:	69 01       	movw	r12, r18
    251a:	e8 81       	ld	r30, Y
    251c:	f9 81       	ldd	r31, Y+1	; 0x01
    251e:	02 84       	ldd	r0, Z+10	; 0x0a
    2520:	f3 85       	ldd	r31, Z+11	; 0x0b
    2522:	e0 2d       	mov	r30, r0
    2524:	09 95       	icall
    2526:	95 01       	movw	r18, r10
    2528:	2c 0d       	add	r18, r12
    252a:	3d 1d       	adc	r19, r13
    252c:	21 50       	subi	r18, 0x01	; 1
    252e:	31 09       	sbc	r19, r1
    2530:	e8 81       	ld	r30, Y
    2532:	f9 81       	ldd	r31, Y+1	; 0x01
    2534:	04 88       	ldd	r0, Z+20	; 0x14
    2536:	f5 89       	ldd	r31, Z+21	; 0x15
    2538:	e0 2d       	mov	r30, r0
    253a:	78 01       	movw	r14, r16
    253c:	84 01       	movw	r16, r8
    253e:	a4 01       	movw	r20, r8
    2540:	b5 01       	movw	r22, r10
    2542:	ce 01       	movw	r24, r28
    2544:	09 95       	icall
    2546:	e8 81       	ld	r30, Y
    2548:	f9 81       	ldd	r31, Y+1	; 0x01
    254a:	06 88       	ldd	r0, Z+22	; 0x16
    254c:	f7 89       	ldd	r31, Z+23	; 0x17
    254e:	e0 2d       	mov	r30, r0
    2550:	ce 01       	movw	r24, r28
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	bf 90       	pop	r11
    2564:	af 90       	pop	r10
    2566:	9f 90       	pop	r9
    2568:	8f 90       	pop	r8
    256a:	09 94       	ijmp

0000256c <_ZN12Adafruit_GFX8fillRectEiiiij>:
    256c:	4f 92       	push	r4
    256e:	5f 92       	push	r5
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	6c 01       	movw	r12, r24
    258e:	2b 01       	movw	r4, r22
    2590:	5a 01       	movw	r10, r20
    2592:	39 01       	movw	r6, r18
    2594:	48 01       	movw	r8, r16
    2596:	dc 01       	movw	r26, r24
    2598:	ed 91       	ld	r30, X+
    259a:	fc 91       	ld	r31, X
    259c:	02 84       	ldd	r0, Z+10	; 0x0a
    259e:	f3 85       	ldd	r31, Z+11	; 0x0b
    25a0:	e0 2d       	mov	r30, r0
    25a2:	09 95       	icall
    25a4:	e2 01       	movw	r28, r4
    25a6:	64 0c       	add	r6, r4
    25a8:	75 1c       	adc	r7, r5
    25aa:	d6 01       	movw	r26, r12
    25ac:	ed 91       	ld	r30, X+
    25ae:	fc 91       	ld	r31, X
    25b0:	c6 15       	cp	r28, r6
    25b2:	d7 05       	cpc	r29, r7
    25b4:	5c f4       	brge	.+22     	; 0x25cc <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    25b6:	00 88       	ldd	r0, Z+16	; 0x10
    25b8:	f1 89       	ldd	r31, Z+17	; 0x11
    25ba:	e0 2d       	mov	r30, r0
    25bc:	87 01       	movw	r16, r14
    25be:	94 01       	movw	r18, r8
    25c0:	a5 01       	movw	r20, r10
    25c2:	be 01       	movw	r22, r28
    25c4:	c6 01       	movw	r24, r12
    25c6:	09 95       	icall
    25c8:	21 96       	adiw	r28, 0x01	; 1
    25ca:	ef cf       	rjmp	.-34     	; 0x25aa <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    25cc:	06 88       	ldd	r0, Z+22	; 0x16
    25ce:	f7 89       	ldd	r31, Z+23	; 0x17
    25d0:	e0 2d       	mov	r30, r0
    25d2:	c6 01       	movw	r24, r12
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	bf 90       	pop	r11
    25e6:	af 90       	pop	r10
    25e8:	9f 90       	pop	r9
    25ea:	8f 90       	pop	r8
    25ec:	7f 90       	pop	r7
    25ee:	6f 90       	pop	r6
    25f0:	5f 90       	pop	r5
    25f2:	4f 90       	pop	r4
    25f4:	09 94       	ijmp

000025f6 <_ZN12Adafruit_GFX10fillScreenEj>:
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	dc 01       	movw	r26, r24
    2600:	1a 96       	adiw	r26, 0x0a	; 10
    2602:	0d 91       	ld	r16, X+
    2604:	1c 91       	ld	r17, X
    2606:	1b 97       	sbiw	r26, 0x0b	; 11
    2608:	18 96       	adiw	r26, 0x08	; 8
    260a:	2d 91       	ld	r18, X+
    260c:	3c 91       	ld	r19, X
    260e:	19 97       	sbiw	r26, 0x09	; 9
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	00 a0       	ldd	r0, Z+32	; 0x20
    2616:	f1 a1       	ldd	r31, Z+33	; 0x21
    2618:	e0 2d       	mov	r30, r0
    261a:	7b 01       	movw	r14, r22
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	09 95       	icall
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	ff 90       	pop	r15
    262c:	ef 90       	pop	r14
    262e:	08 95       	ret

00002630 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2630:	8f 92       	push	r8
    2632:	9f 92       	push	r9
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	4c 01       	movw	r8, r24
    264a:	6b 01       	movw	r12, r22
    264c:	5a 01       	movw	r10, r20
    264e:	e9 01       	movw	r28, r18
    2650:	dc 01       	movw	r26, r24
    2652:	ed 91       	ld	r30, X+
    2654:	fc 91       	ld	r31, X
    2656:	62 17       	cp	r22, r18
    2658:	73 07       	cpc	r23, r19
    265a:	81 f4       	brne	.+32     	; 0x267c <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    265c:	04 17       	cp	r16, r20
    265e:	15 07       	cpc	r17, r21
    2660:	24 f4       	brge	.+8      	; 0x266a <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    2662:	8b 2d       	mov	r24, r11
    2664:	58 01       	movw	r10, r16
    2666:	04 2f       	mov	r16, r20
    2668:	18 2f       	mov	r17, r24
    266a:	0a 19       	sub	r16, r10
    266c:	1b 09       	sbc	r17, r11
    266e:	98 01       	movw	r18, r16
    2670:	2f 5f       	subi	r18, 0xFF	; 255
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	04 8c       	ldd	r0, Z+28	; 0x1c
    2676:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2678:	e0 2d       	mov	r30, r0
    267a:	12 c0       	rjmp	.+36     	; 0x26a0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    267c:	40 17       	cp	r20, r16
    267e:	51 07       	cpc	r21, r17
    2680:	09 f5       	brne	.+66     	; 0x26c4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    2682:	26 17       	cp	r18, r22
    2684:	37 07       	cpc	r19, r23
    2686:	24 f4       	brge	.+8      	; 0x2690 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    2688:	8d 2d       	mov	r24, r13
    268a:	69 01       	movw	r12, r18
    268c:	c6 2f       	mov	r28, r22
    268e:	d8 2f       	mov	r29, r24
    2690:	9e 01       	movw	r18, r28
    2692:	2c 19       	sub	r18, r12
    2694:	3d 09       	sbc	r19, r13
    2696:	2f 5f       	subi	r18, 0xFF	; 255
    2698:	3f 4f       	sbci	r19, 0xFF	; 255
    269a:	06 8c       	ldd	r0, Z+30	; 0x1e
    269c:	f7 8d       	ldd	r31, Z+31	; 0x1f
    269e:	e0 2d       	mov	r30, r0
    26a0:	87 01       	movw	r16, r14
    26a2:	a5 01       	movw	r20, r10
    26a4:	b6 01       	movw	r22, r12
    26a6:	c4 01       	movw	r24, r8
    26a8:	09 95       	icall
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	bf 90       	pop	r11
    26bc:	af 90       	pop	r10
    26be:	9f 90       	pop	r9
    26c0:	8f 90       	pop	r8
    26c2:	08 95       	ret
    26c4:	02 84       	ldd	r0, Z+10	; 0x0a
    26c6:	f3 85       	ldd	r31, Z+11	; 0x0b
    26c8:	e0 2d       	mov	r30, r0
    26ca:	09 95       	icall
    26cc:	d4 01       	movw	r26, r8
    26ce:	ed 91       	ld	r30, X+
    26d0:	fc 91       	ld	r31, X
    26d2:	04 88       	ldd	r0, Z+20	; 0x14
    26d4:	f5 89       	ldd	r31, Z+21	; 0x15
    26d6:	e0 2d       	mov	r30, r0
    26d8:	9e 01       	movw	r18, r28
    26da:	a5 01       	movw	r20, r10
    26dc:	b6 01       	movw	r22, r12
    26de:	c4 01       	movw	r24, r8
    26e0:	09 95       	icall
    26e2:	d4 01       	movw	r26, r8
    26e4:	ed 91       	ld	r30, X+
    26e6:	fc 91       	ld	r31, X
    26e8:	06 88       	ldd	r0, Z+22	; 0x16
    26ea:	f7 89       	ldd	r31, Z+23	; 0x17
    26ec:	e0 2d       	mov	r30, r0
    26ee:	c4 01       	movw	r24, r8
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	df 90       	pop	r13
    26fe:	cf 90       	pop	r12
    2700:	bf 90       	pop	r11
    2702:	af 90       	pop	r10
    2704:	9f 90       	pop	r9
    2706:	8f 90       	pop	r8
    2708:	09 94       	ijmp

0000270a <_ZN12Adafruit_GFX8drawRectEiiiij>:
    270a:	6f 92       	push	r6
    270c:	7f 92       	push	r7
    270e:	8f 92       	push	r8
    2710:	9f 92       	push	r9
    2712:	af 92       	push	r10
    2714:	bf 92       	push	r11
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	ec 01       	movw	r28, r24
    2728:	4b 01       	movw	r8, r22
    272a:	5a 01       	movw	r10, r20
    272c:	69 01       	movw	r12, r18
    272e:	38 01       	movw	r6, r16
    2730:	e8 81       	ld	r30, Y
    2732:	f9 81       	ldd	r31, Y+1	; 0x01
    2734:	02 84       	ldd	r0, Z+10	; 0x0a
    2736:	f3 85       	ldd	r31, Z+11	; 0x0b
    2738:	e0 2d       	mov	r30, r0
    273a:	09 95       	icall
    273c:	e8 81       	ld	r30, Y
    273e:	f9 81       	ldd	r31, Y+1	; 0x01
    2740:	02 88       	ldd	r0, Z+18	; 0x12
    2742:	f3 89       	ldd	r31, Z+19	; 0x13
    2744:	e0 2d       	mov	r30, r0
    2746:	87 01       	movw	r16, r14
    2748:	96 01       	movw	r18, r12
    274a:	a5 01       	movw	r20, r10
    274c:	b4 01       	movw	r22, r8
    274e:	ce 01       	movw	r24, r28
    2750:	09 95       	icall
    2752:	a5 01       	movw	r20, r10
    2754:	46 0d       	add	r20, r6
    2756:	57 1d       	adc	r21, r7
    2758:	41 50       	subi	r20, 0x01	; 1
    275a:	51 09       	sbc	r21, r1
    275c:	e8 81       	ld	r30, Y
    275e:	f9 81       	ldd	r31, Y+1	; 0x01
    2760:	02 88       	ldd	r0, Z+18	; 0x12
    2762:	f3 89       	ldd	r31, Z+19	; 0x13
    2764:	e0 2d       	mov	r30, r0
    2766:	96 01       	movw	r18, r12
    2768:	b4 01       	movw	r22, r8
    276a:	ce 01       	movw	r24, r28
    276c:	09 95       	icall
    276e:	e8 81       	ld	r30, Y
    2770:	f9 81       	ldd	r31, Y+1	; 0x01
    2772:	00 88       	ldd	r0, Z+16	; 0x10
    2774:	f1 89       	ldd	r31, Z+17	; 0x11
    2776:	e0 2d       	mov	r30, r0
    2778:	93 01       	movw	r18, r6
    277a:	a5 01       	movw	r20, r10
    277c:	b4 01       	movw	r22, r8
    277e:	ce 01       	movw	r24, r28
    2780:	09 95       	icall
    2782:	c8 0c       	add	r12, r8
    2784:	d9 1c       	adc	r13, r9
    2786:	b6 01       	movw	r22, r12
    2788:	61 50       	subi	r22, 0x01	; 1
    278a:	71 09       	sbc	r23, r1
    278c:	e8 81       	ld	r30, Y
    278e:	f9 81       	ldd	r31, Y+1	; 0x01
    2790:	00 88       	ldd	r0, Z+16	; 0x10
    2792:	f1 89       	ldd	r31, Z+17	; 0x11
    2794:	e0 2d       	mov	r30, r0
    2796:	93 01       	movw	r18, r6
    2798:	a5 01       	movw	r20, r10
    279a:	ce 01       	movw	r24, r28
    279c:	09 95       	icall
    279e:	e8 81       	ld	r30, Y
    27a0:	f9 81       	ldd	r31, Y+1	; 0x01
    27a2:	06 88       	ldd	r0, Z+22	; 0x16
    27a4:	f7 89       	ldd	r31, Z+23	; 0x17
    27a6:	e0 2d       	mov	r30, r0
    27a8:	ce 01       	movw	r24, r28
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	1f 91       	pop	r17
    27b0:	0f 91       	pop	r16
    27b2:	ff 90       	pop	r15
    27b4:	ef 90       	pop	r14
    27b6:	df 90       	pop	r13
    27b8:	cf 90       	pop	r12
    27ba:	bf 90       	pop	r11
    27bc:	af 90       	pop	r10
    27be:	9f 90       	pop	r9
    27c0:	8f 90       	pop	r8
    27c2:	7f 90       	pop	r7
    27c4:	6f 90       	pop	r6
    27c6:	09 94       	ijmp

000027c8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    27c8:	08 95       	ret

000027ca <_ZN12Adafruit_GFX11setRotationEh>:
    27ca:	fc 01       	movw	r30, r24
    27cc:	63 70       	andi	r22, 0x03	; 3
    27ce:	66 8b       	std	Z+22, r22	; 0x16
    27d0:	84 81       	ldd	r24, Z+4	; 0x04
    27d2:	95 81       	ldd	r25, Z+5	; 0x05
    27d4:	26 81       	ldd	r18, Z+6	; 0x06
    27d6:	37 81       	ldd	r19, Z+7	; 0x07
    27d8:	61 30       	cpi	r22, 0x01	; 1
    27da:	39 f0       	breq	.+14     	; 0x27ea <_ZN12Adafruit_GFX11setRotationEh+0x20>
    27dc:	63 30       	cpi	r22, 0x03	; 3
    27de:	29 f0       	breq	.+10     	; 0x27ea <_ZN12Adafruit_GFX11setRotationEh+0x20>
    27e0:	91 87       	std	Z+9, r25	; 0x09
    27e2:	80 87       	std	Z+8, r24	; 0x08
    27e4:	33 87       	std	Z+11, r19	; 0x0b
    27e6:	22 87       	std	Z+10, r18	; 0x0a
    27e8:	08 95       	ret
    27ea:	31 87       	std	Z+9, r19	; 0x09
    27ec:	20 87       	std	Z+8, r18	; 0x08
    27ee:	93 87       	std	Z+11, r25	; 0x0b
    27f0:	82 87       	std	Z+10, r24	; 0x0a
    27f2:	08 95       	ret

000027f4 <_ZN12Adafruit_GFXC1Eii>:
    27f4:	fc 01       	movw	r30, r24
    27f6:	13 82       	std	Z+3, r1	; 0x03
    27f8:	12 82       	std	Z+2, r1	; 0x02
    27fa:	85 e3       	ldi	r24, 0x35	; 53
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
    2802:	75 83       	std	Z+5, r23	; 0x05
    2804:	64 83       	std	Z+4, r22	; 0x04
    2806:	57 83       	std	Z+7, r21	; 0x07
    2808:	46 83       	std	Z+6, r20	; 0x06
    280a:	71 87       	std	Z+9, r23	; 0x09
    280c:	60 87       	std	Z+8, r22	; 0x08
    280e:	53 87       	std	Z+11, r21	; 0x0b
    2810:	42 87       	std	Z+10, r20	; 0x0a
    2812:	16 8a       	std	Z+22, r1	; 0x16
    2814:	15 86       	std	Z+13, r1	; 0x0d
    2816:	14 86       	std	Z+12, r1	; 0x0c
    2818:	17 86       	std	Z+15, r1	; 0x0f
    281a:	16 86       	std	Z+14, r1	; 0x0e
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	85 8b       	std	Z+21, r24	; 0x15
    2820:	84 8b       	std	Z+20, r24	; 0x14
    2822:	2f ef       	ldi	r18, 0xFF	; 255
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	33 8b       	std	Z+19, r19	; 0x13
    2828:	22 8b       	std	Z+18, r18	; 0x12
    282a:	31 8b       	std	Z+17, r19	; 0x11
    282c:	20 8b       	std	Z+16, r18	; 0x10
    282e:	87 8b       	std	Z+23, r24	; 0x17
    2830:	10 8e       	std	Z+24, r1	; 0x18
    2832:	12 8e       	std	Z+26, r1	; 0x1a
    2834:	11 8e       	std	Z+25, r1	; 0x19
    2836:	08 95       	ret

00002838 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    2838:	3f 92       	push	r3
    283a:	4f 92       	push	r4
    283c:	5f 92       	push	r5
    283e:	6f 92       	push	r6
    2840:	7f 92       	push	r7
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	2a 97       	sbiw	r28, 0x0a	; 10
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	5c 01       	movw	r10, r24
    286c:	7e 83       	std	Y+6, r23	; 0x06
    286e:	6d 83       	std	Y+5, r22	; 0x05
    2870:	58 87       	std	Y+8, r21	; 0x08
    2872:	4f 83       	std	Y+7, r20	; 0x07
    2874:	29 01       	movw	r4, r18
    2876:	37 01       	movw	r6, r14
    2878:	dc 01       	movw	r26, r24
    287a:	ed 91       	ld	r30, X+
    287c:	fc 91       	ld	r31, X
    287e:	02 84       	ldd	r0, Z+10	; 0x0a
    2880:	f3 85       	ldd	r31, Z+11	; 0x0b
    2882:	e0 2d       	mov	r30, r0
    2884:	09 95       	icall
    2886:	c8 01       	movw	r24, r16
    2888:	07 96       	adiw	r24, 0x07	; 7
    288a:	97 fd       	sbrc	r25, 7
    288c:	07 96       	adiw	r24, 0x07	; 7
    288e:	9c 01       	movw	r18, r24
    2890:	93 e0       	ldi	r25, 0x03	; 3
    2892:	35 95       	asr	r19
    2894:	27 95       	ror	r18
    2896:	9a 95       	dec	r25
    2898:	e1 f7       	brne	.-8      	; 0x2892 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    289a:	3a 83       	std	Y+2, r19	; 0x02
    289c:	29 83       	std	Y+1, r18	; 0x01
    289e:	81 2c       	mov	r8, r1
    28a0:	91 2c       	mov	r9, r1
    28a2:	e1 2c       	mov	r14, r1
    28a4:	f1 2c       	mov	r15, r1
    28a6:	31 2c       	mov	r3, r1
    28a8:	8f 81       	ldd	r24, Y+7	; 0x07
    28aa:	98 85       	ldd	r25, Y+8	; 0x08
    28ac:	8e 0d       	add	r24, r14
    28ae:	9f 1d       	adc	r25, r15
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
    28b4:	e6 14       	cp	r14, r6
    28b6:	f7 04       	cpc	r15, r7
    28b8:	0c f0       	brlt	.+2      	; 0x28bc <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    28ba:	3d c0       	rjmp	.+122    	; 0x2936 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    28bc:	1a 86       	std	Y+10, r1	; 0x0a
    28be:	19 86       	std	Y+9, r1	; 0x09
    28c0:	a9 85       	ldd	r26, Y+9	; 0x09
    28c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    28c4:	a0 17       	cp	r26, r16
    28c6:	b1 07       	cpc	r27, r17
    28c8:	74 f5       	brge	.+92     	; 0x2926 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    28ca:	cd 01       	movw	r24, r26
    28cc:	87 70       	andi	r24, 0x07	; 7
    28ce:	99 27       	eor	r25, r25
    28d0:	89 2b       	or	r24, r25
    28d2:	11 f0       	breq	.+4      	; 0x28d8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    28d4:	33 0c       	add	r3, r3
    28d6:	0e c0       	rjmp	.+28     	; 0x28f4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    28d8:	e9 85       	ldd	r30, Y+9	; 0x09
    28da:	fa 85       	ldd	r31, Y+10	; 0x0a
    28dc:	f7 fd       	sbrc	r31, 7
    28de:	37 96       	adiw	r30, 0x07	; 7
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	f5 95       	asr	r31
    28e4:	e7 95       	ror	r30
    28e6:	8a 95       	dec	r24
    28e8:	e1 f7       	brne	.-8      	; 0x28e2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    28ea:	e8 0d       	add	r30, r8
    28ec:	f9 1d       	adc	r31, r9
    28ee:	e4 0d       	add	r30, r4
    28f0:	f5 1d       	adc	r31, r5
    28f2:	34 90       	lpm	r3, Z
    28f4:	37 fe       	sbrs	r3, 7
    28f6:	11 c0       	rjmp	.+34     	; 0x291a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    28f8:	d5 01       	movw	r26, r10
    28fa:	ed 91       	ld	r30, X+
    28fc:	fc 91       	ld	r31, X
    28fe:	04 84       	ldd	r0, Z+12	; 0x0c
    2900:	f5 85       	ldd	r31, Z+13	; 0x0d
    2902:	e0 2d       	mov	r30, r0
    2904:	96 01       	movw	r18, r12
    2906:	4b 81       	ldd	r20, Y+3	; 0x03
    2908:	5c 81       	ldd	r21, Y+4	; 0x04
    290a:	6d 81       	ldd	r22, Y+5	; 0x05
    290c:	7e 81       	ldd	r23, Y+6	; 0x06
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	68 0f       	add	r22, r24
    2914:	79 1f       	adc	r23, r25
    2916:	c5 01       	movw	r24, r10
    2918:	09 95       	icall
    291a:	a9 85       	ldd	r26, Y+9	; 0x09
    291c:	ba 85       	ldd	r27, Y+10	; 0x0a
    291e:	11 96       	adiw	r26, 0x01	; 1
    2920:	ba 87       	std	Y+10, r27	; 0x0a
    2922:	a9 87       	std	Y+9, r26	; 0x09
    2924:	cd cf       	rjmp	.-102    	; 0x28c0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    2926:	bf ef       	ldi	r27, 0xFF	; 255
    2928:	eb 1a       	sub	r14, r27
    292a:	fb 0a       	sbc	r15, r27
    292c:	29 81       	ldd	r18, Y+1	; 0x01
    292e:	3a 81       	ldd	r19, Y+2	; 0x02
    2930:	82 0e       	add	r8, r18
    2932:	93 1e       	adc	r9, r19
    2934:	b9 cf       	rjmp	.-142    	; 0x28a8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    2936:	d5 01       	movw	r26, r10
    2938:	ed 91       	ld	r30, X+
    293a:	fc 91       	ld	r31, X
    293c:	06 88       	ldd	r0, Z+22	; 0x16
    293e:	f7 89       	ldd	r31, Z+23	; 0x17
    2940:	e0 2d       	mov	r30, r0
    2942:	c5 01       	movw	r24, r10
    2944:	2a 96       	adiw	r28, 0x0a	; 10
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	df 90       	pop	r13
    295e:	cf 90       	pop	r12
    2960:	bf 90       	pop	r11
    2962:	af 90       	pop	r10
    2964:	9f 90       	pop	r9
    2966:	8f 90       	pop	r8
    2968:	7f 90       	pop	r7
    296a:	6f 90       	pop	r6
    296c:	5f 90       	pop	r5
    296e:	4f 90       	pop	r4
    2970:	3f 90       	pop	r3
    2972:	09 94       	ijmp

00002974 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    2974:	2f 92       	push	r2
    2976:	3f 92       	push	r3
    2978:	4f 92       	push	r4
    297a:	5f 92       	push	r5
    297c:	6f 92       	push	r6
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	6b 97       	sbiw	r28, 0x1b	; 27
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	9b 8f       	std	Y+27, r25	; 0x1b
    29aa:	8a 8f       	std	Y+26, r24	; 0x1a
    29ac:	2b 01       	movw	r4, r22
    29ae:	5a 83       	std	Y+2, r21	; 0x02
    29b0:	49 83       	std	Y+1, r20	; 0x01
    29b2:	d2 2e       	mov	r13, r18
    29b4:	19 87       	std	Y+9, r17	; 0x09
    29b6:	08 87       	std	Y+8, r16	; 0x08
    29b8:	47 01       	movw	r8, r14
    29ba:	ab 82       	std	Y+3, r10	; 0x03
    29bc:	dc 01       	movw	r26, r24
    29be:	59 96       	adiw	r26, 0x19	; 25
    29c0:	2d 91       	ld	r18, X+
    29c2:	3c 91       	ld	r19, X
    29c4:	5a 97       	sbiw	r26, 0x1a	; 26
    29c6:	21 15       	cp	r18, r1
    29c8:	31 05       	cpc	r19, r1
    29ca:	09 f0       	breq	.+2      	; 0x29ce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    29cc:	00 c1       	rjmp	.+512    	; 0x2bce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    29ce:	18 96       	adiw	r26, 0x08	; 8
    29d0:	8d 91       	ld	r24, X+
    29d2:	9c 91       	ld	r25, X
    29d4:	19 97       	sbiw	r26, 0x09	; 9
    29d6:	68 17       	cp	r22, r24
    29d8:	79 07       	cpc	r23, r25
    29da:	0c f0       	brlt	.+2      	; 0x29de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    29dc:	e7 c1       	rjmp	.+974    	; 0x2dac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    29de:	1a 96       	adiw	r26, 0x0a	; 10
    29e0:	8d 91       	ld	r24, X+
    29e2:	9c 91       	ld	r25, X
    29e4:	1b 97       	sbiw	r26, 0x0b	; 11
    29e6:	48 17       	cp	r20, r24
    29e8:	59 07       	cpc	r21, r25
    29ea:	0c f0       	brlt	.+2      	; 0x29ee <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    29ec:	df c1       	rjmp	.+958    	; 0x2dac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    29ee:	2c 2c       	mov	r2, r12
    29f0:	31 2c       	mov	r3, r1
    29f2:	fb 01       	movw	r30, r22
    29f4:	26 e0       	ldi	r18, 0x06	; 6
    29f6:	c2 9e       	mul	r12, r18
    29f8:	e0 0d       	add	r30, r0
    29fa:	f1 1d       	adc	r31, r1
    29fc:	11 24       	eor	r1, r1
    29fe:	fd 87       	std	Y+13, r31	; 0x0d
    2a00:	ec 87       	std	Y+12, r30	; 0x0c
    2a02:	1e 16       	cp	r1, r30
    2a04:	1f 06       	cpc	r1, r31
    2a06:	0c f0       	brlt	.+2      	; 0x2a0a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    2a08:	d1 c1       	rjmp	.+930    	; 0x2dac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2a0a:	4a 2d       	mov	r20, r10
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	5b 87       	std	Y+11, r21	; 0x0b
    2a10:	4a 87       	std	Y+10, r20	; 0x0a
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	44 0f       	add	r20, r20
    2a16:	55 1f       	adc	r21, r21
    2a18:	8a 95       	dec	r24
    2a1a:	e1 f7       	brne	.-8      	; 0x2a14 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    2a1c:	5f 87       	std	Y+15, r21	; 0x0f
    2a1e:	4e 87       	std	Y+14, r20	; 0x0e
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	84 0f       	add	r24, r20
    2a26:	95 1f       	adc	r25, r21
    2a28:	18 16       	cp	r1, r24
    2a2a:	19 06       	cpc	r1, r25
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    2a2e:	be c1       	rjmp	.+892    	; 0x2dac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2a30:	58 96       	adiw	r26, 0x18	; 24
    2a32:	8c 91       	ld	r24, X
    2a34:	81 11       	cpse	r24, r1
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2a38:	6f ea       	ldi	r22, 0xAF	; 175
    2a3a:	6d 15       	cp	r22, r13
    2a3c:	08 f4       	brcc	.+2      	; 0x2a40 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2a3e:	d3 94       	inc	r13
    2a40:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2a42:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2a44:	ed 91       	ld	r30, X+
    2a46:	fc 91       	ld	r31, X
    2a48:	11 97       	sbiw	r26, 0x01	; 1
    2a4a:	02 84       	ldd	r0, Z+10	; 0x0a
    2a4c:	f3 85       	ldd	r31, Z+11	; 0x0b
    2a4e:	e0 2d       	mov	r30, r0
    2a50:	cd 01       	movw	r24, r26
    2a52:	09 95       	icall
    2a54:	b5 e0       	ldi	r27, 0x05	; 5
    2a56:	db 9e       	mul	r13, r27
    2a58:	c0 01       	movw	r24, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	ec 2d       	mov	r30, r12
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	f9 8b       	std	Y+17, r31	; 0x11
    2a62:	e8 8b       	std	Y+16, r30	; 0x10
    2a64:	92 01       	movw	r18, r4
    2a66:	2b 5f       	subi	r18, 0xFB	; 251
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	3b 8b       	std	Y+19, r19	; 0x13
    2a6c:	2a 8b       	std	Y+18, r18	; 0x12
    2a6e:	32 01       	movw	r6, r4
    2a70:	5d 82       	std	Y+5, r5	; 0x05
    2a72:	4c 82       	std	Y+4, r4	; 0x04
    2a74:	ac 01       	movw	r20, r24
    2a76:	44 19       	sub	r20, r4
    2a78:	55 09       	sbc	r21, r5
    2a7a:	5d 8b       	std	Y+21, r21	; 0x15
    2a7c:	4c 8b       	std	Y+20, r20	; 0x14
    2a7e:	7b 81       	ldd	r23, Y+3	; 0x03
    2a80:	67 2f       	mov	r22, r23
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	7f 8b       	std	Y+23, r23	; 0x17
    2a86:	6e 8b       	std	Y+22, r22	; 0x16
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	08 96       	adiw	r24, 0x08	; 8
    2a8e:	99 8f       	std	Y+25, r25	; 0x19
    2a90:	88 8f       	std	Y+24, r24	; 0x18
    2a92:	ec 89       	ldd	r30, Y+20	; 0x14
    2a94:	fd 89       	ldd	r31, Y+21	; 0x15
    2a96:	e6 0d       	add	r30, r6
    2a98:	f7 1d       	adc	r31, r7
    2a9a:	ec 5b       	subi	r30, 0xBC	; 188
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	d4 90       	lpm	r13, Z
    2aa0:	a9 81       	ldd	r26, Y+1	; 0x01
    2aa2:	ba 81       	ldd	r27, Y+2	; 0x02
    2aa4:	bf 83       	std	Y+7, r27	; 0x07
    2aa6:	ae 83       	std	Y+6, r26	; 0x06
    2aa8:	5d 01       	movw	r10, r26
    2aaa:	d0 fe       	sbrs	r13, 0
    2aac:	16 c0       	rjmp	.+44     	; 0x2ada <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    2aae:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2ab0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2ab2:	ed 91       	ld	r30, X+
    2ab4:	fc 91       	ld	r31, X
    2ab6:	b1 e0       	ldi	r27, 0x01	; 1
    2ab8:	cb 12       	cpse	r12, r27
    2aba:	09 c0       	rjmp	.+18     	; 0x2ace <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2abc:	2b 81       	ldd	r18, Y+3	; 0x03
    2abe:	21 30       	cpi	r18, 0x01	; 1
    2ac0:	31 f4       	brne	.+12     	; 0x2ace <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2ac2:	04 84       	ldd	r0, Z+12	; 0x0c
    2ac4:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ac6:	e0 2d       	mov	r30, r0
    2ac8:	28 85       	ldd	r18, Y+8	; 0x08
    2aca:	39 85       	ldd	r19, Y+9	; 0x09
    2acc:	19 c0       	rjmp	.+50     	; 0x2b00 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    2ace:	06 84       	ldd	r0, Z+14	; 0x0e
    2ad0:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ad2:	e0 2d       	mov	r30, r0
    2ad4:	e8 84       	ldd	r14, Y+8	; 0x08
    2ad6:	f9 84       	ldd	r15, Y+9	; 0x09
    2ad8:	1d c0       	rjmp	.+58     	; 0x2b14 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    2ada:	48 85       	ldd	r20, Y+8	; 0x08
    2adc:	59 85       	ldd	r21, Y+9	; 0x09
    2ade:	48 15       	cp	r20, r8
    2ae0:	59 05       	cpc	r21, r9
    2ae2:	11 f1       	breq	.+68     	; 0x2b28 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2ae4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2ae6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2ae8:	ed 91       	ld	r30, X+
    2aea:	fc 91       	ld	r31, X
    2aec:	b1 e0       	ldi	r27, 0x01	; 1
    2aee:	cb 12       	cpse	r12, r27
    2af0:	0d c0       	rjmp	.+26     	; 0x2b0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	21 30       	cpi	r18, 0x01	; 1
    2af6:	51 f4       	brne	.+20     	; 0x2b0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2af8:	04 84       	ldd	r0, Z+12	; 0x0c
    2afa:	f5 85       	ldd	r31, Z+13	; 0x0d
    2afc:	e0 2d       	mov	r30, r0
    2afe:	94 01       	movw	r18, r8
    2b00:	a5 01       	movw	r20, r10
    2b02:	b3 01       	movw	r22, r6
    2b04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b08:	09 95       	icall
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2b0c:	06 84       	ldd	r0, Z+14	; 0x0e
    2b0e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b10:	e0 2d       	mov	r30, r0
    2b12:	74 01       	movw	r14, r8
    2b14:	0a 85       	ldd	r16, Y+10	; 0x0a
    2b16:	1b 85       	ldd	r17, Y+11	; 0x0b
    2b18:	91 01       	movw	r18, r2
    2b1a:	4e 81       	ldd	r20, Y+6	; 0x06
    2b1c:	5f 81       	ldd	r21, Y+7	; 0x07
    2b1e:	6c 81       	ldd	r22, Y+4	; 0x04
    2b20:	7d 81       	ldd	r23, Y+5	; 0x05
    2b22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b26:	09 95       	icall
    2b28:	d6 94       	lsr	r13
    2b2a:	4e 81       	ldd	r20, Y+6	; 0x06
    2b2c:	5f 81       	ldd	r21, Y+7	; 0x07
    2b2e:	6e 89       	ldd	r22, Y+22	; 0x16
    2b30:	7f 89       	ldd	r23, Y+23	; 0x17
    2b32:	46 0f       	add	r20, r22
    2b34:	57 1f       	adc	r21, r23
    2b36:	5f 83       	std	Y+7, r21	; 0x07
    2b38:	4e 83       	std	Y+6, r20	; 0x06
    2b3a:	7f ef       	ldi	r23, 0xFF	; 255
    2b3c:	a7 1a       	sub	r10, r23
    2b3e:	b7 0a       	sbc	r11, r23
    2b40:	88 8d       	ldd	r24, Y+24	; 0x18
    2b42:	99 8d       	ldd	r25, Y+25	; 0x19
    2b44:	a8 16       	cp	r10, r24
    2b46:	b9 06       	cpc	r11, r25
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    2b4a:	af cf       	rjmp	.-162    	; 0x2aaa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    2b4c:	ac 81       	ldd	r26, Y+4	; 0x04
    2b4e:	bd 81       	ldd	r27, Y+5	; 0x05
    2b50:	e8 89       	ldd	r30, Y+16	; 0x10
    2b52:	f9 89       	ldd	r31, Y+17	; 0x11
    2b54:	ae 0f       	add	r26, r30
    2b56:	bf 1f       	adc	r27, r31
    2b58:	bd 83       	std	Y+5, r27	; 0x05
    2b5a:	ac 83       	std	Y+4, r26	; 0x04
    2b5c:	ff ef       	ldi	r31, 0xFF	; 255
    2b5e:	6f 1a       	sub	r6, r31
    2b60:	7f 0a       	sbc	r7, r31
    2b62:	2a 89       	ldd	r18, Y+18	; 0x12
    2b64:	3b 89       	ldd	r19, Y+19	; 0x13
    2b66:	62 16       	cp	r6, r18
    2b68:	73 06       	cpc	r7, r19
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    2b6c:	92 cf       	rjmp	.-220    	; 0x2a92 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    2b6e:	48 85       	ldd	r20, Y+8	; 0x08
    2b70:	59 85       	ldd	r21, Y+9	; 0x09
    2b72:	48 15       	cp	r20, r8
    2b74:	59 05       	cpc	r21, r9
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    2b78:	f7 c0       	rjmp	.+494    	; 0x2d68 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2b7a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2b7c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2b7e:	ed 91       	ld	r30, X+
    2b80:	fc 91       	ld	r31, X
    2b82:	b1 e0       	ldi	r27, 0x01	; 1
    2b84:	cb 12       	cpse	r12, r27
    2b86:	12 c0       	rjmp	.+36     	; 0x2bac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    2b88:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8a:	21 30       	cpi	r18, 0x01	; 1
    2b8c:	79 f4       	brne	.+30     	; 0x2bac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    2b8e:	b2 01       	movw	r22, r4
    2b90:	6b 5f       	subi	r22, 0xFB	; 251
    2b92:	7f 4f       	sbci	r23, 0xFF	; 255
    2b94:	00 88       	ldd	r0, Z+16	; 0x10
    2b96:	f1 89       	ldd	r31, Z+17	; 0x11
    2b98:	e0 2d       	mov	r30, r0
    2b9a:	84 01       	movw	r16, r8
    2b9c:	28 e0       	ldi	r18, 0x08	; 8
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	49 81       	ldd	r20, Y+1	; 0x01
    2ba2:	5a 81       	ldd	r21, Y+2	; 0x02
    2ba4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ba6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ba8:	09 95       	icall
    2baa:	de c0       	rjmp	.+444    	; 0x2d68 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2bac:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bae:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bb0:	62 19       	sub	r22, r2
    2bb2:	73 09       	sbc	r23, r3
    2bb4:	06 84       	ldd	r0, Z+14	; 0x0e
    2bb6:	f7 85       	ldd	r31, Z+15	; 0x0f
    2bb8:	e0 2d       	mov	r30, r0
    2bba:	74 01       	movw	r14, r8
    2bbc:	0e 85       	ldd	r16, Y+14	; 0x0e
    2bbe:	1f 85       	ldd	r17, Y+15	; 0x0f
    2bc0:	91 01       	movw	r18, r2
    2bc2:	49 81       	ldd	r20, Y+1	; 0x01
    2bc4:	5a 81       	ldd	r21, Y+2	; 0x02
    2bc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bca:	09 95       	icall
    2bcc:	cd c0       	rjmp	.+410    	; 0x2d68 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2bce:	f9 01       	movw	r30, r18
    2bd0:	34 96       	adiw	r30, 0x04	; 4
    2bd2:	e4 91       	lpm	r30, Z
    2bd4:	de 1a       	sub	r13, r30
    2bd6:	f9 01       	movw	r30, r18
    2bd8:	32 96       	adiw	r30, 0x02	; 2
    2bda:	85 91       	lpm	r24, Z+
    2bdc:	94 91       	lpm	r25, Z
    2bde:	b7 e0       	ldi	r27, 0x07	; 7
    2be0:	db 9e       	mul	r13, r27
    2be2:	80 0d       	add	r24, r0
    2be4:	91 1d       	adc	r25, r1
    2be6:	11 24       	eor	r1, r1
    2be8:	f9 01       	movw	r30, r18
    2bea:	25 91       	lpm	r18, Z+
    2bec:	34 91       	lpm	r19, Z
    2bee:	39 8b       	std	Y+17, r19	; 0x11
    2bf0:	28 8b       	std	Y+16, r18	; 0x10
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	25 90       	lpm	r2, Z+
    2bf6:	34 90       	lpm	r3, Z
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	32 96       	adiw	r30, 0x02	; 2
    2bfc:	74 90       	lpm	r7, Z
    2bfe:	31 96       	adiw	r30, 0x01	; 1
    2c00:	a4 90       	lpm	r10, Z
    2c02:	32 96       	adiw	r30, 0x02	; 2
    2c04:	94 90       	lpm	r9, Z
    2c06:	31 96       	adiw	r30, 0x01	; 1
    2c08:	b4 90       	lpm	r11, Z
    2c0a:	31 e0       	ldi	r19, 0x01	; 1
    2c0c:	3c 15       	cp	r19, r12
    2c0e:	18 f0       	brcs	.+6      	; 0x2c16 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    2c10:	4b 81       	ldd	r20, Y+3	; 0x03
    2c12:	42 30       	cpi	r20, 0x02	; 2
    2c14:	68 f0       	brcs	.+26     	; 0x2c30 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    2c16:	69 2d       	mov	r22, r9
    2c18:	09 2c       	mov	r0, r9
    2c1a:	00 0c       	add	r0, r0
    2c1c:	77 0b       	sbc	r23, r23
    2c1e:	7d 83       	std	Y+5, r23	; 0x05
    2c20:	6c 83       	std	Y+4, r22	; 0x04
    2c22:	8b 2d       	mov	r24, r11
    2c24:	0b 2c       	mov	r0, r11
    2c26:	00 0c       	add	r0, r0
    2c28:	99 0b       	sbc	r25, r25
    2c2a:	9f 83       	std	Y+7, r25	; 0x07
    2c2c:	8e 83       	std	Y+6, r24	; 0x06
    2c2e:	04 c0       	rjmp	.+8      	; 0x2c38 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    2c30:	1f 82       	std	Y+7, r1	; 0x07
    2c32:	1e 82       	std	Y+6, r1	; 0x06
    2c34:	1d 82       	std	Y+5, r1	; 0x05
    2c36:	1c 82       	std	Y+4, r1	; 0x04
    2c38:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c3a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c3c:	ed 91       	ld	r30, X+
    2c3e:	fc 91       	ld	r31, X
    2c40:	11 97       	sbiw	r26, 0x01	; 1
    2c42:	02 84       	ldd	r0, Z+10	; 0x0a
    2c44:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c46:	e0 2d       	mov	r30, r0
    2c48:	cd 01       	movw	r24, r26
    2c4a:	09 95       	icall
    2c4c:	61 2c       	mov	r6, r1
    2c4e:	d1 2c       	mov	r13, r1
    2c50:	81 2c       	mov	r8, r1
    2c52:	fb 81       	ldd	r31, Y+3	; 0x03
    2c54:	ef 2f       	mov	r30, r31
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	fb 87       	std	Y+11, r31	; 0x0b
    2c5a:	ea 87       	std	Y+10, r30	; 0x0a
    2c5c:	2c 2d       	mov	r18, r12
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	3d 87       	std	Y+13, r19	; 0x0d
    2c62:	2c 87       	std	Y+12, r18	; 0x0c
    2c64:	49 81       	ldd	r20, Y+1	; 0x01
    2c66:	5a 81       	ldd	r21, Y+2	; 0x02
    2c68:	4b 0d       	add	r20, r11
    2c6a:	51 1d       	adc	r21, r1
    2c6c:	b7 fc       	sbrc	r11, 7
    2c6e:	5a 95       	dec	r21
    2c70:	5d 8b       	std	Y+21, r21	; 0x15
    2c72:	4c 8b       	std	Y+20, r20	; 0x14
    2c74:	b2 01       	movw	r22, r4
    2c76:	69 0d       	add	r22, r9
    2c78:	71 1d       	adc	r23, r1
    2c7a:	97 fc       	sbrc	r9, 7
    2c7c:	7a 95       	dec	r23
    2c7e:	7f 8b       	std	Y+23, r23	; 0x17
    2c80:	6e 8b       	std	Y+22, r22	; 0x16
    2c82:	8a 14       	cp	r8, r10
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    2c86:	70 c0       	rjmp	.+224    	; 0x2d68 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2c88:	28 2d       	mov	r18, r8
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4e 81       	ldd	r20, Y+6	; 0x06
    2c8e:	5f 81       	ldd	r21, Y+7	; 0x07
    2c90:	42 0f       	add	r20, r18
    2c92:	53 1f       	adc	r21, r19
    2c94:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c96:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c98:	a4 9f       	mul	r26, r20
    2c9a:	c0 01       	movw	r24, r0
    2c9c:	a5 9f       	mul	r26, r21
    2c9e:	90 0d       	add	r25, r0
    2ca0:	b4 9f       	mul	r27, r20
    2ca2:	90 0d       	add	r25, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    2caa:	e8 0f       	add	r30, r24
    2cac:	f9 1f       	adc	r31, r25
    2cae:	ff 87       	std	Y+15, r31	; 0x0f
    2cb0:	ee 87       	std	Y+14, r30	; 0x0e
    2cb2:	86 2d       	mov	r24, r6
    2cb4:	91 2c       	mov	r9, r1
    2cb6:	4c 89       	ldd	r20, Y+20	; 0x14
    2cb8:	5d 89       	ldd	r21, Y+21	; 0x15
    2cba:	42 0f       	add	r20, r18
    2cbc:	53 1f       	adc	r21, r19
    2cbe:	5b 8b       	std	Y+19, r21	; 0x13
    2cc0:	4a 8b       	std	Y+18, r20	; 0x12
    2cc2:	97 14       	cp	r9, r7
    2cc4:	08 f0       	brcs	.+2      	; 0x2cc8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    2cc6:	4d c0       	rjmp	.+154    	; 0x2d62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    2cc8:	bb 24       	eor	r11, r11
    2cca:	b3 94       	inc	r11
    2ccc:	b8 0e       	add	r11, r24
    2cce:	87 70       	andi	r24, 0x07	; 7
    2cd0:	41 f4       	brne	.+16     	; 0x2ce2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    2cd2:	c1 01       	movw	r24, r2
    2cd4:	01 96       	adiw	r24, 0x01	; 1
    2cd6:	e8 89       	ldd	r30, Y+16	; 0x10
    2cd8:	f9 89       	ldd	r31, Y+17	; 0x11
    2cda:	e2 0d       	add	r30, r2
    2cdc:	f3 1d       	adc	r31, r3
    2cde:	d4 90       	lpm	r13, Z
    2ce0:	1c 01       	movw	r2, r24
    2ce2:	d7 fe       	sbrs	r13, 7
    2ce4:	3a c0       	rjmp	.+116    	; 0x2d5a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2ce6:	51 e0       	ldi	r21, 0x01	; 1
    2ce8:	c5 12       	cpse	r12, r21
    2cea:	16 c0       	rjmp	.+44     	; 0x2d18 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2cec:	6b 81       	ldd	r22, Y+3	; 0x03
    2cee:	61 30       	cpi	r22, 0x01	; 1
    2cf0:	99 f4       	brne	.+38     	; 0x2d18 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2cf2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2cf4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2cf6:	ed 91       	ld	r30, X+
    2cf8:	fc 91       	ld	r31, X
    2cfa:	11 97       	sbiw	r26, 0x01	; 1
    2cfc:	04 84       	ldd	r0, Z+12	; 0x0c
    2cfe:	f5 85       	ldd	r31, Z+13	; 0x0d
    2d00:	e0 2d       	mov	r30, r0
    2d02:	28 85       	ldd	r18, Y+8	; 0x08
    2d04:	39 85       	ldd	r19, Y+9	; 0x09
    2d06:	4a 89       	ldd	r20, Y+18	; 0x12
    2d08:	5b 89       	ldd	r21, Y+19	; 0x13
    2d0a:	6e 89       	ldd	r22, Y+22	; 0x16
    2d0c:	7f 89       	ldd	r23, Y+23	; 0x17
    2d0e:	69 0d       	add	r22, r9
    2d10:	71 1d       	adc	r23, r1
    2d12:	cd 01       	movw	r24, r26
    2d14:	09 95       	icall
    2d16:	21 c0       	rjmp	.+66     	; 0x2d5a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1c:	89 0d       	add	r24, r9
    2d1e:	91 1d       	adc	r25, r1
    2d20:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d22:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d24:	8e 9f       	mul	r24, r30
    2d26:	b0 01       	movw	r22, r0
    2d28:	8f 9f       	mul	r24, r31
    2d2a:	70 0d       	add	r23, r0
    2d2c:	9e 9f       	mul	r25, r30
    2d2e:	70 0d       	add	r23, r0
    2d30:	11 24       	eor	r1, r1
    2d32:	64 0d       	add	r22, r4
    2d34:	75 1d       	adc	r23, r5
    2d36:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d38:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d3a:	ed 91       	ld	r30, X+
    2d3c:	fc 91       	ld	r31, X
    2d3e:	11 97       	sbiw	r26, 0x01	; 1
    2d40:	06 84       	ldd	r0, Z+14	; 0x0e
    2d42:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d44:	e0 2d       	mov	r30, r0
    2d46:	e8 84       	ldd	r14, Y+8	; 0x08
    2d48:	f9 84       	ldd	r15, Y+9	; 0x09
    2d4a:	0a 85       	ldd	r16, Y+10	; 0x0a
    2d4c:	1b 85       	ldd	r17, Y+11	; 0x0b
    2d4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d50:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d52:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d54:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d56:	cd 01       	movw	r24, r26
    2d58:	09 95       	icall
    2d5a:	dd 0c       	add	r13, r13
    2d5c:	93 94       	inc	r9
    2d5e:	8b 2d       	mov	r24, r11
    2d60:	b0 cf       	rjmp	.-160    	; 0x2cc2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    2d62:	67 0c       	add	r6, r7
    2d64:	83 94       	inc	r8
    2d66:	8d cf       	rjmp	.-230    	; 0x2c82 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    2d68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	11 97       	sbiw	r26, 0x01	; 1
    2d72:	06 88       	ldd	r0, Z+22	; 0x16
    2d74:	f7 89       	ldd	r31, Z+23	; 0x17
    2d76:	e0 2d       	mov	r30, r0
    2d78:	cd 01       	movw	r24, r26
    2d7a:	6b 96       	adiw	r28, 0x1b	; 27
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	ff 90       	pop	r15
    2d90:	ef 90       	pop	r14
    2d92:	df 90       	pop	r13
    2d94:	cf 90       	pop	r12
    2d96:	bf 90       	pop	r11
    2d98:	af 90       	pop	r10
    2d9a:	9f 90       	pop	r9
    2d9c:	8f 90       	pop	r8
    2d9e:	7f 90       	pop	r7
    2da0:	6f 90       	pop	r6
    2da2:	5f 90       	pop	r5
    2da4:	4f 90       	pop	r4
    2da6:	3f 90       	pop	r3
    2da8:	2f 90       	pop	r2
    2daa:	09 94       	ijmp
    2dac:	6b 96       	adiw	r28, 0x1b	; 27
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	bf 90       	pop	r11
    2dca:	af 90       	pop	r10
    2dcc:	9f 90       	pop	r9
    2dce:	8f 90       	pop	r8
    2dd0:	7f 90       	pop	r7
    2dd2:	6f 90       	pop	r6
    2dd4:	5f 90       	pop	r5
    2dd6:	4f 90       	pop	r4
    2dd8:	3f 90       	pop	r3
    2dda:	2f 90       	pop	r2
    2ddc:	08 95       	ret

00002dde <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    2dde:	8f 92       	push	r8
    2de0:	9f 92       	push	r9
    2de2:	af 92       	push	r10
    2de4:	cf 92       	push	r12
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	ec 01       	movw	r28, r24
    2df4:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    2df6:	89 8d       	ldd	r24, Y+25	; 0x19
    2df8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <_ZN12Adafruit_GFX5writeEh+0x22>
    2dfe:	42 c0       	rjmp	.+132    	; 0x2e84 <_ZN12Adafruit_GFX5writeEh+0xa6>

        if(c == '\n') {                        // Newline?
    2e00:	6a 30       	cpi	r22, 0x0A	; 10
    2e02:	59 f4       	brne	.+22     	; 0x2e1a <_ZN12Adafruit_GFX5writeEh+0x3c>
            cursor_x  = 0;                     // Reset x to zero,
    2e04:	1d 86       	std	Y+13, r1	; 0x0d
    2e06:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += textsize_y * 8;        // advance y one line
    2e08:	2d 89       	ldd	r18, Y+21	; 0x15
    2e0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e0e:	38 e0       	ldi	r19, 0x08	; 8
    2e10:	23 9f       	mul	r18, r19
    2e12:	80 0d       	add	r24, r0
    2e14:	91 1d       	adc	r25, r1
    2e16:	11 24       	eor	r1, r1
    2e18:	43 c0       	rjmp	.+134    	; 0x2ea0 <_ZN12Adafruit_GFX5writeEh+0xc2>
        } else if(c != '\r') {                 // Ignore carriage returns
    2e1a:	6d 30       	cpi	r22, 0x0D	; 13
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <_ZN12Adafruit_GFX5writeEh+0x42>
    2e1e:	aa c0       	rjmp	.+340    	; 0x2f74 <_ZN12Adafruit_GFX5writeEh+0x196>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    2e20:	8f 89       	ldd	r24, Y+23	; 0x17
    2e22:	88 23       	and	r24, r24
    2e24:	c9 f0       	breq	.+50     	; 0x2e58 <_ZN12Adafruit_GFX5writeEh+0x7a>
    2e26:	3c 89       	ldd	r19, Y+20	; 0x14
    2e28:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e2c:	46 e0       	ldi	r20, 0x06	; 6
    2e2e:	34 9f       	mul	r19, r20
    2e30:	80 0d       	add	r24, r0
    2e32:	91 1d       	adc	r25, r1
    2e34:	11 24       	eor	r1, r1
    2e36:	48 85       	ldd	r20, Y+8	; 0x08
    2e38:	59 85       	ldd	r21, Y+9	; 0x09
    2e3a:	48 17       	cp	r20, r24
    2e3c:	59 07       	cpc	r21, r25
    2e3e:	64 f4       	brge	.+24     	; 0x2e58 <_ZN12Adafruit_GFX5writeEh+0x7a>
                cursor_x  = 0;                 // Reset x to zero,
    2e40:	1d 86       	std	Y+13, r1	; 0x0d
    2e42:	1c 86       	std	Y+12, r1	; 0x0c
                cursor_y += textsize_y * 8;    // advance y one line
    2e44:	3d 89       	ldd	r19, Y+21	; 0x15
    2e46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e4a:	48 e0       	ldi	r20, 0x08	; 8
    2e4c:	34 9f       	mul	r19, r20
    2e4e:	80 0d       	add	r24, r0
    2e50:	91 1d       	adc	r25, r1
    2e52:	11 24       	eor	r1, r1
    2e54:	9f 87       	std	Y+15, r25	; 0x0f
    2e56:	8e 87       	std	Y+14, r24	; 0x0e
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    2e58:	ea 88       	ldd	r14, Y+18	; 0x12
    2e5a:	fb 88       	ldd	r15, Y+19	; 0x13
    2e5c:	08 89       	ldd	r16, Y+16	; 0x10
    2e5e:	19 89       	ldd	r17, Y+17	; 0x11
    2e60:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e62:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e64:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e66:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e68:	ad 88       	ldd	r10, Y+21	; 0x15
    2e6a:	cc 88       	ldd	r12, Y+20	; 0x14
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	0e 94 ba 14 	call	0x2974	; 0x2974 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
            cursor_x += textsize_x * 6;          // Advance x one char
    2e72:	2c 89       	ldd	r18, Y+20	; 0x14
    2e74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e76:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e78:	36 e0       	ldi	r19, 0x06	; 6
    2e7a:	23 9f       	mul	r18, r19
    2e7c:	80 0d       	add	r24, r0
    2e7e:	91 1d       	adc	r25, r1
    2e80:	11 24       	eor	r1, r1
    2e82:	3e c0       	rjmp	.+124    	; 0x2f00 <_ZN12Adafruit_GFX5writeEh+0x122>
        }

    } else { // Custom font

        if(c == '\n') {
    2e84:	6a 30       	cpi	r22, 0x0A	; 10
    2e86:	79 f4       	brne	.+30     	; 0x2ea6 <_ZN12Adafruit_GFX5writeEh+0xc8>
            cursor_x  = 0;
    2e88:	1d 86       	std	Y+13, r1	; 0x0d
    2e8a:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    2e8c:	2d 89       	ldd	r18, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2e8e:	fc 01       	movw	r30, r24
    2e90:	36 96       	adiw	r30, 0x06	; 6
    2e92:	e4 91       	lpm	r30, Z
    2e94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e98:	2e 9f       	mul	r18, r30
    2e9a:	80 0d       	add	r24, r0
    2e9c:	91 1d       	adc	r25, r1
    2e9e:	11 24       	eor	r1, r1
    2ea0:	9f 87       	std	Y+15, r25	; 0x0f
    2ea2:	8e 87       	std	Y+14, r24	; 0x0e
    2ea4:	67 c0       	rjmp	.+206    	; 0x2f74 <_ZN12Adafruit_GFX5writeEh+0x196>
        } else if(c != '\r') {
    2ea6:	6d 30       	cpi	r22, 0x0D	; 13
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <_ZN12Adafruit_GFX5writeEh+0xce>
    2eaa:	64 c0       	rjmp	.+200    	; 0x2f74 <_ZN12Adafruit_GFX5writeEh+0x196>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    2eac:	fc 01       	movw	r30, r24
    2eae:	34 96       	adiw	r30, 0x04	; 4
    2eb0:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2eb2:	63 17       	cp	r22, r19
    2eb4:	08 f4       	brcc	.+2      	; 0x2eb8 <_ZN12Adafruit_GFX5writeEh+0xda>
    2eb6:	5e c0       	rjmp	.+188    	; 0x2f74 <_ZN12Adafruit_GFX5writeEh+0x196>
    2eb8:	31 96       	adiw	r30, 0x01	; 1
    2eba:	e4 91       	lpm	r30, Z
    2ebc:	e6 17       	cp	r30, r22
    2ebe:	08 f4       	brcc	.+2      	; 0x2ec2 <_ZN12Adafruit_GFX5writeEh+0xe4>
    2ec0:	59 c0       	rjmp	.+178    	; 0x2f74 <_ZN12Adafruit_GFX5writeEh+0x196>
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    2ec2:	46 2f       	mov	r20, r22
    2ec4:	43 1b       	sub	r20, r19
    2ec6:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2ec8:	fc 01       	movw	r30, r24
    2eca:	32 96       	adiw	r30, 0x02	; 2
    2ecc:	85 90       	lpm	r8, Z+
    2ece:	94 90       	lpm	r9, Z
    2ed0:	47 e0       	ldi	r20, 0x07	; 7
    2ed2:	34 9f       	mul	r19, r20
    2ed4:	80 0c       	add	r8, r0
    2ed6:	91 1c       	adc	r9, r1
    2ed8:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    2eda:	f4 01       	movw	r30, r8
    2edc:	32 96       	adiw	r30, 0x02	; 2
    2ede:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    2ee0:	31 96       	adiw	r30, 0x01	; 1
    2ee2:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2ee4:	33 23       	and	r19, r19
    2ee6:	11 f0       	breq	.+4      	; 0x2eec <_ZN12Adafruit_GFX5writeEh+0x10e>
    2ee8:	e1 11       	cpse	r30, r1
    2eea:	0d c0       	rjmp	.+26     	; 0x2f06 <_ZN12Adafruit_GFX5writeEh+0x128>
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    2eec:	f4 01       	movw	r30, r8
    2eee:	34 96       	adiw	r30, 0x04	; 4
    2ef0:	e4 91       	lpm	r30, Z
    2ef2:	2c 89       	ldd	r18, Y+20	; 0x14
    2ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ef6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ef8:	e2 9f       	mul	r30, r18
    2efa:	80 0d       	add	r24, r0
    2efc:	91 1d       	adc	r25, r1
    2efe:	11 24       	eor	r1, r1
    2f00:	9d 87       	std	Y+13, r25	; 0x0d
    2f02:	8c 87       	std	Y+12, r24	; 0x0c
            }
        }

    }
    return 1;
    2f04:	37 c0       	rjmp	.+110    	; 0x2f74 <_ZN12Adafruit_GFX5writeEh+0x196>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2f06:	f4 01       	movw	r30, r8
    2f08:	35 96       	adiw	r30, 0x05	; 5
    2f0a:	44 91       	lpm	r20, Z
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2f0c:	5f 89       	ldd	r21, Y+23	; 0x17
    2f0e:	55 23       	and	r21, r21
    2f10:	19 f1       	breq	.+70     	; 0x2f58 <_ZN12Adafruit_GFX5writeEh+0x17a>
    2f12:	5c 89       	ldd	r21, Y+20	; 0x14
    2f14:	e3 2f       	mov	r30, r19
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	e4 0f       	add	r30, r20
    2f1a:	f1 1d       	adc	r31, r1
    2f1c:	47 fd       	sbrc	r20, 7
    2f1e:	fa 95       	dec	r31
    2f20:	5e 9f       	mul	r21, r30
    2f22:	b0 01       	movw	r22, r0
    2f24:	5f 9f       	mul	r21, r31
    2f26:	70 0d       	add	r23, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f2c:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f2e:	46 0f       	add	r20, r22
    2f30:	57 1f       	adc	r21, r23
    2f32:	68 85       	ldd	r22, Y+8	; 0x08
    2f34:	79 85       	ldd	r23, Y+9	; 0x09
    2f36:	64 17       	cp	r22, r20
    2f38:	75 07       	cpc	r23, r21
    2f3a:	74 f4       	brge	.+28     	; 0x2f58 <_ZN12Adafruit_GFX5writeEh+0x17a>
                        cursor_x  = 0;
    2f3c:	1d 86       	std	Y+13, r1	; 0x0d
    2f3e:	1c 86       	std	Y+12, r1	; 0x0c
                        cursor_y += (int16_t)textsize_y *
    2f40:	3d 89       	ldd	r19, Y+21	; 0x15
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2f42:	fc 01       	movw	r30, r24
    2f44:	36 96       	adiw	r30, 0x06	; 6
    2f46:	e4 91       	lpm	r30, Z
    2f48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f4c:	3e 9f       	mul	r19, r30
    2f4e:	80 0d       	add	r24, r0
    2f50:	91 1d       	adc	r25, r1
    2f52:	11 24       	eor	r1, r1
    2f54:	9f 87       	std	Y+15, r25	; 0x0f
    2f56:	8e 87       	std	Y+14, r24	; 0x0e
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    2f58:	ea 88       	ldd	r14, Y+18	; 0x12
    2f5a:	fb 88       	ldd	r15, Y+19	; 0x13
    2f5c:	08 89       	ldd	r16, Y+16	; 0x10
    2f5e:	19 89       	ldd	r17, Y+17	; 0x11
    2f60:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f62:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f64:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f66:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f68:	ad 88       	ldd	r10, Y+21	; 0x15
    2f6a:	cc 88       	ldd	r12, Y+20	; 0x14
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	0e 94 ba 14 	call	0x2974	; 0x2974 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    2f72:	bc cf       	rjmp	.-136    	; 0x2eec <_ZN12Adafruit_GFX5writeEh+0x10e>
            }
        }

    }
    return 1;
}
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	cf 90       	pop	r12
    2f86:	af 90       	pop	r10
    2f88:	9f 90       	pop	r9
    2f8a:	8f 90       	pop	r8
    2f8c:	08 95       	ret

00002f8e <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    2f8e:	61 11       	cpse	r22, r1
    2f90:	01 c0       	rjmp	.+2      	; 0x2f94 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    2f92:	61 e0       	ldi	r22, 0x01	; 1
    2f94:	fc 01       	movw	r30, r24
    2f96:	64 8b       	std	Z+20, r22	; 0x14
    textsize_y = (s_y > 0) ? s_y : 1;
    2f98:	41 11       	cpse	r20, r1
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	45 8b       	std	Z+21, r20	; 0x15
    2fa2:	08 95       	ret

00002fa4 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    2fa4:	46 2f       	mov	r20, r22
    2fa6:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <_ZN12Adafruit_GFX11setTextSizeEhh>

00002faa <_ZN16Adafruit_SSD13069drawPixelEiij>:
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) {
  return buffer;
}
    2faa:	fc 01       	movw	r30, r24
    2fac:	77 fd       	sbrc	r23, 7
    2fae:	b9 c0       	rjmp	.+370    	; 0x3122 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2fb0:	80 85       	ldd	r24, Z+8	; 0x08
    2fb2:	91 85       	ldd	r25, Z+9	; 0x09
    2fb4:	68 17       	cp	r22, r24
    2fb6:	79 07       	cpc	r23, r25
    2fb8:	0c f0       	brlt	.+2      	; 0x2fbc <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    2fba:	b3 c0       	rjmp	.+358    	; 0x3122 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2fbc:	57 fd       	sbrc	r21, 7
    2fbe:	b1 c0       	rjmp	.+354    	; 0x3122 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2fc0:	82 85       	ldd	r24, Z+10	; 0x0a
    2fc2:	93 85       	ldd	r25, Z+11	; 0x0b
    2fc4:	48 17       	cp	r20, r24
    2fc6:	59 07       	cpc	r21, r25
    2fc8:	0c f0       	brlt	.+2      	; 0x2fcc <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    2fca:	08 95       	ret
    2fcc:	86 89       	ldd	r24, Z+22	; 0x16
    2fce:	82 30       	cpi	r24, 0x02	; 2
    2fd0:	79 f4       	brne	.+30     	; 0x2ff0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    2fd2:	84 81       	ldd	r24, Z+4	; 0x04
    2fd4:	95 81       	ldd	r25, Z+5	; 0x05
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	a6 1b       	sub	r26, r22
    2fda:	b7 0b       	sbc	r27, r23
    2fdc:	bd 01       	movw	r22, r26
    2fde:	61 50       	subi	r22, 0x01	; 1
    2fe0:	71 09       	sbc	r23, r1
    2fe2:	86 81       	ldd	r24, Z+6	; 0x06
    2fe4:	97 81       	ldd	r25, Z+7	; 0x07
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	a4 1b       	sub	r26, r20
    2fea:	b5 0b       	sbc	r27, r21
    2fec:	ad 01       	movw	r20, r26
    2fee:	0e c0       	rjmp	.+28     	; 0x300c <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    2ff0:	83 30       	cpi	r24, 0x03	; 3
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    2ff4:	84 c0       	rjmp	.+264    	; 0x30fe <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    2ff6:	64 27       	eor	r22, r20
    2ff8:	75 27       	eor	r23, r21
    2ffa:	ca 01       	movw	r24, r20
    2ffc:	86 27       	eor	r24, r22
    2ffe:	97 27       	eor	r25, r23
    3000:	68 27       	eor	r22, r24
    3002:	79 27       	eor	r23, r25
    3004:	46 81       	ldd	r20, Z+6	; 0x06
    3006:	57 81       	ldd	r21, Z+7	; 0x07
    3008:	48 1b       	sub	r20, r24
    300a:	59 0b       	sbc	r21, r25
    300c:	41 50       	subi	r20, 0x01	; 1
    300e:	51 09       	sbc	r21, r1
    3010:	21 30       	cpi	r18, 0x01	; 1
    3012:	31 05       	cpc	r19, r1
    3014:	31 f0       	breq	.+12     	; 0x3022 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    3016:	48 f1       	brcs	.+82     	; 0x306a <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    3018:	22 30       	cpi	r18, 0x02	; 2
    301a:	31 05       	cpc	r19, r1
    301c:	09 f4       	brne	.+2      	; 0x3020 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    301e:	4a c0       	rjmp	.+148    	; 0x30b4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    3020:	08 95       	ret
    3022:	ca 01       	movw	r24, r20
    3024:	57 fd       	sbrc	r21, 7
    3026:	07 96       	adiw	r24, 0x07	; 7
    3028:	9c 01       	movw	r18, r24
    302a:	a3 e0       	ldi	r26, 0x03	; 3
    302c:	35 95       	asr	r19
    302e:	27 95       	ror	r18
    3030:	aa 95       	dec	r26
    3032:	e1 f7       	brne	.-8      	; 0x302c <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    3034:	a4 81       	ldd	r26, Z+4	; 0x04
    3036:	b5 81       	ldd	r27, Z+5	; 0x05
    3038:	2a 9f       	mul	r18, r26
    303a:	c0 01       	movw	r24, r0
    303c:	2b 9f       	mul	r18, r27
    303e:	90 0d       	add	r25, r0
    3040:	3a 9f       	mul	r19, r26
    3042:	90 0d       	add	r25, r0
    3044:	11 24       	eor	r1, r1
    3046:	68 0f       	add	r22, r24
    3048:	79 1f       	adc	r23, r25
    304a:	07 8c       	ldd	r0, Z+31	; 0x1f
    304c:	f0 a1       	ldd	r31, Z+32	; 0x20
    304e:	e0 2d       	mov	r30, r0
    3050:	e6 0f       	add	r30, r22
    3052:	f7 1f       	adc	r31, r23
    3054:	47 70       	andi	r20, 0x07	; 7
    3056:	55 27       	eor	r21, r21
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	01 c0       	rjmp	.+2      	; 0x3060 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    305e:	88 0f       	add	r24, r24
    3060:	4a 95       	dec	r20
    3062:	ea f7       	brpl	.-6      	; 0x305e <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    3064:	90 81       	ld	r25, Z
    3066:	89 2b       	or	r24, r25
    3068:	48 c0       	rjmp	.+144    	; 0x30fa <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    306a:	ca 01       	movw	r24, r20
    306c:	57 fd       	sbrc	r21, 7
    306e:	07 96       	adiw	r24, 0x07	; 7
    3070:	9c 01       	movw	r18, r24
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	35 95       	asr	r19
    3076:	27 95       	ror	r18
    3078:	9a 95       	dec	r25
    307a:	e1 f7       	brne	.-8      	; 0x3074 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    307c:	a4 81       	ldd	r26, Z+4	; 0x04
    307e:	b5 81       	ldd	r27, Z+5	; 0x05
    3080:	2a 9f       	mul	r18, r26
    3082:	c0 01       	movw	r24, r0
    3084:	2b 9f       	mul	r18, r27
    3086:	90 0d       	add	r25, r0
    3088:	3a 9f       	mul	r19, r26
    308a:	90 0d       	add	r25, r0
    308c:	11 24       	eor	r1, r1
    308e:	68 0f       	add	r22, r24
    3090:	79 1f       	adc	r23, r25
    3092:	07 8c       	ldd	r0, Z+31	; 0x1f
    3094:	f0 a1       	ldd	r31, Z+32	; 0x20
    3096:	e0 2d       	mov	r30, r0
    3098:	e6 0f       	add	r30, r22
    309a:	f7 1f       	adc	r31, r23
    309c:	47 70       	andi	r20, 0x07	; 7
    309e:	55 27       	eor	r21, r21
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	01 c0       	rjmp	.+2      	; 0x30a8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    30a6:	88 0f       	add	r24, r24
    30a8:	4a 95       	dec	r20
    30aa:	ea f7       	brpl	.-6      	; 0x30a6 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    30ac:	80 95       	com	r24
    30ae:	90 81       	ld	r25, Z
    30b0:	89 23       	and	r24, r25
    30b2:	23 c0       	rjmp	.+70     	; 0x30fa <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    30b4:	ca 01       	movw	r24, r20
    30b6:	57 fd       	sbrc	r21, 7
    30b8:	07 96       	adiw	r24, 0x07	; 7
    30ba:	9c 01       	movw	r18, r24
    30bc:	83 e0       	ldi	r24, 0x03	; 3
    30be:	35 95       	asr	r19
    30c0:	27 95       	ror	r18
    30c2:	8a 95       	dec	r24
    30c4:	e1 f7       	brne	.-8      	; 0x30be <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    30c6:	a4 81       	ldd	r26, Z+4	; 0x04
    30c8:	b5 81       	ldd	r27, Z+5	; 0x05
    30ca:	2a 9f       	mul	r18, r26
    30cc:	c0 01       	movw	r24, r0
    30ce:	2b 9f       	mul	r18, r27
    30d0:	90 0d       	add	r25, r0
    30d2:	3a 9f       	mul	r19, r26
    30d4:	90 0d       	add	r25, r0
    30d6:	11 24       	eor	r1, r1
    30d8:	68 0f       	add	r22, r24
    30da:	79 1f       	adc	r23, r25
    30dc:	07 8c       	ldd	r0, Z+31	; 0x1f
    30de:	f0 a1       	ldd	r31, Z+32	; 0x20
    30e0:	e0 2d       	mov	r30, r0
    30e2:	e6 0f       	add	r30, r22
    30e4:	f7 1f       	adc	r31, r23
    30e6:	47 70       	andi	r20, 0x07	; 7
    30e8:	55 27       	eor	r21, r21
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	01 c0       	rjmp	.+2      	; 0x30f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    30f0:	88 0f       	add	r24, r24
    30f2:	4a 95       	dec	r20
    30f4:	ea f7       	brpl	.-6      	; 0x30f0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    30f6:	90 81       	ld	r25, Z
    30f8:	89 27       	eor	r24, r25
    30fa:	80 83       	st	Z, r24
    30fc:	08 95       	ret
    30fe:	81 30       	cpi	r24, 0x01	; 1
    3100:	09 f0       	breq	.+2      	; 0x3104 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    3102:	86 cf       	rjmp	.-244    	; 0x3010 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    3104:	64 27       	eor	r22, r20
    3106:	75 27       	eor	r23, r21
    3108:	46 27       	eor	r20, r22
    310a:	57 27       	eor	r21, r23
    310c:	64 27       	eor	r22, r20
    310e:	75 27       	eor	r23, r21
    3110:	84 81       	ldd	r24, Z+4	; 0x04
    3112:	95 81       	ldd	r25, Z+5	; 0x05
    3114:	dc 01       	movw	r26, r24
    3116:	a6 1b       	sub	r26, r22
    3118:	b7 0b       	sbc	r27, r23
    311a:	bd 01       	movw	r22, r26
    311c:	61 50       	subi	r22, 0x01	; 1
    311e:	71 09       	sbc	r23, r1
    3120:	77 cf       	rjmp	.-274    	; 0x3010 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    3122:	08 95       	ret

00003124 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    3124:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN8SPIClass13interruptModeE>
    3128:	22 23       	and	r18, r18
    312a:	99 f0       	breq	.+38     	; 0x3152 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    312c:	4f b7       	in	r20, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN8SPIClass13interruptModeE>
    3134:	21 30       	cpi	r18, 0x01	; 1
    3136:	59 f4       	brne	.+22     	; 0x314e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    3138:	2d b3       	in	r18, 0x1d	; 29
    313a:	20 93 2b 03 	sts	0x032B, r18	; 0x80032b <_ZN8SPIClass13interruptSaveE>
    313e:	3d b3       	in	r19, 0x1d	; 29
    3140:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <_ZN8SPIClass13interruptMaskE>
    3144:	20 95       	com	r18
    3146:	23 23       	and	r18, r19
    3148:	2d bb       	out	0x1d, r18	; 29
    314a:	4f bf       	out	0x3f, r20	; 63
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    314e:	40 93 2b 03 	sts	0x032B, r20	; 0x80032b <_ZN8SPIClass13interruptSaveE>
    3152:	8c bd       	out	0x2c, r24	; 44
    3154:	9d bd       	out	0x2d, r25	; 45
    3156:	08 95       	ret

00003158 <_ZN8SPIClass8transferEh>:
    3158:	8e bd       	out	0x2e, r24	; 46
    315a:	00 00       	nop
    315c:	0d b4       	in	r0, 0x2d	; 45
    315e:	07 fe       	sbrs	r0, 7
    3160:	fd cf       	rjmp	.-6      	; 0x315c <_ZN8SPIClass8transferEh+0x4>
    3162:	8e b5       	in	r24, 0x2e	; 46
    3164:	08 95       	ret

00003166 <_ZN8SPIClass14endTransactionEv>:
    3166:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <_ZN8SPIClass13interruptModeE>
    316a:	88 23       	and	r24, r24
    316c:	61 f0       	breq	.+24     	; 0x3186 <_ZN8SPIClass14endTransactionEv+0x20>
    316e:	9f b7       	in	r25, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN8SPIClass13interruptModeE>
    3176:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <_ZN8SPIClass13interruptSaveE>
    317a:	21 30       	cpi	r18, 0x01	; 1
    317c:	19 f4       	brne	.+6      	; 0x3184 <_ZN8SPIClass14endTransactionEv+0x1e>
    317e:	8d bb       	out	0x1d, r24	; 29
    3180:	9f bf       	out	0x3f, r25	; 63
    3182:	08 95       	ret
    3184:	8f bf       	out	0x3f, r24	; 63
    3186:	08 95       	ret

00003188 <_ZN16Adafruit_SSD1306C1Ehhaaaaa>:
    3188:	af 92       	push	r10
    318a:	cf 92       	push	r12
    318c:	ef 92       	push	r14
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	ec 01       	movw	r28, r24
    3198:	12 2f       	mov	r17, r18
    319a:	50 e0       	ldi	r21, 0x00	; 0
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_ZN12Adafruit_GFXC1Eii>
    31a2:	81 e6       	ldi	r24, 0x61	; 97
    31a4:	91 e0       	ldi	r25, 0x01	; 1
    31a6:	99 83       	std	Y+1, r25	; 0x01
    31a8:	88 83       	st	Y, r24
    31aa:	1c 8e       	std	Y+28, r1	; 0x1c
    31ac:	1b 8e       	std	Y+27, r1	; 0x1b
    31ae:	1e 8e       	std	Y+30, r1	; 0x1e
    31b0:	1d 8e       	std	Y+29, r1	; 0x1d
    31b2:	18 a2       	std	Y+32, r1	; 0x20
    31b4:	1f 8e       	std	Y+31, r1	; 0x1f
    31b6:	1c a3       	std	Y+36, r17	; 0x24
    31b8:	0d a3       	std	Y+37, r16	; 0x25
    31ba:	ee a2       	std	Y+38, r14	; 0x26
    31bc:	af a2       	std	Y+39, r10	; 0x27
    31be:	c8 a6       	std	Y+40, r12	; 0x28
    31c0:	80 e5       	ldi	r24, 0x50	; 80
    31c2:	8d ab       	std	Y+53, r24	; 0x35
    31c4:	1e aa       	std	Y+54, r1	; 0x36
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ef 90       	pop	r14
    31d0:	cf 90       	pop	r12
    31d2:	af 90       	pop	r10
    31d4:	08 95       	ret

000031d6 <_ZN16Adafruit_SSD1306D1Ev>:
    31d6:	21 e6       	ldi	r18, 0x61	; 97
    31d8:	31 e0       	ldi	r19, 0x01	; 1
    31da:	fc 01       	movw	r30, r24
    31dc:	31 83       	std	Z+1, r19	; 0x01
    31de:	20 83       	st	Z, r18
    31e0:	87 8d       	ldd	r24, Z+31	; 0x1f
    31e2:	90 a1       	ldd	r25, Z+32	; 0x20
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	11 f0       	breq	.+4      	; 0x31ec <_ZN16Adafruit_SSD1306D1Ev+0x16>
    31e8:	0c 94 ef 22 	jmp	0x45de	; 0x45de <free>
    31ec:	08 95       	ret

000031ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	fc 01       	movw	r30, r24
    31f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    31f8:	96 8d       	ldd	r25, Z+30	; 0x1e
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	19 f1       	breq	.+70     	; 0x3244 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    31fe:	16 2f       	mov	r17, r22
    3200:	ef 01       	movw	r28, r30
    3202:	61 a1       	ldd	r22, Z+33	; 0x21
    3204:	06 2e       	mov	r0, r22
    3206:	00 0c       	add	r0, r0
    3208:	77 0b       	sbc	r23, r23
    320a:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <_ZN7TwoWire17beginTransmissionEi>
    320e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3212:	dc 01       	movw	r26, r24
    3214:	ed 91       	ld	r30, X+
    3216:	fc 91       	ld	r31, X
    3218:	01 90       	ld	r0, Z+
    321a:	f0 81       	ld	r31, Z
    321c:	e0 2d       	mov	r30, r0
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	09 95       	icall
    3222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3226:	dc 01       	movw	r26, r24
    3228:	ed 91       	ld	r30, X+
    322a:	fc 91       	ld	r31, X
    322c:	01 90       	ld	r0, Z+
    322e:	f0 81       	ld	r31, Z
    3230:	e0 2d       	mov	r30, r0
    3232:	61 2f       	mov	r22, r17
    3234:	09 95       	icall
    3236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3238:	9e 8d       	ldd	r25, Y+30	; 0x1e
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <_ZN7TwoWire15endTransmissionEv>
    3244:	a5 a5       	ldd	r26, Z+45	; 0x2d
    3246:	b6 a5       	ldd	r27, Z+46	; 0x2e
    3248:	9c 91       	ld	r25, X
    324a:	83 a9       	ldd	r24, Z+51	; 0x33
    324c:	80 95       	com	r24
    324e:	89 23       	and	r24, r25
    3250:	8c 93       	st	X, r24
    3252:	83 8d       	ldd	r24, Z+27	; 0x1b
    3254:	94 8d       	ldd	r25, Z+28	; 0x1c
    3256:	89 2b       	or	r24, r25
    3258:	31 f0       	breq	.+12     	; 0x3266 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    325a:	86 2f       	mov	r24, r22
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <_ZN8SPIClass8transferEh>
    3266:	28 e0       	ldi	r18, 0x08	; 8
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	80 e8       	ldi	r24, 0x80	; 128
    326c:	a1 a5       	ldd	r26, Z+41	; 0x29
    326e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3270:	91 a9       	ldd	r25, Z+49	; 0x31
    3272:	46 2f       	mov	r20, r22
    3274:	48 23       	and	r20, r24
    3276:	19 f0       	breq	.+6      	; 0x327e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    3278:	4c 91       	ld	r20, X
    327a:	94 2b       	or	r25, r20
    327c:	03 c0       	rjmp	.+6      	; 0x3284 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    327e:	4c 91       	ld	r20, X
    3280:	90 95       	com	r25
    3282:	94 23       	and	r25, r20
    3284:	9c 93       	st	X, r25
    3286:	a3 a5       	ldd	r26, Z+43	; 0x2b
    3288:	b4 a5       	ldd	r27, Z+44	; 0x2c
    328a:	4c 91       	ld	r20, X
    328c:	92 a9       	ldd	r25, Z+50	; 0x32
    328e:	94 2b       	or	r25, r20
    3290:	9c 93       	st	X, r25
    3292:	a3 a5       	ldd	r26, Z+43	; 0x2b
    3294:	b4 a5       	ldd	r27, Z+44	; 0x2c
    3296:	4c 91       	ld	r20, X
    3298:	92 a9       	ldd	r25, Z+50	; 0x32
    329a:	90 95       	com	r25
    329c:	94 23       	and	r25, r20
    329e:	9c 93       	st	X, r25
    32a0:	86 95       	lsr	r24
    32a2:	21 50       	subi	r18, 0x01	; 1
    32a4:	31 09       	sbc	r19, r1
    32a6:	11 f7       	brne	.-60     	; 0x326c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	1f 91       	pop	r17
    32ae:	08 95       	ret

000032b0 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ec 01       	movw	r28, r24
    32b8:	16 2f       	mov	r17, r22
    32ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	39 f0       	breq	.+14     	; 0x32d0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    32c2:	4f a9       	ldd	r20, Y+55	; 0x37
    32c4:	58 ad       	ldd	r21, Y+56	; 0x38
    32c6:	69 ad       	ldd	r22, Y+57	; 0x39
    32c8:	7a ad       	ldd	r23, Y+58	; 0x3a
    32ca:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <_ZN7TwoWire8setClockEm>
    32ce:	0f c0       	rjmp	.+30     	; 0x32ee <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    32d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d4:	89 2b       	or	r24, r25
    32d6:	21 f0       	breq	.+8      	; 0x32e0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    32d8:	8d a9       	ldd	r24, Y+53	; 0x35
    32da:	9e a9       	ldd	r25, Y+54	; 0x36
    32dc:	0e 94 92 18 	call	0x3124	; 0x3124 <_ZN8SPIClass16beginTransactionE11SPISettings>
    32e0:	ef a5       	ldd	r30, Y+47	; 0x2f
    32e2:	f8 a9       	ldd	r31, Y+48	; 0x30
    32e4:	90 81       	ld	r25, Z
    32e6:	8c a9       	ldd	r24, Y+52	; 0x34
    32e8:	80 95       	com	r24
    32ea:	89 23       	and	r24, r25
    32ec:	80 83       	st	Z, r24
    32ee:	11 11       	cpse	r17, r1
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    32f2:	66 ea       	ldi	r22, 0xA6	; 166
    32f4:	01 c0       	rjmp	.+2      	; 0x32f8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    32f6:	67 ea       	ldi	r22, 0xA7	; 167
    32f8:	ce 01       	movw	r24, r28
    32fa:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    32fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3300:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	49 f0       	breq	.+18     	; 0x3318 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    3306:	4b ad       	ldd	r20, Y+59	; 0x3b
    3308:	5c ad       	ldd	r21, Y+60	; 0x3c
    330a:	6d ad       	ldd	r22, Y+61	; 0x3d
    330c:	7e ad       	ldd	r23, Y+62	; 0x3e
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <_ZN7TwoWire8setClockEm>
    3318:	ef a5       	ldd	r30, Y+47	; 0x2f
    331a:	f8 a9       	ldd	r31, Y+48	; 0x30
    331c:	90 81       	ld	r25, Z
    331e:	8c a9       	ldd	r24, Y+52	; 0x34
    3320:	89 2b       	or	r24, r25
    3322:	80 83       	st	Z, r24
    3324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3328:	89 2b       	or	r24, r25
    332a:	29 f0       	breq	.+10     	; 0x3336 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <_ZN8SPIClass14endTransactionEv>
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	08 95       	ret

0000333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	ec 01       	movw	r28, r24
    334e:	d6 2e       	mov	r13, r22
    3350:	07 2f       	mov	r16, r23
    3352:	14 2f       	mov	r17, r20
    3354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3356:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	09 f4       	brne	.+2      	; 0x335e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
    335c:	48 c0       	rjmp	.+144    	; 0x33ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb0>
    335e:	69 a1       	ldd	r22, Y+33	; 0x21
    3360:	06 2e       	mov	r0, r22
    3362:	00 0c       	add	r0, r0
    3364:	77 0b       	sbc	r23, r23
    3366:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <_ZN7TwoWire17beginTransmissionEi>
    336a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    336c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    336e:	dc 01       	movw	r26, r24
    3370:	ed 91       	ld	r30, X+
    3372:	fc 91       	ld	r31, X
    3374:	01 90       	ld	r0, Z+
    3376:	f0 81       	ld	r31, Z
    3378:	e0 2d       	mov	r30, r0
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	09 95       	icall
    337e:	ed 2c       	mov	r14, r13
    3380:	f0 2e       	mov	r15, r16
    3382:	01 e0       	ldi	r16, 0x01	; 1
    3384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3388:	11 23       	and	r17, r17
    338a:	41 f1       	breq	.+80     	; 0x33dc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x9e>
    338c:	00 32       	cpi	r16, 0x20	; 32
    338e:	a8 f0       	brcs	.+42     	; 0x33ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    3390:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <_ZN7TwoWire15endTransmissionEv>
    3394:	69 a1       	ldd	r22, Y+33	; 0x21
    3396:	06 2e       	mov	r0, r22
    3398:	00 0c       	add	r0, r0
    339a:	77 0b       	sbc	r23, r23
    339c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    339e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33a0:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <_ZN7TwoWire17beginTransmissionEi>
    33a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33a8:	dc 01       	movw	r26, r24
    33aa:	ed 91       	ld	r30, X+
    33ac:	fc 91       	ld	r31, X
    33ae:	01 90       	ld	r0, Z+
    33b0:	f0 81       	ld	r31, Z
    33b2:	e0 2d       	mov	r30, r0
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	09 95       	icall
    33b8:	01 e0       	ldi	r16, 0x01	; 1
    33ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33be:	f7 01       	movw	r30, r14
    33c0:	64 91       	lpm	r22, Z
    33c2:	dc 01       	movw	r26, r24
    33c4:	ed 91       	ld	r30, X+
    33c6:	fc 91       	ld	r31, X
    33c8:	01 90       	ld	r0, Z+
    33ca:	f0 81       	ld	r31, Z
    33cc:	e0 2d       	mov	r30, r0
    33ce:	09 95       	icall
    33d0:	0f 5f       	subi	r16, 0xFF	; 255
    33d2:	11 50       	subi	r17, 0x01	; 1
    33d4:	f7 01       	movw	r30, r14
    33d6:	31 96       	adiw	r30, 0x01	; 1
    33d8:	7f 01       	movw	r14, r30
    33da:	d4 cf       	rjmp	.-88     	; 0x3384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	df 90       	pop	r13
    33ea:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <_ZN7TwoWire15endTransmissionEv>
    33ee:	ed a5       	ldd	r30, Y+45	; 0x2d
    33f0:	fe a5       	ldd	r31, Y+46	; 0x2e
    33f2:	90 81       	ld	r25, Z
    33f4:	8b a9       	ldd	r24, Y+51	; 0x33
    33f6:	80 95       	com	r24
    33f8:	89 23       	and	r24, r25
    33fa:	80 83       	st	Z, r24
    33fc:	e6 2e       	mov	r14, r22
    33fe:	f7 2e       	mov	r15, r23
    3400:	11 23       	and	r17, r17
    3402:	79 f1       	breq	.+94     	; 0x3462 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x124>
    3404:	f7 01       	movw	r30, r14
    3406:	84 91       	lpm	r24, Z
    3408:	2b 8d       	ldd	r18, Y+27	; 0x1b
    340a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    340c:	23 2b       	or	r18, r19
    340e:	39 f0       	breq	.+14     	; 0x341e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xe0>
    3410:	0e 94 ac 18 	call	0x3158	; 0x3158 <_ZN8SPIClass8transferEh>
    3414:	11 50       	subi	r17, 0x01	; 1
    3416:	c7 01       	movw	r24, r14
    3418:	01 96       	adiw	r24, 0x01	; 1
    341a:	7c 01       	movw	r14, r24
    341c:	f1 cf       	rjmp	.-30     	; 0x3400 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc2>
    341e:	28 e0       	ldi	r18, 0x08	; 8
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	e9 a5       	ldd	r30, Y+41	; 0x29
    3426:	fa a5       	ldd	r31, Y+42	; 0x2a
    3428:	99 a9       	ldd	r25, Y+49	; 0x31
    342a:	58 2f       	mov	r21, r24
    342c:	54 23       	and	r21, r20
    342e:	19 f0       	breq	.+6      	; 0x3436 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    3430:	50 81       	ld	r21, Z
    3432:	95 2b       	or	r25, r21
    3434:	03 c0       	rjmp	.+6      	; 0x343c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    3436:	50 81       	ld	r21, Z
    3438:	90 95       	com	r25
    343a:	95 23       	and	r25, r21
    343c:	90 83       	st	Z, r25
    343e:	eb a5       	ldd	r30, Y+43	; 0x2b
    3440:	fc a5       	ldd	r31, Y+44	; 0x2c
    3442:	50 81       	ld	r21, Z
    3444:	9a a9       	ldd	r25, Y+50	; 0x32
    3446:	95 2b       	or	r25, r21
    3448:	90 83       	st	Z, r25
    344a:	eb a5       	ldd	r30, Y+43	; 0x2b
    344c:	fc a5       	ldd	r31, Y+44	; 0x2c
    344e:	50 81       	ld	r21, Z
    3450:	9a a9       	ldd	r25, Y+50	; 0x32
    3452:	90 95       	com	r25
    3454:	95 23       	and	r25, r21
    3456:	90 83       	st	Z, r25
    3458:	46 95       	lsr	r20
    345a:	21 50       	subi	r18, 0x01	; 1
    345c:	31 09       	sbc	r19, r1
    345e:	11 f7       	brne	.-60     	; 0x3424 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xe6>
    3460:	d9 cf       	rjmp	.-78     	; 0x3414 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xd6>
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ff 90       	pop	r15
    346c:	ef 90       	pop	r14
    346e:	df 90       	pop	r13
    3470:	08 95       	ret

00003472 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    3472:	fc 01       	movw	r30, r24
    3474:	86 81       	ldd	r24, Z+6	; 0x06
    3476:	97 81       	ldd	r25, Z+7	; 0x07
    3478:	9c 01       	movw	r18, r24
    347a:	29 5f       	subi	r18, 0xF9	; 249
    347c:	3f 4f       	sbci	r19, 0xFF	; 255
    347e:	37 ff       	sbrs	r19, 7
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    3482:	29 5f       	subi	r18, 0xF9	; 249
    3484:	3f 4f       	sbci	r19, 0xFF	; 255
    3486:	83 e0       	ldi	r24, 0x03	; 3
    3488:	35 95       	asr	r19
    348a:	27 95       	ror	r18
    348c:	8a 95       	dec	r24
    348e:	e1 f7       	brne	.-8      	; 0x3488 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    3490:	84 81       	ldd	r24, Z+4	; 0x04
    3492:	95 81       	ldd	r25, Z+5	; 0x05
    3494:	28 9f       	mul	r18, r24
    3496:	a0 01       	movw	r20, r0
    3498:	29 9f       	mul	r18, r25
    349a:	50 0d       	add	r21, r0
    349c:	38 9f       	mul	r19, r24
    349e:	50 0d       	add	r21, r0
    34a0:	11 24       	eor	r1, r1
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	70 e0       	ldi	r23, 0x00	; 0
    34a6:	87 8d       	ldd	r24, Z+31	; 0x1f
    34a8:	90 a1       	ldd	r25, Z+32	; 0x20
    34aa:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <memset>

000034ae <_ZN16Adafruit_SSD13065beginEhhbb>:
    34ae:	8f 92       	push	r8
    34b0:	9f 92       	push	r9
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	ec 01       	movw	r28, r24
    34c8:	86 2e       	mov	r8, r22
    34ca:	b4 2e       	mov	r11, r20
    34cc:	a2 2e       	mov	r10, r18
    34ce:	90 2e       	mov	r9, r16
    34d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34d2:	98 a1       	ldd	r25, Y+32	; 0x20
    34d4:	89 2b       	or	r24, r25
    34d6:	e9 f4       	brne	.+58     	; 0x3512 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    34d8:	2e 81       	ldd	r18, Y+6	; 0x06
    34da:	3f 81       	ldd	r19, Y+7	; 0x07
    34dc:	c9 01       	movw	r24, r18
    34de:	07 96       	adiw	r24, 0x07	; 7
    34e0:	97 fd       	sbrc	r25, 7
    34e2:	07 96       	adiw	r24, 0x07	; 7
    34e4:	23 e0       	ldi	r18, 0x03	; 3
    34e6:	95 95       	asr	r25
    34e8:	87 95       	ror	r24
    34ea:	2a 95       	dec	r18
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    34ee:	2c 81       	ldd	r18, Y+4	; 0x04
    34f0:	3d 81       	ldd	r19, Y+5	; 0x05
    34f2:	ac 01       	movw	r20, r24
    34f4:	42 9f       	mul	r20, r18
    34f6:	c0 01       	movw	r24, r0
    34f8:	43 9f       	mul	r20, r19
    34fa:	90 0d       	add	r25, r0
    34fc:	52 9f       	mul	r21, r18
    34fe:	90 0d       	add	r25, r0
    3500:	11 24       	eor	r1, r1
    3502:	0e 94 57 22 	call	0x44ae	; 0x44ae <malloc>
    3506:	98 a3       	std	Y+32, r25	; 0x20
    3508:	8f 8f       	std	Y+31, r24	; 0x1f
    350a:	89 2b       	or	r24, r25
    350c:	11 f4       	brne	.+4      	; 0x3512 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	95 c1       	rjmp	.+810    	; 0x383c <_ZN16Adafruit_SSD13065beginEhhbb+0x38e>
    3512:	ce 01       	movw	r24, r28
    3514:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN16Adafruit_SSD130612clearDisplayEv>
    3518:	8e 81       	ldd	r24, Y+6	; 0x06
    351a:	9f 81       	ldd	r25, Y+7	; 0x07
    351c:	6c 81       	ldd	r22, Y+4	; 0x04
    351e:	7d 81       	ldd	r23, Y+5	; 0x05
    3520:	81 32       	cpi	r24, 0x21	; 33
    3522:	91 05       	cpc	r25, r1
    3524:	e4 f0       	brlt	.+56     	; 0x355e <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    3526:	ac 01       	movw	r20, r24
    3528:	40 54       	subi	r20, 0x40	; 64
    352a:	51 09       	sbc	r21, r1
    352c:	57 ff       	sbrs	r21, 7
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    3530:	4f 5f       	subi	r20, 0xFF	; 255
    3532:	5f 4f       	sbci	r21, 0xFF	; 255
    3534:	55 95       	asr	r21
    3536:	47 95       	ror	r20
    3538:	62 55       	subi	r22, 0x52	; 82
    353a:	71 09       	sbc	r23, r1
    353c:	77 ff       	sbrs	r23, 7
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    3540:	6f 5f       	subi	r22, 0xFF	; 255
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	75 95       	asr	r23
    3546:	67 95       	ror	r22
    3548:	cc 24       	eor	r12, r12
    354a:	c3 94       	inc	r12
    354c:	d1 2c       	mov	r13, r1
    354e:	80 e4       	ldi	r24, 0x40	; 64
    3550:	e8 2e       	mov	r14, r24
    3552:	f1 2c       	mov	r15, r1
    3554:	02 e5       	ldi	r16, 0x52	; 82
    3556:	10 e0       	ldi	r17, 0x00	; 0
    3558:	25 e5       	ldi	r18, 0x55	; 85
    355a:	38 e0       	ldi	r19, 0x08	; 8
    355c:	1b c0       	rjmp	.+54     	; 0x3594 <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    355e:	ac 01       	movw	r20, r24
    3560:	40 52       	subi	r20, 0x20	; 32
    3562:	51 09       	sbc	r21, r1
    3564:	57 ff       	sbrs	r21, 7
    3566:	02 c0       	rjmp	.+4      	; 0x356c <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    3568:	4f 5f       	subi	r20, 0xFF	; 255
    356a:	5f 4f       	sbci	r21, 0xFF	; 255
    356c:	55 95       	asr	r21
    356e:	47 95       	ror	r20
    3570:	63 57       	subi	r22, 0x73	; 115
    3572:	71 09       	sbc	r23, r1
    3574:	77 ff       	sbrs	r23, 7
    3576:	02 c0       	rjmp	.+4      	; 0x357c <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    3578:	6f 5f       	subi	r22, 0xFF	; 255
    357a:	7f 4f       	sbci	r23, 0xFF	; 255
    357c:	75 95       	asr	r23
    357e:	67 95       	ror	r22
    3580:	cc 24       	eor	r12, r12
    3582:	c3 94       	inc	r12
    3584:	d1 2c       	mov	r13, r1
    3586:	a0 e2       	ldi	r26, 0x20	; 32
    3588:	ea 2e       	mov	r14, r26
    358a:	f1 2c       	mov	r15, r1
    358c:	03 e7       	ldi	r16, 0x73	; 115
    358e:	10 e0       	ldi	r17, 0x00	; 0
    3590:	25 e7       	ldi	r18, 0x75	; 117
    3592:	36 e0       	ldi	r19, 0x06	; 6
    3594:	ce 01       	movw	r24, r28
    3596:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    359a:	8a a2       	std	Y+34, r8	; 0x22
    359c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    359e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	99 f0       	breq	.+38     	; 0x35ca <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    35a4:	b1 10       	cpse	r11, r1
    35a6:	07 c0       	rjmp	.+14     	; 0x35b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    35a8:	2e 81       	ldd	r18, Y+6	; 0x06
    35aa:	3f 81       	ldd	r19, Y+7	; 0x07
    35ac:	20 32       	cpi	r18, 0x20	; 32
    35ae:	31 05       	cpc	r19, r1
    35b0:	21 f4       	brne	.+8      	; 0x35ba <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    35b2:	2c e3       	ldi	r18, 0x3C	; 60
    35b4:	03 c0       	rjmp	.+6      	; 0x35bc <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    35b6:	2b 2d       	mov	r18, r11
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    35ba:	2d e3       	ldi	r18, 0x3D	; 61
    35bc:	29 a3       	std	Y+33, r18	; 0x21
    35be:	99 20       	and	r9, r9
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    35c2:	39 c1       	rjmp	.+626    	; 0x3836 <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    35c4:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_ZN7TwoWire5beginEv>
    35c8:	79 c0       	rjmp	.+242    	; 0x36bc <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    35ca:	61 e0       	ldi	r22, 0x01	; 1
    35cc:	8e a1       	ldd	r24, Y+38	; 0x26
    35ce:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
    35d2:	61 e0       	ldi	r22, 0x01	; 1
    35d4:	8f a1       	ldd	r24, Y+39	; 0x27
    35d6:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
    35da:	8e a1       	ldd	r24, Y+38	; 0x26
    35dc:	08 2e       	mov	r0, r24
    35de:	00 0c       	add	r0, r0
    35e0:	99 0b       	sbc	r25, r25
    35e2:	fc 01       	movw	r30, r24
    35e4:	ee 5e       	subi	r30, 0xEE	; 238
    35e6:	fe 4f       	sbci	r31, 0xFE	; 254
    35e8:	e4 91       	lpm	r30, Z
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	ee 0f       	add	r30, r30
    35ee:	ff 1f       	adc	r31, r31
    35f0:	e0 5d       	subi	r30, 0xD0	; 208
    35f2:	fe 4f       	sbci	r31, 0xFE	; 254
    35f4:	25 91       	lpm	r18, Z+
    35f6:	34 91       	lpm	r19, Z
    35f8:	3e a7       	std	Y+46, r19	; 0x2e
    35fa:	2d a7       	std	Y+45, r18	; 0x2d
    35fc:	fc 01       	movw	r30, r24
    35fe:	e2 50       	subi	r30, 0x02	; 2
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	e4 91       	lpm	r30, Z
    3604:	eb ab       	std	Y+51, r30	; 0x33
    3606:	8f a1       	ldd	r24, Y+39	; 0x27
    3608:	08 2e       	mov	r0, r24
    360a:	00 0c       	add	r0, r0
    360c:	99 0b       	sbc	r25, r25
    360e:	fc 01       	movw	r30, r24
    3610:	ee 5e       	subi	r30, 0xEE	; 238
    3612:	fe 4f       	sbci	r31, 0xFE	; 254
    3614:	e4 91       	lpm	r30, Z
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	ee 0f       	add	r30, r30
    361a:	ff 1f       	adc	r31, r31
    361c:	e0 5d       	subi	r30, 0xD0	; 208
    361e:	fe 4f       	sbci	r31, 0xFE	; 254
    3620:	a5 91       	lpm	r26, Z+
    3622:	b4 91       	lpm	r27, Z
    3624:	b8 ab       	std	Y+48, r27	; 0x30
    3626:	af a7       	std	Y+47, r26	; 0x2f
    3628:	fc 01       	movw	r30, r24
    362a:	e2 50       	subi	r30, 0x02	; 2
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	e4 91       	lpm	r30, Z
    3630:	ec ab       	std	Y+52, r30	; 0x34
    3632:	8c 91       	ld	r24, X
    3634:	e8 2b       	or	r30, r24
    3636:	ec 93       	st	X, r30
    3638:	8b 8d       	ldd	r24, Y+27	; 0x1b
    363a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    363c:	89 2b       	or	r24, r25
    363e:	31 f0       	breq	.+12     	; 0x364c <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    3640:	99 20       	and	r9, r9
    3642:	09 f4       	brne	.+2      	; 0x3646 <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    3644:	3b c0       	rjmp	.+118    	; 0x36bc <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    3646:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_ZN8SPIClass5beginEv>
    364a:	38 c0       	rjmp	.+112    	; 0x36bc <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    364c:	61 e0       	ldi	r22, 0x01	; 1
    364e:	8c a1       	ldd	r24, Y+36	; 0x24
    3650:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
    3654:	61 e0       	ldi	r22, 0x01	; 1
    3656:	8d a1       	ldd	r24, Y+37	; 0x25
    3658:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
    365c:	8c a1       	ldd	r24, Y+36	; 0x24
    365e:	08 2e       	mov	r0, r24
    3660:	00 0c       	add	r0, r0
    3662:	99 0b       	sbc	r25, r25
    3664:	fc 01       	movw	r30, r24
    3666:	ee 5e       	subi	r30, 0xEE	; 238
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	e4 91       	lpm	r30, Z
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	ee 0f       	add	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	e0 5d       	subi	r30, 0xD0	; 208
    3674:	fe 4f       	sbci	r31, 0xFE	; 254
    3676:	25 91       	lpm	r18, Z+
    3678:	34 91       	lpm	r19, Z
    367a:	3a a7       	std	Y+42, r19	; 0x2a
    367c:	29 a7       	std	Y+41, r18	; 0x29
    367e:	fc 01       	movw	r30, r24
    3680:	e2 50       	subi	r30, 0x02	; 2
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	e4 91       	lpm	r30, Z
    3686:	e9 ab       	std	Y+49, r30	; 0x31
    3688:	8d a1       	ldd	r24, Y+37	; 0x25
    368a:	08 2e       	mov	r0, r24
    368c:	00 0c       	add	r0, r0
    368e:	99 0b       	sbc	r25, r25
    3690:	fc 01       	movw	r30, r24
    3692:	ee 5e       	subi	r30, 0xEE	; 238
    3694:	fe 4f       	sbci	r31, 0xFE	; 254
    3696:	e4 91       	lpm	r30, Z
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	ee 0f       	add	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	e0 5d       	subi	r30, 0xD0	; 208
    36a0:	fe 4f       	sbci	r31, 0xFE	; 254
    36a2:	a5 91       	lpm	r26, Z+
    36a4:	b4 91       	lpm	r27, Z
    36a6:	bc a7       	std	Y+44, r27	; 0x2c
    36a8:	ab a7       	std	Y+43, r26	; 0x2b
    36aa:	fc 01       	movw	r30, r24
    36ac:	e2 50       	subi	r30, 0x02	; 2
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	e4 91       	lpm	r30, Z
    36b2:	ea ab       	std	Y+50, r30	; 0x32
    36b4:	8c 91       	ld	r24, X
    36b6:	e0 95       	com	r30
    36b8:	e8 23       	and	r30, r24
    36ba:	ec 93       	st	X, r30
    36bc:	aa 20       	and	r10, r10
    36be:	f1 f0       	breq	.+60     	; 0x36fc <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    36c0:	88 a5       	ldd	r24, Y+40	; 0x28
    36c2:	87 fd       	sbrc	r24, 7
    36c4:	1b c0       	rjmp	.+54     	; 0x36fc <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
    36cc:	61 e0       	ldi	r22, 0x01	; 1
    36ce:	88 a5       	ldd	r24, Y+40	; 0x28
    36d0:	0e 94 0a 11 	call	0x2214	; 0x2214 <digitalWrite>
    36d4:	61 e0       	ldi	r22, 0x01	; 1
    36d6:	70 e0       	ldi	r23, 0x00	; 0
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	0e 94 06 10 	call	0x200c	; 0x200c <delay>
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	88 a5       	ldd	r24, Y+40	; 0x28
    36e4:	0e 94 0a 11 	call	0x2214	; 0x2214 <digitalWrite>
    36e8:	6a e0       	ldi	r22, 0x0A	; 10
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 06 10 	call	0x200c	; 0x200c <delay>
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	88 a5       	ldd	r24, Y+40	; 0x28
    36f8:	0e 94 0a 11 	call	0x2214	; 0x2214 <digitalWrite>
    36fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	39 f0       	breq	.+14     	; 0x3712 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    3704:	4f a9       	ldd	r20, Y+55	; 0x37
    3706:	58 ad       	ldd	r21, Y+56	; 0x38
    3708:	69 ad       	ldd	r22, Y+57	; 0x39
    370a:	7a ad       	ldd	r23, Y+58	; 0x3a
    370c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <_ZN7TwoWire8setClockEm>
    3710:	0f c0       	rjmp	.+30     	; 0x3730 <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    3712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3716:	89 2b       	or	r24, r25
    3718:	21 f0       	breq	.+8      	; 0x3722 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    371a:	8d a9       	ldd	r24, Y+53	; 0x35
    371c:	9e a9       	ldd	r25, Y+54	; 0x36
    371e:	0e 94 92 18 	call	0x3124	; 0x3124 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3722:	ef a5       	ldd	r30, Y+47	; 0x2f
    3724:	f8 a9       	ldd	r31, Y+48	; 0x30
    3726:	90 81       	ld	r25, Z
    3728:	8c a9       	ldd	r24, Y+52	; 0x34
    372a:	80 95       	com	r24
    372c:	89 23       	and	r24, r25
    372e:	80 83       	st	Z, r24
    3730:	44 e0       	ldi	r20, 0x04	; 4
    3732:	61 e7       	ldi	r22, 0x71	; 113
    3734:	76 e0       	ldi	r23, 0x06	; 6
    3736:	ce 01       	movw	r24, r28
    3738:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    373c:	6e 81       	ldd	r22, Y+6	; 0x06
    373e:	61 50       	subi	r22, 0x01	; 1
    3740:	ce 01       	movw	r24, r28
    3742:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3746:	44 e0       	ldi	r20, 0x04	; 4
    3748:	6d e6       	ldi	r22, 0x6D	; 109
    374a:	76 e0       	ldi	r23, 0x06	; 6
    374c:	ce 01       	movw	r24, r28
    374e:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3752:	8a a1       	ldd	r24, Y+34	; 0x22
    3754:	81 30       	cpi	r24, 0x01	; 1
    3756:	11 f4       	brne	.+4      	; 0x375c <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    3758:	60 e1       	ldi	r22, 0x10	; 16
    375a:	01 c0       	rjmp	.+2      	; 0x375e <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    375c:	64 e1       	ldi	r22, 0x14	; 20
    375e:	ce 01       	movw	r24, r28
    3760:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    3764:	44 e0       	ldi	r20, 0x04	; 4
    3766:	69 e6       	ldi	r22, 0x69	; 105
    3768:	76 e0       	ldi	r23, 0x06	; 6
    376a:	ce 01       	movw	r24, r28
    376c:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3770:	8c 81       	ldd	r24, Y+4	; 0x04
    3772:	9d 81       	ldd	r25, Y+5	; 0x05
    3774:	80 38       	cpi	r24, 0x80	; 128
    3776:	91 05       	cpc	r25, r1
    3778:	e1 f4       	brne	.+56     	; 0x37b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    377a:	8e 81       	ldd	r24, Y+6	; 0x06
    377c:	9f 81       	ldd	r25, Y+7	; 0x07
    377e:	80 32       	cpi	r24, 0x20	; 32
    3780:	91 05       	cpc	r25, r1
    3782:	39 f4       	brne	.+14     	; 0x3792 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    3784:	44 e0       	ldi	r20, 0x04	; 4
    3786:	65 e6       	ldi	r22, 0x65	; 101
    3788:	76 e0       	ldi	r23, 0x06	; 6
    378a:	ce 01       	movw	r24, r28
    378c:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3790:	26 c0       	rjmp	.+76     	; 0x37de <_ZN16Adafruit_SSD13065beginEhhbb+0x330>
    3792:	80 34       	cpi	r24, 0x40	; 64
    3794:	91 05       	cpc	r25, r1
    3796:	19 f5       	brne	.+70     	; 0x37de <_ZN16Adafruit_SSD13065beginEhhbb+0x330>
    3798:	43 e0       	ldi	r20, 0x03	; 3
    379a:	62 e6       	ldi	r22, 0x62	; 98
    379c:	76 e0       	ldi	r23, 0x06	; 6
    379e:	ce 01       	movw	r24, r28
    37a0:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    37a4:	8a a1       	ldd	r24, Y+34	; 0x22
    37a6:	81 30       	cpi	r24, 0x01	; 1
    37a8:	11 f4       	brne	.+4      	; 0x37ae <_ZN16Adafruit_SSD13065beginEhhbb+0x300>
    37aa:	6f e9       	ldi	r22, 0x9F	; 159
    37ac:	15 c0       	rjmp	.+42     	; 0x37d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x32a>
    37ae:	6f ec       	ldi	r22, 0xCF	; 207
    37b0:	13 c0       	rjmp	.+38     	; 0x37d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x32a>
    37b2:	80 36       	cpi	r24, 0x60	; 96
    37b4:	91 05       	cpc	r25, r1
    37b6:	99 f4       	brne	.+38     	; 0x37de <_ZN16Adafruit_SSD13065beginEhhbb+0x330>
    37b8:	8e 81       	ldd	r24, Y+6	; 0x06
    37ba:	9f 81       	ldd	r25, Y+7	; 0x07
    37bc:	40 97       	sbiw	r24, 0x10	; 16
    37be:	79 f4       	brne	.+30     	; 0x37de <_ZN16Adafruit_SSD13065beginEhhbb+0x330>
    37c0:	43 e0       	ldi	r20, 0x03	; 3
    37c2:	6f e5       	ldi	r22, 0x5F	; 95
    37c4:	76 e0       	ldi	r23, 0x06	; 6
    37c6:	ce 01       	movw	r24, r28
    37c8:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    37cc:	8a a1       	ldd	r24, Y+34	; 0x22
    37ce:	81 30       	cpi	r24, 0x01	; 1
    37d0:	11 f4       	brne	.+4      	; 0x37d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x328>
    37d2:	60 e1       	ldi	r22, 0x10	; 16
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x32a>
    37d6:	6f ea       	ldi	r22, 0xAF	; 175
    37d8:	ce 01       	movw	r24, r28
    37da:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    37de:	69 ed       	ldi	r22, 0xD9	; 217
    37e0:	ce 01       	movw	r24, r28
    37e2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    37e6:	8a a1       	ldd	r24, Y+34	; 0x22
    37e8:	81 30       	cpi	r24, 0x01	; 1
    37ea:	11 f4       	brne	.+4      	; 0x37f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x342>
    37ec:	62 e2       	ldi	r22, 0x22	; 34
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x344>
    37f0:	61 ef       	ldi	r22, 0xF1	; 241
    37f2:	ce 01       	movw	r24, r28
    37f4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    37f8:	46 e0       	ldi	r20, 0x06	; 6
    37fa:	69 e5       	ldi	r22, 0x59	; 89
    37fc:	76 e0       	ldi	r23, 0x06	; 6
    37fe:	ce 01       	movw	r24, r28
    3800:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    3804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3808:	00 97       	sbiw	r24, 0x00	; 0
    380a:	39 f0       	breq	.+14     	; 0x381a <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    380c:	4b ad       	ldd	r20, Y+59	; 0x3b
    380e:	5c ad       	ldd	r21, Y+60	; 0x3c
    3810:	6d ad       	ldd	r22, Y+61	; 0x3d
    3812:	7e ad       	ldd	r23, Y+62	; 0x3e
    3814:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <_ZN7TwoWire8setClockEm>
    3818:	0c c0       	rjmp	.+24     	; 0x3832 <_ZN16Adafruit_SSD13065beginEhhbb+0x384>
    381a:	ef a5       	ldd	r30, Y+47	; 0x2f
    381c:	f8 a9       	ldd	r31, Y+48	; 0x30
    381e:	90 81       	ld	r25, Z
    3820:	8c a9       	ldd	r24, Y+52	; 0x34
    3822:	89 2b       	or	r24, r25
    3824:	80 83       	st	Z, r24
    3826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382a:	89 2b       	or	r24, r25
    382c:	11 f0       	breq	.+4      	; 0x3832 <_ZN16Adafruit_SSD13065beginEhhbb+0x384>
    382e:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN8SPIClass14endTransactionEv>
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	03 c0       	rjmp	.+6      	; 0x383c <_ZN16Adafruit_SSD13065beginEhhbb+0x38e>
    3836:	a1 10       	cpse	r10, r1
    3838:	43 cf       	rjmp	.-378    	; 0x36c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    383a:	64 cf       	rjmp	.-312    	; 0x3704 <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	df 90       	pop	r13
    384a:	cf 90       	pop	r12
    384c:	bf 90       	pop	r11
    384e:	af 90       	pop	r10
    3850:	9f 90       	pop	r9
    3852:	8f 90       	pop	r8
    3854:	08 95       	ret

00003856 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	dc 01       	movw	r26, r24
    3860:	57 fd       	sbrc	r21, 7
    3862:	64 c0       	rjmp	.+200    	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3864:	16 96       	adiw	r26, 0x06	; 6
    3866:	8d 91       	ld	r24, X+
    3868:	9c 91       	ld	r25, X
    386a:	17 97       	sbiw	r26, 0x07	; 7
    386c:	48 17       	cp	r20, r24
    386e:	59 07       	cpc	r21, r25
    3870:	0c f0       	brlt	.+2      	; 0x3874 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    3872:	5c c0       	rjmp	.+184    	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3874:	77 ff       	sbrs	r23, 7
    3876:	04 c0       	rjmp	.+8      	; 0x3880 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    3878:	26 0f       	add	r18, r22
    387a:	37 1f       	adc	r19, r23
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	70 e0       	ldi	r23, 0x00	; 0
    3880:	14 96       	adiw	r26, 0x04	; 4
    3882:	cd 91       	ld	r28, X+
    3884:	dc 91       	ld	r29, X
    3886:	15 97       	sbiw	r26, 0x05	; 5
    3888:	cb 01       	movw	r24, r22
    388a:	82 0f       	add	r24, r18
    388c:	93 1f       	adc	r25, r19
    388e:	c8 17       	cp	r28, r24
    3890:	d9 07       	cpc	r29, r25
    3892:	1c f4       	brge	.+6      	; 0x389a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    3894:	9e 01       	movw	r18, r28
    3896:	26 1b       	sub	r18, r22
    3898:	37 0b       	sbc	r19, r23
    389a:	12 16       	cp	r1, r18
    389c:	13 06       	cpc	r1, r19
    389e:	0c f0       	brlt	.+2      	; 0x38a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    38a0:	45 c0       	rjmp	.+138    	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    38a2:	fa 01       	movw	r30, r20
    38a4:	57 fd       	sbrc	r21, 7
    38a6:	37 96       	adiw	r30, 0x07	; 7
    38a8:	cf 01       	movw	r24, r30
    38aa:	e3 e0       	ldi	r30, 0x03	; 3
    38ac:	95 95       	asr	r25
    38ae:	87 95       	ror	r24
    38b0:	ea 95       	dec	r30
    38b2:	e1 f7       	brne	.-8      	; 0x38ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    38b4:	8c 9f       	mul	r24, r28
    38b6:	f0 01       	movw	r30, r0
    38b8:	8d 9f       	mul	r24, r29
    38ba:	f0 0d       	add	r31, r0
    38bc:	9c 9f       	mul	r25, r28
    38be:	f0 0d       	add	r31, r0
    38c0:	11 24       	eor	r1, r1
    38c2:	6e 0f       	add	r22, r30
    38c4:	7f 1f       	adc	r23, r31
    38c6:	5f 96       	adiw	r26, 0x1f	; 31
    38c8:	ed 91       	ld	r30, X+
    38ca:	fc 91       	ld	r31, X
    38cc:	90 97       	sbiw	r26, 0x20	; 32
    38ce:	e6 0f       	add	r30, r22
    38d0:	f7 1f       	adc	r31, r23
    38d2:	47 70       	andi	r20, 0x07	; 7
    38d4:	55 27       	eor	r21, r21
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	01 c0       	rjmp	.+2      	; 0x38de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    38dc:	88 0f       	add	r24, r24
    38de:	4a 95       	dec	r20
    38e0:	ea f7       	brpl	.-6      	; 0x38dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    38e2:	48 2f       	mov	r20, r24
    38e4:	01 30       	cpi	r16, 0x01	; 1
    38e6:	11 05       	cpc	r17, r1
    38e8:	39 f0       	breq	.+14     	; 0x38f8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    38ea:	78 f0       	brcs	.+30     	; 0x390a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    38ec:	02 30       	cpi	r16, 0x02	; 2
    38ee:	11 05       	cpc	r17, r1
    38f0:	e9 f4       	brne	.+58     	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    38f2:	2e 0f       	add	r18, r30
    38f4:	3f 1f       	adc	r19, r31
    38f6:	13 c0       	rjmp	.+38     	; 0x391e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    38f8:	2e 0f       	add	r18, r30
    38fa:	3f 1f       	adc	r19, r31
    38fc:	e2 17       	cp	r30, r18
    38fe:	f3 07       	cpc	r31, r19
    3900:	a9 f0       	breq	.+42     	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3902:	80 81       	ld	r24, Z
    3904:	84 2b       	or	r24, r20
    3906:	81 93       	st	Z+, r24
    3908:	f9 cf       	rjmp	.-14     	; 0x38fc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    390a:	80 95       	com	r24
    390c:	2e 0f       	add	r18, r30
    390e:	3f 1f       	adc	r19, r31
    3910:	e2 17       	cp	r30, r18
    3912:	f3 07       	cpc	r31, r19
    3914:	59 f0       	breq	.+22     	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3916:	90 81       	ld	r25, Z
    3918:	98 23       	and	r25, r24
    391a:	91 93       	st	Z+, r25
    391c:	f9 cf       	rjmp	.-14     	; 0x3910 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    391e:	e2 17       	cp	r30, r18
    3920:	f3 07       	cpc	r31, r19
    3922:	21 f0       	breq	.+8      	; 0x392c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    3924:	80 81       	ld	r24, Z
    3926:	84 27       	eor	r24, r20
    3928:	81 93       	st	Z+, r24
    392a:	f9 cf       	rjmp	.-14     	; 0x391e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	08 95       	ret

00003936 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	ec 01       	movw	r28, r24
    3944:	77 fd       	sbrc	r23, 7
    3946:	a5 c0       	rjmp	.+330    	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3948:	ec 80       	ldd	r14, Y+4	; 0x04
    394a:	fd 80       	ldd	r15, Y+5	; 0x05
    394c:	6e 15       	cp	r22, r14
    394e:	7f 05       	cpc	r23, r15
    3950:	0c f0       	brlt	.+2      	; 0x3954 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    3952:	9f c0       	rjmp	.+318    	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3954:	57 ff       	sbrs	r21, 7
    3956:	04 c0       	rjmp	.+8      	; 0x3960 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    3958:	24 0f       	add	r18, r20
    395a:	35 1f       	adc	r19, r21
    395c:	40 e0       	ldi	r20, 0x00	; 0
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	8e 81       	ldd	r24, Y+6	; 0x06
    3962:	9f 81       	ldd	r25, Y+7	; 0x07
    3964:	fa 01       	movw	r30, r20
    3966:	e2 0f       	add	r30, r18
    3968:	f3 1f       	adc	r31, r19
    396a:	8e 17       	cp	r24, r30
    396c:	9f 07       	cpc	r25, r31
    396e:	1c f4       	brge	.+6      	; 0x3976 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    3970:	9c 01       	movw	r18, r24
    3972:	24 1b       	sub	r18, r20
    3974:	35 0b       	sbc	r19, r21
    3976:	12 16       	cp	r1, r18
    3978:	13 06       	cpc	r1, r19
    397a:	0c f0       	brlt	.+2      	; 0x397e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    397c:	8a c0       	rjmp	.+276    	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    397e:	92 2f       	mov	r25, r18
    3980:	84 2f       	mov	r24, r20
    3982:	86 95       	lsr	r24
    3984:	86 95       	lsr	r24
    3986:	86 95       	lsr	r24
    3988:	8e 9d       	mul	r24, r14
    398a:	d0 01       	movw	r26, r0
    398c:	8f 9d       	mul	r24, r15
    398e:	b0 0d       	add	r27, r0
    3990:	11 24       	eor	r1, r1
    3992:	6a 0f       	add	r22, r26
    3994:	7b 1f       	adc	r23, r27
    3996:	af 8d       	ldd	r26, Y+31	; 0x1f
    3998:	b8 a1       	ldd	r27, Y+32	; 0x20
    399a:	a6 0f       	add	r26, r22
    399c:	b7 1f       	adc	r27, r23
    399e:	47 70       	andi	r20, 0x07	; 7
    39a0:	b1 f1       	breq	.+108    	; 0x3a0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    39a2:	88 e0       	ldi	r24, 0x08	; 8
    39a4:	84 1b       	sub	r24, r20
    39a6:	48 2f       	mov	r20, r24
    39a8:	68 2f       	mov	r22, r24
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	fb 01       	movw	r30, r22
    39ae:	ef 5a       	subi	r30, 0xAF	; 175
    39b0:	f9 4f       	sbci	r31, 0xF9	; 249
    39b2:	e4 91       	lpm	r30, Z
    39b4:	28 17       	cp	r18, r24
    39b6:	98 f4       	brcc	.+38     	; 0x39de <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    39b8:	62 1b       	sub	r22, r18
    39ba:	71 09       	sbc	r23, r1
    39bc:	2f ef       	ldi	r18, 0xFF	; 255
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    39c2:	35 95       	asr	r19
    39c4:	27 95       	ror	r18
    39c6:	6a 95       	dec	r22
    39c8:	e2 f7       	brpl	.-8      	; 0x39c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    39ca:	e2 23       	and	r30, r18
    39cc:	01 30       	cpi	r16, 0x01	; 1
    39ce:	11 05       	cpc	r17, r1
    39d0:	49 f0       	breq	.+18     	; 0x39e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    39d2:	78 f0       	brcs	.+30     	; 0x39f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    39d4:	02 30       	cpi	r16, 0x02	; 2
    39d6:	11 05       	cpc	r17, r1
    39d8:	09 f0       	breq	.+2      	; 0x39dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    39da:	5b c0       	rjmp	.+182    	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    39dc:	0e c0       	rjmp	.+28     	; 0x39fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    39de:	01 30       	cpi	r16, 0x01	; 1
    39e0:	11 05       	cpc	r17, r1
    39e2:	19 f4       	brne	.+6      	; 0x39ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    39e4:	8c 91       	ld	r24, X
    39e6:	e8 2b       	or	r30, r24
    39e8:	0a c0       	rjmp	.+20     	; 0x39fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    39ea:	01 30       	cpi	r16, 0x01	; 1
    39ec:	11 05       	cpc	r17, r1
    39ee:	08 f0       	brcs	.+2      	; 0x39f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    39f0:	49 c0       	rjmp	.+146    	; 0x3a84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    39f2:	e0 95       	com	r30
    39f4:	8c 91       	ld	r24, X
    39f6:	e8 23       	and	r30, r24
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    39fa:	8c 91       	ld	r24, X
    39fc:	e8 27       	eor	r30, r24
    39fe:	ec 93       	st	X, r30
    3a00:	94 17       	cp	r25, r20
    3a02:	08 f4       	brcc	.+2      	; 0x3a06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    3a04:	46 c0       	rjmp	.+140    	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3a06:	2c 81       	ldd	r18, Y+4	; 0x04
    3a08:	3d 81       	ldd	r19, Y+5	; 0x05
    3a0a:	a2 0f       	add	r26, r18
    3a0c:	b3 1f       	adc	r27, r19
    3a0e:	e9 2f       	mov	r30, r25
    3a10:	e4 1b       	sub	r30, r20
    3a12:	e8 30       	cpi	r30, 0x08	; 8
    3a14:	f8 f0       	brcs	.+62     	; 0x3a54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    3a16:	02 30       	cpi	r16, 0x02	; 2
    3a18:	11 05       	cpc	r17, r1
    3a1a:	61 f4       	brne	.+24     	; 0x3a34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    3a1c:	8e 2f       	mov	r24, r30
    3a1e:	9c 91       	ld	r25, X
    3a20:	90 95       	com	r25
    3a22:	9c 93       	st	X, r25
    3a24:	2c 81       	ldd	r18, Y+4	; 0x04
    3a26:	3d 81       	ldd	r19, Y+5	; 0x05
    3a28:	a2 0f       	add	r26, r18
    3a2a:	b3 1f       	adc	r27, r19
    3a2c:	88 50       	subi	r24, 0x08	; 8
    3a2e:	88 30       	cpi	r24, 0x08	; 8
    3a30:	b0 f7       	brcc	.-20     	; 0x3a1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    3a32:	0f c0       	rjmp	.+30     	; 0x3a52 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	01 15       	cp	r16, r1
    3a38:	11 05       	cpc	r17, r1
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	81 95       	neg	r24
    3a40:	9e 2f       	mov	r25, r30
    3a42:	8c 93       	st	X, r24
    3a44:	2c 81       	ldd	r18, Y+4	; 0x04
    3a46:	3d 81       	ldd	r19, Y+5	; 0x05
    3a48:	a2 0f       	add	r26, r18
    3a4a:	b3 1f       	adc	r27, r19
    3a4c:	98 50       	subi	r25, 0x08	; 8
    3a4e:	98 30       	cpi	r25, 0x08	; 8
    3a50:	c0 f7       	brcc	.-16     	; 0x3a42 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    3a52:	e7 70       	andi	r30, 0x07	; 7
    3a54:	ee 23       	and	r30, r30
    3a56:	e9 f0       	breq	.+58     	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	e7 5b       	subi	r30, 0xB7	; 183
    3a5c:	f9 4f       	sbci	r31, 0xF9	; 249
    3a5e:	e4 91       	lpm	r30, Z
    3a60:	01 30       	cpi	r16, 0x01	; 1
    3a62:	11 05       	cpc	r17, r1
    3a64:	39 f0       	breq	.+14     	; 0x3a74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    3a66:	48 f0       	brcs	.+18     	; 0x3a7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    3a68:	02 30       	cpi	r16, 0x02	; 2
    3a6a:	11 05       	cpc	r17, r1
    3a6c:	91 f4       	brne	.+36     	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3a6e:	8c 91       	ld	r24, X
    3a70:	e8 27       	eor	r30, r24
    3a72:	06 c0       	rjmp	.+12     	; 0x3a80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    3a74:	8c 91       	ld	r24, X
    3a76:	e8 2b       	or	r30, r24
    3a78:	03 c0       	rjmp	.+6      	; 0x3a80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    3a7a:	e0 95       	com	r30
    3a7c:	8c 91       	ld	r24, X
    3a7e:	e8 23       	and	r30, r24
    3a80:	ec 93       	st	X, r30
    3a82:	07 c0       	rjmp	.+14     	; 0x3a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    3a84:	02 30       	cpi	r16, 0x02	; 2
    3a86:	11 05       	cpc	r17, r1
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    3a8a:	b7 cf       	rjmp	.-146    	; 0x39fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    3a8c:	ae 0d       	add	r26, r14
    3a8e:	bf 1d       	adc	r27, r15
    3a90:	be cf       	rjmp	.-132    	; 0x3a0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	ff 90       	pop	r15
    3a9c:	ef 90       	pop	r14
    3a9e:	08 95       	ret

00003aa0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    3aa0:	0f 93       	push	r16
    3aa2:	1f 93       	push	r17
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	56 96       	adiw	r26, 0x16	; 22
    3aa8:	ec 91       	ld	r30, X
    3aaa:	56 97       	sbiw	r26, 0x16	; 22
    3aac:	e2 30       	cpi	r30, 0x02	; 2
    3aae:	61 f0       	breq	.+24     	; 0x3ac8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    3ab0:	e3 30       	cpi	r30, 0x03	; 3
    3ab2:	09 f1       	breq	.+66     	; 0x3af6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    3ab4:	e1 30       	cpi	r30, 0x01	; 1
    3ab6:	81 f5       	brne	.+96     	; 0x3b18 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    3ab8:	14 96       	adiw	r26, 0x04	; 4
    3aba:	ed 91       	ld	r30, X+
    3abc:	fc 91       	ld	r31, X
    3abe:	15 97       	sbiw	r26, 0x05	; 5
    3ac0:	e4 1b       	sub	r30, r20
    3ac2:	f5 0b       	sbc	r31, r21
    3ac4:	31 97       	sbiw	r30, 0x01	; 1
    3ac6:	23 c0       	rjmp	.+70     	; 0x3b0e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	14 96       	adiw	r26, 0x04	; 4
    3acc:	ed 91       	ld	r30, X+
    3ace:	fc 91       	ld	r31, X
    3ad0:	15 97       	sbiw	r26, 0x05	; 5
    3ad2:	df 01       	movw	r26, r30
    3ad4:	a6 1b       	sub	r26, r22
    3ad6:	b7 0b       	sbc	r27, r23
    3ad8:	bd 01       	movw	r22, r26
    3ada:	dc 01       	movw	r26, r24
    3adc:	16 96       	adiw	r26, 0x06	; 6
    3ade:	ed 91       	ld	r30, X+
    3ae0:	fc 91       	ld	r31, X
    3ae2:	17 97       	sbiw	r26, 0x07	; 7
    3ae4:	df 01       	movw	r26, r30
    3ae6:	a4 1b       	sub	r26, r20
    3ae8:	b5 0b       	sbc	r27, r21
    3aea:	ad 01       	movw	r20, r26
    3aec:	41 50       	subi	r20, 0x01	; 1
    3aee:	51 09       	sbc	r21, r1
    3af0:	62 1b       	sub	r22, r18
    3af2:	73 0b       	sbc	r23, r19
    3af4:	11 c0       	rjmp	.+34     	; 0x3b18 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    3af6:	fa 01       	movw	r30, r20
    3af8:	dc 01       	movw	r26, r24
    3afa:	16 96       	adiw	r26, 0x06	; 6
    3afc:	4d 91       	ld	r20, X+
    3afe:	5c 91       	ld	r21, X
    3b00:	17 97       	sbiw	r26, 0x07	; 7
    3b02:	da 01       	movw	r26, r20
    3b04:	a6 1b       	sub	r26, r22
    3b06:	b7 0b       	sbc	r27, r23
    3b08:	bd 01       	movw	r22, r26
    3b0a:	62 1b       	sub	r22, r18
    3b0c:	73 0b       	sbc	r23, r19
    3b0e:	ab 01       	movw	r20, r22
    3b10:	bf 01       	movw	r22, r30
    3b12:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    3b18:	0e 94 2b 1c 	call	0x3856	; 0x3856 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	08 95       	ret

00003b22 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    3b22:	0f 93       	push	r16
    3b24:	1f 93       	push	r17
    3b26:	dc 01       	movw	r26, r24
    3b28:	56 96       	adiw	r26, 0x16	; 22
    3b2a:	ec 91       	ld	r30, X
    3b2c:	56 97       	sbiw	r26, 0x16	; 22
    3b2e:	e2 30       	cpi	r30, 0x02	; 2
    3b30:	69 f0       	breq	.+26     	; 0x3b4c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    3b32:	e3 30       	cpi	r30, 0x03	; 3
    3b34:	11 f1       	breq	.+68     	; 0x3b7a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    3b36:	e1 30       	cpi	r30, 0x01	; 1
    3b38:	89 f5       	brne	.+98     	; 0x3b9c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    3b3a:	14 96       	adiw	r26, 0x04	; 4
    3b3c:	ed 91       	ld	r30, X+
    3b3e:	fc 91       	ld	r31, X
    3b40:	15 97       	sbiw	r26, 0x05	; 5
    3b42:	e4 1b       	sub	r30, r20
    3b44:	f5 0b       	sbc	r31, r21
    3b46:	e2 1b       	sub	r30, r18
    3b48:	f3 0b       	sbc	r31, r19
    3b4a:	23 c0       	rjmp	.+70     	; 0x3b92 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	14 96       	adiw	r26, 0x04	; 4
    3b50:	ed 91       	ld	r30, X+
    3b52:	fc 91       	ld	r31, X
    3b54:	15 97       	sbiw	r26, 0x05	; 5
    3b56:	df 01       	movw	r26, r30
    3b58:	a6 1b       	sub	r26, r22
    3b5a:	b7 0b       	sbc	r27, r23
    3b5c:	bd 01       	movw	r22, r26
    3b5e:	61 50       	subi	r22, 0x01	; 1
    3b60:	71 09       	sbc	r23, r1
    3b62:	dc 01       	movw	r26, r24
    3b64:	16 96       	adiw	r26, 0x06	; 6
    3b66:	ed 91       	ld	r30, X+
    3b68:	fc 91       	ld	r31, X
    3b6a:	17 97       	sbiw	r26, 0x07	; 7
    3b6c:	df 01       	movw	r26, r30
    3b6e:	a4 1b       	sub	r26, r20
    3b70:	b5 0b       	sbc	r27, r21
    3b72:	ad 01       	movw	r20, r26
    3b74:	42 1b       	sub	r20, r18
    3b76:	53 0b       	sbc	r21, r19
    3b78:	11 c0       	rjmp	.+34     	; 0x3b9c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    3b7a:	fa 01       	movw	r30, r20
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	16 96       	adiw	r26, 0x06	; 6
    3b80:	4d 91       	ld	r20, X+
    3b82:	5c 91       	ld	r21, X
    3b84:	17 97       	sbiw	r26, 0x07	; 7
    3b86:	da 01       	movw	r26, r20
    3b88:	a6 1b       	sub	r26, r22
    3b8a:	b7 0b       	sbc	r27, r23
    3b8c:	bd 01       	movw	r22, r26
    3b8e:	61 50       	subi	r22, 0x01	; 1
    3b90:	71 09       	sbc	r23, r1
    3b92:	ab 01       	movw	r20, r22
    3b94:	bf 01       	movw	r22, r30
    3b96:	0e 94 2b 1c 	call	0x3856	; 0x3856 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    3b9c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	08 95       	ret

00003ba6 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    3ba6:	cf 92       	push	r12
    3ba8:	df 92       	push	r13
    3baa:	ef 92       	push	r14
    3bac:	ff 92       	push	r15
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	ec 01       	movw	r28, r24
  TRANSACTION_START
    3bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	39 f0       	breq	.+14     	; 0x3bce <_ZN16Adafruit_SSD13067displayEv+0x28>
    3bc0:	4f a9       	ldd	r20, Y+55	; 0x37
    3bc2:	58 ad       	ldd	r21, Y+56	; 0x38
    3bc4:	69 ad       	ldd	r22, Y+57	; 0x39
    3bc6:	7a ad       	ldd	r23, Y+58	; 0x3a
    3bc8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <_ZN7TwoWire8setClockEm>
    3bcc:	0f c0       	rjmp	.+30     	; 0x3bec <_ZN16Adafruit_SSD13067displayEv+0x46>
    3bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd2:	89 2b       	or	r24, r25
    3bd4:	21 f0       	breq	.+8      	; 0x3bde <_ZN16Adafruit_SSD13067displayEv+0x38>
    3bd6:	8d a9       	ldd	r24, Y+53	; 0x35
    3bd8:	9e a9       	ldd	r25, Y+54	; 0x36
    3bda:	0e 94 92 18 	call	0x3124	; 0x3124 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3bde:	ef a5       	ldd	r30, Y+47	; 0x2f
    3be0:	f8 a9       	ldd	r31, Y+48	; 0x30
    3be2:	90 81       	ld	r25, Z
    3be4:	8c a9       	ldd	r24, Y+52	; 0x34
    3be6:	80 95       	com	r24
    3be8:	89 23       	and	r24, r25
    3bea:	80 83       	st	Z, r24
    SSD1306_PAGEADDR,
    0,                         // Page start address
    0xFF,                      // Page end (not really, but works here)
    SSD1306_COLUMNADDR,
    0 };                       // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    3bec:	45 e0       	ldi	r20, 0x05	; 5
    3bee:	64 e4       	ldi	r22, 0x44	; 68
    3bf0:	76 e0       	ldi	r23, 0x06	; 6
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    3bf8:	6c 81       	ldd	r22, Y+4	; 0x04
    3bfa:	61 50       	subi	r22, 0x01	; 1
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    3c02:	2e 81       	ldd	r18, Y+6	; 0x06
    3c04:	3f 81       	ldd	r19, Y+7	; 0x07
    3c06:	c9 01       	movw	r24, r18
    3c08:	07 96       	adiw	r24, 0x07	; 7
    3c0a:	97 fd       	sbrc	r25, 7
    3c0c:	07 96       	adiw	r24, 0x07	; 7
    3c0e:	23 e0       	ldi	r18, 0x03	; 3
    3c10:	95 95       	asr	r25
    3c12:	87 95       	ror	r24
    3c14:	2a 95       	dec	r18
    3c16:	e1 f7       	brne	.-8      	; 0x3c10 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    3c18:	2c 81       	ldd	r18, Y+4	; 0x04
    3c1a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c1c:	82 9f       	mul	r24, r18
    3c1e:	70 01       	movw	r14, r0
    3c20:	83 9f       	mul	r24, r19
    3c22:	f0 0c       	add	r15, r0
    3c24:	92 9f       	mul	r25, r18
    3c26:	f0 0c       	add	r15, r0
    3c28:	11 24       	eor	r1, r1
  uint8_t *ptr   = buffer;
    3c2a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3c2c:	18 a1       	ldd	r17, Y+32	; 0x20
  if(wire) { // I2C
    3c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c32:	e0 0e       	add	r14, r16
    3c34:	f1 1e       	adc	r15, r17
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <_ZN16Adafruit_SSD13067displayEv+0x96>
    3c3a:	3f c0       	rjmp	.+126    	; 0x3cba <_ZN16Adafruit_SSD13067displayEv+0x114>
    wire->beginTransmission(i2caddr);
    3c3c:	69 a1       	ldd	r22, Y+33	; 0x21
    3c3e:	06 2e       	mov	r0, r22
    3c40:	00 0c       	add	r0, r0
    3c42:	77 0b       	sbc	r23, r23
    3c44:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    3c48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	ed 91       	ld	r30, X+
    3c50:	fc 91       	ld	r31, X
    3c52:	01 90       	ld	r0, Z+
    3c54:	f0 81       	ld	r31, Z
    3c56:	e0 2d       	mov	r30, r0
    3c58:	60 e4       	ldi	r22, 0x40	; 64
    3c5a:	09 95       	icall
    3c5c:	68 01       	movw	r12, r16
    uint8_t bytesOut = 1;
    3c5e:	11 e0       	ldi	r17, 0x01	; 1
    3c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while(count--) {
    3c64:	ec 14       	cp	r14, r12
    3c66:	fd 04       	cpc	r15, r13
    3c68:	29 f1       	breq	.+74     	; 0x3cb4 <_ZN16Adafruit_SSD13067displayEv+0x10e>
      if(bytesOut >= WIRE_MAX) {
    3c6a:	10 32       	cpi	r17, 0x20	; 32
    3c6c:	a8 f0       	brcs	.+42     	; 0x3c98 <_ZN16Adafruit_SSD13067displayEv+0xf2>
        wire->endTransmission();
    3c6e:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    3c72:	69 a1       	ldd	r22, Y+33	; 0x21
    3c74:	06 2e       	mov	r0, r22
    3c76:	00 0c       	add	r0, r0
    3c78:	77 0b       	sbc	r23, r23
    3c7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c7e:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    3c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c86:	dc 01       	movw	r26, r24
    3c88:	ed 91       	ld	r30, X+
    3c8a:	fc 91       	ld	r31, X
    3c8c:	01 90       	ld	r0, Z+
    3c8e:	f0 81       	ld	r31, Z
    3c90:	e0 2d       	mov	r30, r0
    3c92:	60 e4       	ldi	r22, 0x40	; 64
    3c94:	09 95       	icall
        bytesOut = 1;
    3c96:	11 e0       	ldi	r17, 0x01	; 1
      }
      WIRE_WRITE(*ptr++);
    3c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c9c:	f6 01       	movw	r30, r12
    3c9e:	61 91       	ld	r22, Z+
    3ca0:	6f 01       	movw	r12, r30
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	ed 91       	ld	r30, X+
    3ca6:	fc 91       	ld	r31, X
    3ca8:	01 90       	ld	r0, Z+
    3caa:	f0 81       	ld	r31, Z
    3cac:	e0 2d       	mov	r30, r0
    3cae:	09 95       	icall
      bytesOut++;
    3cb0:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint8_t bytesOut = 1;
    while(count--) {
    3cb2:	d6 cf       	rjmp	.-84     	; 0x3c60 <_ZN16Adafruit_SSD13067displayEv+0xba>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    3cb4:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <_ZN7TwoWire15endTransmissionEv>
    3cb8:	35 c0       	rjmp	.+106    	; 0x3d24 <_ZN16Adafruit_SSD13067displayEv+0x17e>
  } else { // SPI
    SSD1306_MODE_DATA
    3cba:	ed a5       	ldd	r30, Y+45	; 0x2d
    3cbc:	fe a5       	ldd	r31, Y+46	; 0x2e
    3cbe:	90 81       	ld	r25, Z
    3cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    3cc2:	89 2b       	or	r24, r25
    3cc4:	80 83       	st	Z, r24
    while(count--) SPIwrite(*ptr++);
    3cc6:	0e 15       	cp	r16, r14
    3cc8:	1f 05       	cpc	r17, r15
    3cca:	61 f1       	breq	.+88     	; 0x3d24 <_ZN16Adafruit_SSD13067displayEv+0x17e>
    3ccc:	f8 01       	movw	r30, r16
    3cce:	81 91       	ld	r24, Z+
    3cd0:	8f 01       	movw	r16, r30
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    3cd2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3cd4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3cd6:	23 2b       	or	r18, r19
    3cd8:	19 f0       	breq	.+6      	; 0x3ce0 <_ZN16Adafruit_SSD13067displayEv+0x13a>
    (void)spi->transfer(d);
    3cda:	0e 94 ac 18 	call	0x3158	; 0x3158 <_ZN8SPIClass8transferEh>
    3cde:	f3 cf       	rjmp	.-26     	; 0x3cc6 <_ZN16Adafruit_SSD13067displayEv+0x120>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    3ce0:	28 e0       	ldi	r18, 0x08	; 8
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e8       	ldi	r20, 0x80	; 128
    3ce6:	e9 a5       	ldd	r30, Y+41	; 0x29
    3ce8:	fa a5       	ldd	r31, Y+42	; 0x2a
    3cea:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if(d & bit) *mosiPort |=  mosiPinMask;
    3cec:	58 2f       	mov	r21, r24
    3cee:	54 23       	and	r21, r20
    3cf0:	19 f0       	breq	.+6      	; 0x3cf8 <_ZN16Adafruit_SSD13067displayEv+0x152>
    3cf2:	50 81       	ld	r21, Z
    3cf4:	95 2b       	or	r25, r21
    3cf6:	03 c0       	rjmp	.+6      	; 0x3cfe <_ZN16Adafruit_SSD13067displayEv+0x158>
      else        *mosiPort &= ~mosiPinMask;
    3cf8:	50 81       	ld	r21, Z
    3cfa:	90 95       	com	r25
    3cfc:	95 23       	and	r25, r21
    3cfe:	90 83       	st	Z, r25
      *clkPort |=  clkPinMask; // Clock high
    3d00:	eb a5       	ldd	r30, Y+43	; 0x2b
    3d02:	fc a5       	ldd	r31, Y+44	; 0x2c
    3d04:	50 81       	ld	r21, Z
    3d06:	9a a9       	ldd	r25, Y+50	; 0x32
    3d08:	95 2b       	or	r25, r21
    3d0a:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    3d0c:	eb a5       	ldd	r30, Y+43	; 0x2b
    3d0e:	fc a5       	ldd	r31, Y+44	; 0x2c
    3d10:	50 81       	ld	r21, Z
    3d12:	9a a9       	ldd	r25, Y+50	; 0x32
    3d14:	90 95       	com	r25
    3d16:	95 23       	and	r25, r21
    3d18:	90 83       	st	Z, r25
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
    3d1a:	46 95       	lsr	r20
    3d1c:	21 50       	subi	r18, 0x01	; 1
    3d1e:	31 09       	sbc	r19, r1
    3d20:	11 f7       	brne	.-60     	; 0x3ce6 <_ZN16Adafruit_SSD13067displayEv+0x140>
    3d22:	d1 cf       	rjmp	.-94     	; 0x3cc6 <_ZN16Adafruit_SSD13067displayEv+0x120>
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	71 f0       	breq	.+28     	; 0x3d48 <_ZN16Adafruit_SSD13067displayEv+0x1a2>
    3d2c:	4b ad       	ldd	r20, Y+59	; 0x3b
    3d2e:	5c ad       	ldd	r21, Y+60	; 0x3c
    3d30:	6d ad       	ldd	r22, Y+61	; 0x3d
    3d32:	7e ad       	ldd	r23, Y+62	; 0x3e
#if defined(ESP8266)
  yield();
#endif
}
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	ff 90       	pop	r15
    3d3e:	ef 90       	pop	r14
    3d40:	df 90       	pop	r13
    3d42:	cf 90       	pop	r12
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3d44:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <_ZN7TwoWire8setClockEm>
    3d48:	ef a5       	ldd	r30, Y+47	; 0x2f
    3d4a:	f8 a9       	ldd	r31, Y+48	; 0x30
    3d4c:	90 81       	ld	r25, Z
    3d4e:	8c a9       	ldd	r24, Y+52	; 0x34
    3d50:	89 2b       	or	r24, r25
    3d52:	80 83       	st	Z, r24
    3d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d58:	89 2b       	or	r24, r25
    3d5a:	51 f0       	breq	.+20     	; 0x3d70 <_ZN16Adafruit_SSD13067displayEv+0x1ca>
#if defined(ESP8266)
  yield();
#endif
}
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	1f 91       	pop	r17
    3d62:	0f 91       	pop	r16
    3d64:	ff 90       	pop	r15
    3d66:	ef 90       	pop	r14
    3d68:	df 90       	pop	r13
    3d6a:	cf 90       	pop	r12
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3d6c:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	df 90       	pop	r13
    3d7e:	cf 90       	pop	r12
    3d80:	08 95       	ret

00003d82 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3d82:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3d84:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3d86:	f8 94       	cli
  if (!initialized) {
    3d88:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZN8SPIClass11initializedE>
    3d8c:	81 11       	cpse	r24, r1
    3d8e:	27 c0       	rjmp	.+78     	; 0x3dde <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3d90:	ec e1       	ldi	r30, 0x1C	; 28
    3d92:	f1 e0       	ldi	r31, 0x01	; 1
    3d94:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3d96:	e8 e0       	ldi	r30, 0x08	; 8
    3d98:	f1 e0       	ldi	r31, 0x01	; 1
    3d9a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3d9c:	e8 2f       	mov	r30, r24
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	ee 0f       	add	r30, r30
    3da2:	ff 1f       	adc	r31, r31
    3da4:	e6 5c       	subi	r30, 0xC6	; 198
    3da6:	fe 4f       	sbci	r31, 0xFE	; 254
    3da8:	a5 91       	lpm	r26, Z+
    3daa:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3dac:	ec 91       	ld	r30, X
    3dae:	e9 23       	and	r30, r25
    3db0:	21 f4       	brne	.+8      	; 0x3dba <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3db2:	61 e0       	ldi	r22, 0x01	; 1
    3db4:	8a e0       	ldi	r24, 0x0A	; 10
    3db6:	0e 94 0a 11 	call	0x2214	; 0x2214 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3dba:	61 e0       	ldi	r22, 0x01	; 1
    3dbc:	8a e0       	ldi	r24, 0x0A	; 10
    3dbe:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3dc2:	8c b5       	in	r24, 0x2c	; 44
    3dc4:	80 61       	ori	r24, 0x10	; 16
    3dc6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3dc8:	8c b5       	in	r24, 0x2c	; 44
    3dca:	80 64       	ori	r24, 0x40	; 64
    3dcc:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	8d e0       	ldi	r24, 0x0D	; 13
    3dd2:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
    pinMode(MOSI, OUTPUT);
    3dd6:	61 e0       	ldi	r22, 0x01	; 1
    3dd8:	8b e0       	ldi	r24, 0x0B	; 11
    3dda:	0e 94 ce 10 	call	0x219c	; 0x219c <pinMode>
  }
  initialized++; // reference count
    3dde:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZN8SPIClass11initializedE>
    3de2:	8f 5f       	subi	r24, 0xFF	; 255
    3de4:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3de8:	cf bf       	out	0x3f, r28	; 63
}
    3dea:	cf 91       	pop	r28
    3dec:	08 95       	ret

00003dee <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3dee:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3df8:	82 1b       	sub	r24, r18
    3dfa:	91 09       	sbc	r25, r1
    3dfc:	08 95       	ret

00003dfe <_ZN7TwoWire4readEv>:
    3dfe:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3e02:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    3e06:	98 17       	cp	r25, r24
    3e08:	50 f4       	brcc	.+20     	; 0x3e1e <_ZN7TwoWire4readEv+0x20>
    3e0a:	e9 2f       	mov	r30, r25
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	eb 59       	subi	r30, 0x9B	; 155
    3e10:	fc 4f       	sbci	r31, 0xFC	; 252
    3e12:	20 81       	ld	r18, Z
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	9f 5f       	subi	r25, 0xFF	; 255
    3e18:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <_ZN7TwoWire4readEv+0x24>
    3e1e:	2f ef       	ldi	r18, 0xFF	; 255
    3e20:	3f ef       	ldi	r19, 0xFF	; 255
    3e22:	c9 01       	movw	r24, r18
    3e24:	08 95       	ret

00003e26 <_ZN7TwoWire4peekEv>:
    3e26:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3e2a:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    3e2e:	e8 17       	cp	r30, r24
    3e30:	30 f4       	brcc	.+12     	; 0x3e3e <_ZN7TwoWire4peekEv+0x18>
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	eb 59       	subi	r30, 0x9B	; 155
    3e36:	fc 4f       	sbci	r31, 0xFC	; 252
    3e38:	80 81       	ld	r24, Z
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	08 95       	ret
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	9f ef       	ldi	r25, 0xFF	; 255
    3e42:	08 95       	ret

00003e44 <_ZN7TwoWire5flushEv>:
    3e44:	08 95       	ret

00003e46 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	ec 01       	movw	r28, r24
    3e4c:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <_ZN7TwoWire14user_onReceiveE>
    3e50:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <_ZN7TwoWire14user_onReceiveE+0x1>
    3e54:	30 97       	sbiw	r30, 0x00	; 0
    3e56:	f1 f0       	breq	.+60     	; 0x3e94 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3e58:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3e5c:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    3e60:	98 17       	cp	r25, r24
    3e62:	c0 f0       	brcs	.+48     	; 0x3e94 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	29 2f       	mov	r18, r25
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	26 17       	cp	r18, r22
    3e6c:	37 07       	cpc	r19, r23
    3e6e:	54 f4       	brge	.+20     	; 0x3e84 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3e70:	de 01       	movw	r26, r28
    3e72:	a2 0f       	add	r26, r18
    3e74:	b3 1f       	adc	r27, r19
    3e76:	4c 91       	ld	r20, X
    3e78:	d9 01       	movw	r26, r18
    3e7a:	ab 59       	subi	r26, 0x9B	; 155
    3e7c:	bc 4f       	sbci	r27, 0xFC	; 252
    3e7e:	4c 93       	st	X, r20
    3e80:	9f 5f       	subi	r25, 0xFF	; 255
    3e82:	f1 cf       	rjmp	.-30     	; 0x3e66 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3e84:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3e88:	60 93 63 03 	sts	0x0363, r22	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	09 94       	ijmp
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	08 95       	ret

00003e9a <_ZN7TwoWire16onRequestServiceEv>:
    3e9a:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <_ZN7TwoWire14user_onRequestE>
    3e9e:	f0 91 3e 03 	lds	r31, 0x033E	; 0x80033e <_ZN7TwoWire14user_onRequestE+0x1>
    3ea2:	30 97       	sbiw	r30, 0x00	; 0
    3ea4:	29 f0       	breq	.+10     	; 0x3eb0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3ea6:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    3eaa:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3eae:	09 94       	ijmp
    3eb0:	08 95       	ret

00003eb2 <_ZN7TwoWire5writeEPKhj>:
    3eb2:	cf 92       	push	r12
    3eb4:	df 92       	push	r13
    3eb6:	ef 92       	push	r14
    3eb8:	ff 92       	push	r15
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	7c 01       	movw	r14, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	8a 01       	movw	r16, r20
    3ec8:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <_ZN7TwoWire12transmittingE>
    3ecc:	22 23       	and	r18, r18
    3ece:	89 f0       	breq	.+34     	; 0x3ef2 <_ZN7TwoWire5writeEPKhj+0x40>
    3ed0:	eb 01       	movw	r28, r22
    3ed2:	6b 01       	movw	r12, r22
    3ed4:	c4 0e       	add	r12, r20
    3ed6:	d5 1e       	adc	r13, r21
    3ed8:	cc 15       	cp	r28, r12
    3eda:	dd 05       	cpc	r29, r13
    3edc:	69 f0       	breq	.+26     	; 0x3ef8 <_ZN7TwoWire5writeEPKhj+0x46>
    3ede:	69 91       	ld	r22, Y+
    3ee0:	d7 01       	movw	r26, r14
    3ee2:	ed 91       	ld	r30, X+
    3ee4:	fc 91       	ld	r31, X
    3ee6:	01 90       	ld	r0, Z+
    3ee8:	f0 81       	ld	r31, Z
    3eea:	e0 2d       	mov	r30, r0
    3eec:	c7 01       	movw	r24, r14
    3eee:	09 95       	icall
    3ef0:	f3 cf       	rjmp	.-26     	; 0x3ed8 <_ZN7TwoWire5writeEPKhj+0x26>
    3ef2:	64 2f       	mov	r22, r20
    3ef4:	0e 94 8c 20 	call	0x4118	; 0x4118 <twi_transmit>
    3ef8:	c8 01       	movw	r24, r16
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	ff 90       	pop	r15
    3f04:	ef 90       	pop	r14
    3f06:	df 90       	pop	r13
    3f08:	cf 90       	pop	r12
    3f0a:	08 95       	ret

00003f0c <_ZN7TwoWire5writeEh>:
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	1f 92       	push	r1
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    3f16:	69 83       	std	Y+1, r22	; 0x01
    3f18:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <_ZN7TwoWire12transmittingE>
    3f1c:	22 23       	and	r18, r18
    3f1e:	d1 f0       	breq	.+52     	; 0x3f54 <_ZN7TwoWire5writeEh+0x48>
    3f20:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3f24:	20 32       	cpi	r18, 0x20	; 32
    3f26:	40 f0       	brcs	.+16     	; 0x3f38 <_ZN7TwoWire5writeEh+0x2c>
    3f28:	21 e0       	ldi	r18, 0x01	; 1
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	33 83       	std	Z+3, r19	; 0x03
    3f30:	22 83       	std	Z+2, r18	; 0x02
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	15 c0       	rjmp	.+42     	; 0x3f62 <_ZN7TwoWire5writeEh+0x56>
    3f38:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    3f3c:	e8 2f       	mov	r30, r24
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	ee 5b       	subi	r30, 0xBE	; 190
    3f42:	fc 4f       	sbci	r31, 0xFC	; 252
    3f44:	99 81       	ldd	r25, Y+1	; 0x01
    3f46:	90 83       	st	Z, r25
    3f48:	8f 5f       	subi	r24, 0xFF	; 255
    3f4a:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    3f4e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3f52:	05 c0       	rjmp	.+10     	; 0x3f5e <_ZN7TwoWire5writeEh+0x52>
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	ce 01       	movw	r24, r28
    3f58:	01 96       	adiw	r24, 0x01	; 1
    3f5a:	0e 94 8c 20 	call	0x4118	; 0x4118 <twi_transmit>
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	0f 90       	pop	r0
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	08 95       	ret

00003f6a <_ZN7TwoWireC1Ev>:
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	13 82       	std	Z+3, r1	; 0x03
    3f6e:	12 82       	std	Z+2, r1	; 0x02
    3f70:	88 ee       	ldi	r24, 0xE8	; 232
    3f72:	93 e0       	ldi	r25, 0x03	; 3
    3f74:	a0 e0       	ldi	r26, 0x00	; 0
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	84 83       	std	Z+4, r24	; 0x04
    3f7a:	95 83       	std	Z+5, r25	; 0x05
    3f7c:	a6 83       	std	Z+6, r26	; 0x06
    3f7e:	b7 83       	std	Z+7, r27	; 0x07
    3f80:	8d e8       	ldi	r24, 0x8D	; 141
    3f82:	91 e0       	ldi	r25, 0x01	; 1
    3f84:	91 83       	std	Z+1, r25	; 0x01
    3f86:	80 83       	st	Z, r24
    3f88:	08 95       	ret

00003f8a <_ZN7TwoWire5beginEv>:
    3f8a:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <_ZN7TwoWire13rxBufferIndexE>
    3f8e:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <_ZN7TwoWire14rxBufferLengthE>
    3f92:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    3f96:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3f9a:	0e 94 04 20 	call	0x4008	; 0x4008 <twi_init>
    3f9e:	8d e4       	ldi	r24, 0x4D	; 77
    3fa0:	9f e1       	ldi	r25, 0x1F	; 31
    3fa2:	0e 94 b9 20 	call	0x4172	; 0x4172 <twi_attachSlaveTxEvent>
    3fa6:	83 e2       	ldi	r24, 0x23	; 35
    3fa8:	9f e1       	ldi	r25, 0x1F	; 31
    3faa:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <twi_attachSlaveRxEvent>

00003fae <_ZN7TwoWire8setClockEm>:
    3fae:	cb 01       	movw	r24, r22
    3fb0:	ba 01       	movw	r22, r20
    3fb2:	0c 94 22 20 	jmp	0x4044	; 0x4044 <twi_setFrequency>

00003fb6 <_ZN7TwoWire17beginTransmissionEh>:
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <_ZN7TwoWire12transmittingE>
    3fbc:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <_ZN7TwoWire9txAddressE>
    3fc0:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    3fc4:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3fc8:	08 95       	ret

00003fca <_ZN7TwoWire17beginTransmissionEi>:
    3fca:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <_ZN7TwoWire17beginTransmissionEh>

00003fce <_ZN7TwoWire15endTransmissionEh>:
    3fce:	0f 93       	push	r16
    3fd0:	06 2f       	mov	r16, r22
    3fd2:	21 e0       	ldi	r18, 0x01	; 1
    3fd4:	40 91 40 03 	lds	r20, 0x0340	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3fd8:	62 e4       	ldi	r22, 0x42	; 66
    3fda:	73 e0       	ldi	r23, 0x03	; 3
    3fdc:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_ZN7TwoWire9txAddressE>
    3fe0:	0e 94 36 20 	call	0x406c	; 0x406c <twi_writeTo>
    3fe4:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_ZN7TwoWire13txBufferIndexE>
    3fe8:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <_ZN7TwoWire14txBufferLengthE>
    3fec:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <_ZN7TwoWire12transmittingE>
    3ff0:	0f 91       	pop	r16
    3ff2:	08 95       	ret

00003ff4 <_ZN7TwoWire15endTransmissionEv>:
    3ff4:	61 e0       	ldi	r22, 0x01	; 1
    3ff6:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <_ZN7TwoWire15endTransmissionEh>

00003ffa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3ffa:	8f e2       	ldi	r24, 0x2F	; 47
    3ffc:	93 e0       	ldi	r25, 0x03	; 3
    3ffe:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <_ZN7TwoWireC1Ev>

00004002 <__cxa_pure_virtual>:
    4002:	0e 94 78 23 	call	0x46f0	; 0x46f0 <abort>

00004006 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4006:	08 95       	ret

00004008 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4008:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_state>
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <twi_sendStop>
    4012:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <twi_inRepStart>
    4016:	61 e0       	ldi	r22, 0x01	; 1
    4018:	82 e1       	ldi	r24, 0x12	; 18
    401a:	0e 94 0a 11 	call	0x2214	; 0x2214 <digitalWrite>
    401e:	61 e0       	ldi	r22, 0x01	; 1
    4020:	83 e1       	ldi	r24, 0x13	; 19
    4022:	0e 94 0a 11 	call	0x2214	; 0x2214 <digitalWrite>
    4026:	e9 eb       	ldi	r30, 0xB9	; 185
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	80 81       	ld	r24, Z
    402c:	8e 7f       	andi	r24, 0xFE	; 254
    402e:	80 83       	st	Z, r24
    4030:	80 81       	ld	r24, Z
    4032:	8d 7f       	andi	r24, 0xFD	; 253
    4034:	80 83       	st	Z, r24
    4036:	88 e4       	ldi	r24, 0x48	; 72
    4038:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    403c:	85 e4       	ldi	r24, 0x45	; 69
    403e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4042:	08 95       	ret

00004044 <twi_setFrequency>:
    4044:	9b 01       	movw	r18, r22
    4046:	ac 01       	movw	r20, r24
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	74 e2       	ldi	r23, 0x24	; 36
    404c:	84 ef       	ldi	r24, 0xF4	; 244
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 1b 22 	call	0x4436	; 0x4436 <__udivmodsi4>
    4054:	da 01       	movw	r26, r20
    4056:	c9 01       	movw	r24, r18
    4058:	40 97       	sbiw	r24, 0x10	; 16
    405a:	a1 09       	sbc	r26, r1
    405c:	b1 09       	sbc	r27, r1
    405e:	b6 95       	lsr	r27
    4060:	a7 95       	ror	r26
    4062:	97 95       	ror	r25
    4064:	87 95       	ror	r24
    4066:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    406a:	08 95       	ret

0000406c <twi_writeTo>:
    406c:	0f 93       	push	r16
    406e:	41 32       	cpi	r20, 0x21	; 33
    4070:	08 f0       	brcs	.+2      	; 0x4074 <twi_writeTo+0x8>
    4072:	4a c0       	rjmp	.+148    	; 0x4108 <twi_writeTo+0x9c>
    4074:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <twi_state>
    4078:	91 11       	cpse	r25, r1
    407a:	fc cf       	rjmp	.-8      	; 0x4074 <twi_writeTo+0x8>
    407c:	32 e0       	ldi	r19, 0x02	; 2
    407e:	30 93 f2 03 	sts	0x03F2, r19	; 0x8003f2 <twi_state>
    4082:	00 93 f0 03 	sts	0x03F0, r16	; 0x8003f0 <twi_sendStop>
    4086:	3f ef       	ldi	r19, 0xFF	; 255
    4088:	30 93 85 03 	sts	0x0385, r19	; 0x800385 <twi_error>
    408c:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <twi_masterBufferIndex>
    4090:	40 93 c9 03 	sts	0x03C9, r20	; 0x8003c9 <twi_masterBufferLength>
    4094:	56 2f       	mov	r21, r22
    4096:	ab ec       	ldi	r26, 0xCB	; 203
    4098:	b3 e0       	ldi	r27, 0x03	; 3
    409a:	fb 01       	movw	r30, r22
    409c:	3e 2f       	mov	r19, r30
    409e:	35 1b       	sub	r19, r21
    40a0:	34 17       	cp	r19, r20
    40a2:	18 f4       	brcc	.+6      	; 0x40aa <twi_writeTo+0x3e>
    40a4:	31 91       	ld	r19, Z+
    40a6:	3d 93       	st	X+, r19
    40a8:	f9 cf       	rjmp	.-14     	; 0x409c <twi_writeTo+0x30>
    40aa:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <twi_slarw>
    40ae:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <twi_slarw>
    40b2:	88 0f       	add	r24, r24
    40b4:	83 2b       	or	r24, r19
    40b6:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_slarw>
    40ba:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <twi_inRepStart>
    40be:	81 30       	cpi	r24, 0x01	; 1
    40c0:	61 f4       	brne	.+24     	; 0x40da <twi_writeTo+0x6e>
    40c2:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <twi_inRepStart>
    40c6:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_slarw>
    40ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    40ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    40d2:	83 fd       	sbrc	r24, 3
    40d4:	f8 cf       	rjmp	.-16     	; 0x40c6 <twi_writeTo+0x5a>
    40d6:	85 ec       	ldi	r24, 0xC5	; 197
    40d8:	01 c0       	rjmp	.+2      	; 0x40dc <twi_writeTo+0x70>
    40da:	85 ee       	ldi	r24, 0xE5	; 229
    40dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    40e0:	22 23       	and	r18, r18
    40e2:	21 f0       	breq	.+8      	; 0x40ec <twi_writeTo+0x80>
    40e4:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <twi_state>
    40e8:	82 30       	cpi	r24, 0x02	; 2
    40ea:	d1 f3       	breq	.-12     	; 0x40e0 <twi_writeTo+0x74>
    40ec:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_error>
    40f0:	8f 3f       	cpi	r24, 0xFF	; 255
    40f2:	79 f0       	breq	.+30     	; 0x4112 <twi_writeTo+0xa6>
    40f4:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_error>
    40f8:	80 32       	cpi	r24, 0x20	; 32
    40fa:	41 f0       	breq	.+16     	; 0x410c <twi_writeTo+0xa0>
    40fc:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_error>
    4100:	80 33       	cpi	r24, 0x30	; 48
    4102:	31 f0       	breq	.+12     	; 0x4110 <twi_writeTo+0xa4>
    4104:	94 e0       	ldi	r25, 0x04	; 4
    4106:	05 c0       	rjmp	.+10     	; 0x4112 <twi_writeTo+0xa6>
    4108:	91 e0       	ldi	r25, 0x01	; 1
    410a:	03 c0       	rjmp	.+6      	; 0x4112 <twi_writeTo+0xa6>
    410c:	92 e0       	ldi	r25, 0x02	; 2
    410e:	01 c0       	rjmp	.+2      	; 0x4112 <twi_writeTo+0xa6>
    4110:	93 e0       	ldi	r25, 0x03	; 3
    4112:	89 2f       	mov	r24, r25
    4114:	0f 91       	pop	r16
    4116:	08 95       	ret

00004118 <twi_transmit>:
    4118:	40 91 a7 03 	lds	r20, 0x03A7	; 0x8003a7 <twi_txBufferLength>
    411c:	26 2f       	mov	r18, r22
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	24 0f       	add	r18, r20
    4122:	31 1d       	adc	r19, r1
    4124:	21 32       	cpi	r18, 0x21	; 33
    4126:	31 05       	cpc	r19, r1
    4128:	dc f4       	brge	.+54     	; 0x4160 <twi_transmit+0x48>
    412a:	20 91 f2 03 	lds	r18, 0x03F2	; 0x8003f2 <twi_state>
    412e:	24 30       	cpi	r18, 0x04	; 4
    4130:	c9 f4       	brne	.+50     	; 0x4164 <twi_transmit+0x4c>
    4132:	fc 01       	movw	r30, r24
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	86 17       	cp	r24, r22
    413a:	58 f4       	brcc	.+22     	; 0x4152 <twi_transmit+0x3a>
    413c:	30 91 a7 03 	lds	r19, 0x03A7	; 0x8003a7 <twi_txBufferLength>
    4140:	21 91       	ld	r18, Z+
    4142:	dc 01       	movw	r26, r24
    4144:	a7 55       	subi	r26, 0x57	; 87
    4146:	bc 4f       	sbci	r27, 0xFC	; 252
    4148:	a3 0f       	add	r26, r19
    414a:	b1 1d       	adc	r27, r1
    414c:	2c 93       	st	X, r18
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	f3 cf       	rjmp	.-26     	; 0x4138 <twi_transmit+0x20>
    4152:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <twi_txBufferLength>
    4156:	68 0f       	add	r22, r24
    4158:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <twi_txBufferLength>
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	08 95       	ret
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	08 95       	ret
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	08 95       	ret

00004168 <twi_attachSlaveRxEvent>:
    4168:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <twi_onSlaveReceive+0x1>
    416c:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <twi_onSlaveReceive>
    4170:	08 95       	ret

00004172 <twi_attachSlaveTxEvent>:
    4172:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <twi_onSlaveTransmit+0x1>
    4176:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <twi_onSlaveTransmit>
    417a:	08 95       	ret

0000417c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    417c:	85 ed       	ldi	r24, 0xD5	; 213
    417e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4182:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4186:	84 fd       	sbrc	r24, 4
    4188:	fc cf       	rjmp	.-8      	; 0x4182 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    418a:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_state>
    418e:	08 95       	ret

00004190 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4190:	85 ec       	ldi	r24, 0xC5	; 197
    4192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    4196:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_state>
    419a:	08 95       	ret

0000419c <__vector_24>:
}

ISR(TWI_vect)
{
    419c:	1f 92       	push	r1
    419e:	0f 92       	push	r0
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	0f 92       	push	r0
    41a4:	11 24       	eor	r1, r1
    41a6:	2f 93       	push	r18
    41a8:	3f 93       	push	r19
    41aa:	4f 93       	push	r20
    41ac:	5f 93       	push	r21
    41ae:	6f 93       	push	r22
    41b0:	7f 93       	push	r23
    41b2:	8f 93       	push	r24
    41b4:	9f 93       	push	r25
    41b6:	af 93       	push	r26
    41b8:	bf 93       	push	r27
    41ba:	ef 93       	push	r30
    41bc:	ff 93       	push	r31
  switch(TW_STATUS){
    41be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    41c2:	88 7f       	andi	r24, 0xF8	; 248
    41c4:	80 36       	cpi	r24, 0x60	; 96
    41c6:	09 f4       	brne	.+2      	; 0x41ca <__vector_24+0x2e>
    41c8:	9e c0       	rjmp	.+316    	; 0x4306 <__vector_24+0x16a>
    41ca:	78 f5       	brcc	.+94     	; 0x422a <__vector_24+0x8e>
    41cc:	88 32       	cpi	r24, 0x28	; 40
    41ce:	09 f4       	brne	.+2      	; 0x41d2 <__vector_24+0x36>
    41d0:	5d c0       	rjmp	.+186    	; 0x428c <__vector_24+0xf0>
    41d2:	90 f4       	brcc	.+36     	; 0x41f8 <__vector_24+0x5c>
    41d4:	80 31       	cpi	r24, 0x10	; 16
    41d6:	09 f4       	brne	.+2      	; 0x41da <__vector_24+0x3e>
    41d8:	56 c0       	rjmp	.+172    	; 0x4286 <__vector_24+0xea>
    41da:	38 f4       	brcc	.+14     	; 0x41ea <__vector_24+0x4e>
    41dc:	88 23       	and	r24, r24
    41de:	09 f4       	brne	.+2      	; 0x41e2 <__vector_24+0x46>
    41e0:	f5 c0       	rjmp	.+490    	; 0x43cc <__vector_24+0x230>
    41e2:	88 30       	cpi	r24, 0x08	; 8
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <__vector_24+0x4c>
    41e6:	4f c0       	rjmp	.+158    	; 0x4286 <__vector_24+0xea>
    41e8:	f5 c0       	rjmp	.+490    	; 0x43d4 <__vector_24+0x238>
    41ea:	88 31       	cpi	r24, 0x18	; 24
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <__vector_24+0x54>
    41ee:	4e c0       	rjmp	.+156    	; 0x428c <__vector_24+0xf0>
    41f0:	80 32       	cpi	r24, 0x20	; 32
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <__vector_24+0x5a>
    41f4:	5f c0       	rjmp	.+190    	; 0x42b4 <__vector_24+0x118>
    41f6:	ee c0       	rjmp	.+476    	; 0x43d4 <__vector_24+0x238>
    41f8:	80 34       	cpi	r24, 0x40	; 64
    41fa:	09 f4       	brne	.+2      	; 0x41fe <__vector_24+0x62>
    41fc:	6a c0       	rjmp	.+212    	; 0x42d2 <__vector_24+0x136>
    41fe:	58 f4       	brcc	.+22     	; 0x4216 <__vector_24+0x7a>
    4200:	80 33       	cpi	r24, 0x30	; 48
    4202:	09 f4       	brne	.+2      	; 0x4206 <__vector_24+0x6a>
    4204:	57 c0       	rjmp	.+174    	; 0x42b4 <__vector_24+0x118>
    4206:	88 33       	cpi	r24, 0x38	; 56
    4208:	09 f0       	breq	.+2      	; 0x420c <__vector_24+0x70>
    420a:	e4 c0       	rjmp	.+456    	; 0x43d4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    420c:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <twi_error>
      twi_releaseBus();
    4210:	0e 94 c8 20 	call	0x4190	; 0x4190 <twi_releaseBus>
      break;
    4214:	df c0       	rjmp	.+446    	; 0x43d4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4216:	80 35       	cpi	r24, 0x50	; 80
    4218:	09 f4       	brne	.+2      	; 0x421c <__vector_24+0x80>
    421a:	4f c0       	rjmp	.+158    	; 0x42ba <__vector_24+0x11e>
    421c:	88 35       	cpi	r24, 0x58	; 88
    421e:	09 f4       	brne	.+2      	; 0x4222 <__vector_24+0x86>
    4220:	5d c0       	rjmp	.+186    	; 0x42dc <__vector_24+0x140>
    4222:	88 34       	cpi	r24, 0x48	; 72
    4224:	09 f0       	breq	.+2      	; 0x4228 <__vector_24+0x8c>
    4226:	d6 c0       	rjmp	.+428    	; 0x43d4 <__vector_24+0x238>
    4228:	d3 c0       	rjmp	.+422    	; 0x43d0 <__vector_24+0x234>
    422a:	88 39       	cpi	r24, 0x98	; 152
    422c:	09 f4       	brne	.+2      	; 0x4230 <__vector_24+0x94>
    422e:	c4 c0       	rjmp	.+392    	; 0x43b8 <__vector_24+0x21c>
    4230:	a8 f4       	brcc	.+42     	; 0x425c <__vector_24+0xc0>
    4232:	88 37       	cpi	r24, 0x78	; 120
    4234:	09 f4       	brne	.+2      	; 0x4238 <__vector_24+0x9c>
    4236:	67 c0       	rjmp	.+206    	; 0x4306 <__vector_24+0x16a>
    4238:	38 f4       	brcc	.+14     	; 0x4248 <__vector_24+0xac>
    423a:	88 36       	cpi	r24, 0x68	; 104
    423c:	09 f4       	brne	.+2      	; 0x4240 <__vector_24+0xa4>
    423e:	63 c0       	rjmp	.+198    	; 0x4306 <__vector_24+0x16a>
    4240:	80 37       	cpi	r24, 0x70	; 112
    4242:	09 f4       	brne	.+2      	; 0x4246 <__vector_24+0xaa>
    4244:	60 c0       	rjmp	.+192    	; 0x4306 <__vector_24+0x16a>
    4246:	c6 c0       	rjmp	.+396    	; 0x43d4 <__vector_24+0x238>
    4248:	88 38       	cpi	r24, 0x88	; 136
    424a:	09 f4       	brne	.+2      	; 0x424e <__vector_24+0xb2>
    424c:	b5 c0       	rjmp	.+362    	; 0x43b8 <__vector_24+0x21c>
    424e:	80 39       	cpi	r24, 0x90	; 144
    4250:	09 f4       	brne	.+2      	; 0x4254 <__vector_24+0xb8>
    4252:	5f c0       	rjmp	.+190    	; 0x4312 <__vector_24+0x176>
    4254:	80 38       	cpi	r24, 0x80	; 128
    4256:	09 f0       	breq	.+2      	; 0x425a <__vector_24+0xbe>
    4258:	bd c0       	rjmp	.+378    	; 0x43d4 <__vector_24+0x238>
    425a:	5b c0       	rjmp	.+182    	; 0x4312 <__vector_24+0x176>
    425c:	80 3b       	cpi	r24, 0xB0	; 176
    425e:	09 f4       	brne	.+2      	; 0x4262 <__vector_24+0xc6>
    4260:	83 c0       	rjmp	.+262    	; 0x4368 <__vector_24+0x1cc>
    4262:	38 f4       	brcc	.+14     	; 0x4272 <__vector_24+0xd6>
    4264:	80 3a       	cpi	r24, 0xA0	; 160
    4266:	09 f4       	brne	.+2      	; 0x426a <__vector_24+0xce>
    4268:	66 c0       	rjmp	.+204    	; 0x4336 <__vector_24+0x19a>
    426a:	88 3a       	cpi	r24, 0xA8	; 168
    426c:	09 f4       	brne	.+2      	; 0x4270 <__vector_24+0xd4>
    426e:	7c c0       	rjmp	.+248    	; 0x4368 <__vector_24+0x1cc>
    4270:	b1 c0       	rjmp	.+354    	; 0x43d4 <__vector_24+0x238>
    4272:	80 3c       	cpi	r24, 0xC0	; 192
    4274:	09 f4       	brne	.+2      	; 0x4278 <__vector_24+0xdc>
    4276:	a4 c0       	rjmp	.+328    	; 0x43c0 <__vector_24+0x224>
    4278:	88 3c       	cpi	r24, 0xC8	; 200
    427a:	09 f4       	brne	.+2      	; 0x427e <__vector_24+0xe2>
    427c:	a1 c0       	rjmp	.+322    	; 0x43c0 <__vector_24+0x224>
    427e:	88 3b       	cpi	r24, 0xB8	; 184
    4280:	09 f4       	brne	.+2      	; 0x4284 <__vector_24+0xe8>
    4282:	87 c0       	rjmp	.+270    	; 0x4392 <__vector_24+0x1f6>
    4284:	a7 c0       	rjmp	.+334    	; 0x43d4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4286:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_slarw>
    428a:	10 c0       	rjmp	.+32     	; 0x42ac <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    428c:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <twi_masterBufferIndex>
    4290:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <twi_masterBufferLength>
    4294:	98 17       	cp	r25, r24
    4296:	70 f5       	brcc	.+92     	; 0x42f4 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4298:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <twi_masterBufferIndex>
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	8e 0f       	add	r24, r30
    42a0:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <twi_masterBufferIndex>
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	e5 53       	subi	r30, 0x35	; 53
    42a8:	fc 4f       	sbci	r31, 0xFC	; 252
    42aa:	80 81       	ld	r24, Z
    42ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    42b0:	85 ec       	ldi	r24, 0xC5	; 197
    42b2:	83 c0       	rjmp	.+262    	; 0x43ba <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    42b4:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <twi_error>
    42b8:	8b c0       	rjmp	.+278    	; 0x43d0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    42ba:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <twi_masterBufferIndex>
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	8e 0f       	add	r24, r30
    42c2:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <twi_masterBufferIndex>
    42c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    42ca:	f0 e0       	ldi	r31, 0x00	; 0
    42cc:	e5 53       	subi	r30, 0x35	; 53
    42ce:	fc 4f       	sbci	r31, 0xFC	; 252
    42d0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    42d2:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <twi_masterBufferIndex>
    42d6:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <twi_masterBufferLength>
    42da:	6b c0       	rjmp	.+214    	; 0x43b2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    42dc:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <twi_masterBufferIndex>
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	8e 0f       	add	r24, r30
    42e4:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <twi_masterBufferIndex>
    42e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    42ec:	f0 e0       	ldi	r31, 0x00	; 0
    42ee:	e5 53       	subi	r30, 0x35	; 53
    42f0:	fc 4f       	sbci	r31, 0xFC	; 252
    42f2:	80 83       	st	Z, r24
	if (twi_sendStop)
    42f4:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <twi_sendStop>
    42f8:	81 11       	cpse	r24, r1
    42fa:	6a c0       	rjmp	.+212    	; 0x43d0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4302:	84 ea       	ldi	r24, 0xA4	; 164
    4304:	5e c0       	rjmp	.+188    	; 0x43c2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4306:	83 e0       	ldi	r24, 0x03	; 3
    4308:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    430c:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <twi_rxBufferIndex>
    4310:	cf cf       	rjmp	.-98     	; 0x42b0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4312:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_rxBufferIndex>
    4316:	80 32       	cpi	r24, 0x20	; 32
    4318:	08 f0       	brcs	.+2      	; 0x431c <__vector_24+0x180>
    431a:	4e c0       	rjmp	.+156    	; 0x43b8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    431c:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <twi_rxBufferIndex>
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	8e 0f       	add	r24, r30
    4324:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <twi_rxBufferIndex>
    4328:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	e9 57       	subi	r30, 0x79	; 121
    4330:	fc 4f       	sbci	r31, 0xFC	; 252
    4332:	80 83       	st	Z, r24
    4334:	bd cf       	rjmp	.-134    	; 0x42b0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4336:	0e 94 c8 20 	call	0x4190	; 0x4190 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    433a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_rxBufferIndex>
    433e:	80 32       	cpi	r24, 0x20	; 32
    4340:	30 f4       	brcc	.+12     	; 0x434e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4342:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <twi_rxBufferIndex>
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	e9 57       	subi	r30, 0x79	; 121
    434a:	fc 4f       	sbci	r31, 0xFC	; 252
    434c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    434e:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <twi_rxBufferIndex>
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <twi_onSlaveReceive>
    4358:	f0 91 ec 03 	lds	r31, 0x03EC	; 0x8003ec <twi_onSlaveReceive+0x1>
    435c:	87 e8       	ldi	r24, 0x87	; 135
    435e:	93 e0       	ldi	r25, 0x03	; 3
    4360:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4362:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <twi_rxBufferIndex>
      break;
    4366:	36 c0       	rjmp	.+108    	; 0x43d4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4368:	84 e0       	ldi	r24, 0x04	; 4
    436a:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    436e:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4372:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4376:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <twi_onSlaveTransmit>
    437a:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <twi_onSlaveTransmit+0x1>
    437e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4380:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <twi_txBufferLength>
    4384:	81 11       	cpse	r24, r1
    4386:	05 c0       	rjmp	.+10     	; 0x4392 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    438e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4392:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <twi_txBufferIndex>
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	8e 0f       	add	r24, r30
    439a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <twi_txBufferIndex>
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	e7 55       	subi	r30, 0x57	; 87
    43a2:	fc 4f       	sbci	r31, 0xFC	; 252
    43a4:	80 81       	ld	r24, Z
    43a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    43aa:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <twi_txBufferIndex>
    43ae:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <twi_txBufferLength>
    43b2:	98 17       	cp	r25, r24
    43b4:	08 f4       	brcc	.+2      	; 0x43b8 <__vector_24+0x21c>
    43b6:	7c cf       	rjmp	.-264    	; 0x42b0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    43b8:	85 e8       	ldi	r24, 0x85	; 133
    43ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    43be:	0a c0       	rjmp	.+20     	; 0x43d4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    43c0:	85 ec       	ldi	r24, 0xC5	; 197
    43c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    43c6:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_state>
      break;
    43ca:	04 c0       	rjmp	.+8      	; 0x43d4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    43cc:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <twi_error>
      twi_stop();
    43d0:	0e 94 be 20 	call	0x417c	; 0x417c <twi_stop>
      break;
  }
}
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 90       	pop	r0
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	0f 90       	pop	r0
    43f2:	1f 90       	pop	r1
    43f4:	18 95       	reti

000043f6 <__udivmodqi4>:
    43f6:	99 1b       	sub	r25, r25
    43f8:	79 e0       	ldi	r23, 0x09	; 9
    43fa:	04 c0       	rjmp	.+8      	; 0x4404 <__udivmodqi4_ep>

000043fc <__udivmodqi4_loop>:
    43fc:	99 1f       	adc	r25, r25
    43fe:	96 17       	cp	r25, r22
    4400:	08 f0       	brcs	.+2      	; 0x4404 <__udivmodqi4_ep>
    4402:	96 1b       	sub	r25, r22

00004404 <__udivmodqi4_ep>:
    4404:	88 1f       	adc	r24, r24
    4406:	7a 95       	dec	r23
    4408:	c9 f7       	brne	.-14     	; 0x43fc <__udivmodqi4_loop>
    440a:	80 95       	com	r24
    440c:	08 95       	ret

0000440e <__divmodhi4>:
    440e:	97 fb       	bst	r25, 7
    4410:	07 2e       	mov	r0, r23
    4412:	16 f4       	brtc	.+4      	; 0x4418 <__divmodhi4+0xa>
    4414:	00 94       	com	r0
    4416:	07 d0       	rcall	.+14     	; 0x4426 <__divmodhi4_neg1>
    4418:	77 fd       	sbrc	r23, 7
    441a:	09 d0       	rcall	.+18     	; 0x442e <__divmodhi4_neg2>
    441c:	0e 94 3d 22 	call	0x447a	; 0x447a <__udivmodhi4>
    4420:	07 fc       	sbrc	r0, 7
    4422:	05 d0       	rcall	.+10     	; 0x442e <__divmodhi4_neg2>
    4424:	3e f4       	brtc	.+14     	; 0x4434 <__divmodhi4_exit>

00004426 <__divmodhi4_neg1>:
    4426:	90 95       	com	r25
    4428:	81 95       	neg	r24
    442a:	9f 4f       	sbci	r25, 0xFF	; 255
    442c:	08 95       	ret

0000442e <__divmodhi4_neg2>:
    442e:	70 95       	com	r23
    4430:	61 95       	neg	r22
    4432:	7f 4f       	sbci	r23, 0xFF	; 255

00004434 <__divmodhi4_exit>:
    4434:	08 95       	ret

00004436 <__udivmodsi4>:
    4436:	a1 e2       	ldi	r26, 0x21	; 33
    4438:	1a 2e       	mov	r1, r26
    443a:	aa 1b       	sub	r26, r26
    443c:	bb 1b       	sub	r27, r27
    443e:	fd 01       	movw	r30, r26
    4440:	0d c0       	rjmp	.+26     	; 0x445c <__udivmodsi4_ep>

00004442 <__udivmodsi4_loop>:
    4442:	aa 1f       	adc	r26, r26
    4444:	bb 1f       	adc	r27, r27
    4446:	ee 1f       	adc	r30, r30
    4448:	ff 1f       	adc	r31, r31
    444a:	a2 17       	cp	r26, r18
    444c:	b3 07       	cpc	r27, r19
    444e:	e4 07       	cpc	r30, r20
    4450:	f5 07       	cpc	r31, r21
    4452:	20 f0       	brcs	.+8      	; 0x445c <__udivmodsi4_ep>
    4454:	a2 1b       	sub	r26, r18
    4456:	b3 0b       	sbc	r27, r19
    4458:	e4 0b       	sbc	r30, r20
    445a:	f5 0b       	sbc	r31, r21

0000445c <__udivmodsi4_ep>:
    445c:	66 1f       	adc	r22, r22
    445e:	77 1f       	adc	r23, r23
    4460:	88 1f       	adc	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	1a 94       	dec	r1
    4466:	69 f7       	brne	.-38     	; 0x4442 <__udivmodsi4_loop>
    4468:	60 95       	com	r22
    446a:	70 95       	com	r23
    446c:	80 95       	com	r24
    446e:	90 95       	com	r25
    4470:	9b 01       	movw	r18, r22
    4472:	ac 01       	movw	r20, r24
    4474:	bd 01       	movw	r22, r26
    4476:	cf 01       	movw	r24, r30
    4478:	08 95       	ret

0000447a <__udivmodhi4>:
    447a:	aa 1b       	sub	r26, r26
    447c:	bb 1b       	sub	r27, r27
    447e:	51 e1       	ldi	r21, 0x11	; 17
    4480:	07 c0       	rjmp	.+14     	; 0x4490 <__udivmodhi4_ep>

00004482 <__udivmodhi4_loop>:
    4482:	aa 1f       	adc	r26, r26
    4484:	bb 1f       	adc	r27, r27
    4486:	a6 17       	cp	r26, r22
    4488:	b7 07       	cpc	r27, r23
    448a:	10 f0       	brcs	.+4      	; 0x4490 <__udivmodhi4_ep>
    448c:	a6 1b       	sub	r26, r22
    448e:	b7 0b       	sbc	r27, r23

00004490 <__udivmodhi4_ep>:
    4490:	88 1f       	adc	r24, r24
    4492:	99 1f       	adc	r25, r25
    4494:	5a 95       	dec	r21
    4496:	a9 f7       	brne	.-22     	; 0x4482 <__udivmodhi4_loop>
    4498:	80 95       	com	r24
    449a:	90 95       	com	r25
    449c:	bc 01       	movw	r22, r24
    449e:	cd 01       	movw	r24, r26
    44a0:	08 95       	ret

000044a2 <__tablejump2__>:
    44a2:	ee 0f       	add	r30, r30
    44a4:	ff 1f       	adc	r31, r31
    44a6:	05 90       	lpm	r0, Z+
    44a8:	f4 91       	lpm	r31, Z
    44aa:	e0 2d       	mov	r30, r0
    44ac:	09 94       	ijmp

000044ae <malloc>:
    44ae:	0f 93       	push	r16
    44b0:	1f 93       	push	r17
    44b2:	cf 93       	push	r28
    44b4:	df 93       	push	r29
    44b6:	82 30       	cpi	r24, 0x02	; 2
    44b8:	91 05       	cpc	r25, r1
    44ba:	10 f4       	brcc	.+4      	; 0x44c0 <malloc+0x12>
    44bc:	82 e0       	ldi	r24, 0x02	; 2
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <__flp>
    44c4:	f0 91 f6 03 	lds	r31, 0x03F6	; 0x8003f6 <__flp+0x1>
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	a0 e0       	ldi	r26, 0x00	; 0
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	30 97       	sbiw	r30, 0x00	; 0
    44d2:	19 f1       	breq	.+70     	; 0x451a <malloc+0x6c>
    44d4:	40 81       	ld	r20, Z
    44d6:	51 81       	ldd	r21, Z+1	; 0x01
    44d8:	02 81       	ldd	r16, Z+2	; 0x02
    44da:	13 81       	ldd	r17, Z+3	; 0x03
    44dc:	48 17       	cp	r20, r24
    44de:	59 07       	cpc	r21, r25
    44e0:	c8 f0       	brcs	.+50     	; 0x4514 <malloc+0x66>
    44e2:	84 17       	cp	r24, r20
    44e4:	95 07       	cpc	r25, r21
    44e6:	69 f4       	brne	.+26     	; 0x4502 <malloc+0x54>
    44e8:	10 97       	sbiw	r26, 0x00	; 0
    44ea:	31 f0       	breq	.+12     	; 0x44f8 <malloc+0x4a>
    44ec:	12 96       	adiw	r26, 0x02	; 2
    44ee:	0c 93       	st	X, r16
    44f0:	12 97       	sbiw	r26, 0x02	; 2
    44f2:	13 96       	adiw	r26, 0x03	; 3
    44f4:	1c 93       	st	X, r17
    44f6:	27 c0       	rjmp	.+78     	; 0x4546 <malloc+0x98>
    44f8:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <__flp>
    44fc:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <__flp+0x1>
    4500:	22 c0       	rjmp	.+68     	; 0x4546 <malloc+0x98>
    4502:	21 15       	cp	r18, r1
    4504:	31 05       	cpc	r19, r1
    4506:	19 f0       	breq	.+6      	; 0x450e <malloc+0x60>
    4508:	42 17       	cp	r20, r18
    450a:	53 07       	cpc	r21, r19
    450c:	18 f4       	brcc	.+6      	; 0x4514 <malloc+0x66>
    450e:	9a 01       	movw	r18, r20
    4510:	bd 01       	movw	r22, r26
    4512:	ef 01       	movw	r28, r30
    4514:	df 01       	movw	r26, r30
    4516:	f8 01       	movw	r30, r16
    4518:	db cf       	rjmp	.-74     	; 0x44d0 <malloc+0x22>
    451a:	21 15       	cp	r18, r1
    451c:	31 05       	cpc	r19, r1
    451e:	f9 f0       	breq	.+62     	; 0x455e <malloc+0xb0>
    4520:	28 1b       	sub	r18, r24
    4522:	39 0b       	sbc	r19, r25
    4524:	24 30       	cpi	r18, 0x04	; 4
    4526:	31 05       	cpc	r19, r1
    4528:	80 f4       	brcc	.+32     	; 0x454a <malloc+0x9c>
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	9b 81       	ldd	r25, Y+3	; 0x03
    452e:	61 15       	cp	r22, r1
    4530:	71 05       	cpc	r23, r1
    4532:	21 f0       	breq	.+8      	; 0x453c <malloc+0x8e>
    4534:	fb 01       	movw	r30, r22
    4536:	93 83       	std	Z+3, r25	; 0x03
    4538:	82 83       	std	Z+2, r24	; 0x02
    453a:	04 c0       	rjmp	.+8      	; 0x4544 <malloc+0x96>
    453c:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <__flp+0x1>
    4540:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <__flp>
    4544:	fe 01       	movw	r30, r28
    4546:	32 96       	adiw	r30, 0x02	; 2
    4548:	44 c0       	rjmp	.+136    	; 0x45d2 <malloc+0x124>
    454a:	fe 01       	movw	r30, r28
    454c:	e2 0f       	add	r30, r18
    454e:	f3 1f       	adc	r31, r19
    4550:	81 93       	st	Z+, r24
    4552:	91 93       	st	Z+, r25
    4554:	22 50       	subi	r18, 0x02	; 2
    4556:	31 09       	sbc	r19, r1
    4558:	39 83       	std	Y+1, r19	; 0x01
    455a:	28 83       	st	Y, r18
    455c:	3a c0       	rjmp	.+116    	; 0x45d2 <malloc+0x124>
    455e:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <__brkval>
    4562:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <__brkval+0x1>
    4566:	23 2b       	or	r18, r19
    4568:	41 f4       	brne	.+16     	; 0x457a <malloc+0xcc>
    456a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    456e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4572:	30 93 f4 03 	sts	0x03F4, r19	; 0x8003f4 <__brkval+0x1>
    4576:	20 93 f3 03 	sts	0x03F3, r18	; 0x8003f3 <__brkval>
    457a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    457e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4582:	21 15       	cp	r18, r1
    4584:	31 05       	cpc	r19, r1
    4586:	41 f4       	brne	.+16     	; 0x4598 <malloc+0xea>
    4588:	2d b7       	in	r18, 0x3d	; 61
    458a:	3e b7       	in	r19, 0x3e	; 62
    458c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4590:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4594:	24 1b       	sub	r18, r20
    4596:	35 0b       	sbc	r19, r21
    4598:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <__brkval>
    459c:	f0 91 f4 03 	lds	r31, 0x03F4	; 0x8003f4 <__brkval+0x1>
    45a0:	e2 17       	cp	r30, r18
    45a2:	f3 07       	cpc	r31, r19
    45a4:	a0 f4       	brcc	.+40     	; 0x45ce <malloc+0x120>
    45a6:	2e 1b       	sub	r18, r30
    45a8:	3f 0b       	sbc	r19, r31
    45aa:	28 17       	cp	r18, r24
    45ac:	39 07       	cpc	r19, r25
    45ae:	78 f0       	brcs	.+30     	; 0x45ce <malloc+0x120>
    45b0:	ac 01       	movw	r20, r24
    45b2:	4e 5f       	subi	r20, 0xFE	; 254
    45b4:	5f 4f       	sbci	r21, 0xFF	; 255
    45b6:	24 17       	cp	r18, r20
    45b8:	35 07       	cpc	r19, r21
    45ba:	48 f0       	brcs	.+18     	; 0x45ce <malloc+0x120>
    45bc:	4e 0f       	add	r20, r30
    45be:	5f 1f       	adc	r21, r31
    45c0:	50 93 f4 03 	sts	0x03F4, r21	; 0x8003f4 <__brkval+0x1>
    45c4:	40 93 f3 03 	sts	0x03F3, r20	; 0x8003f3 <__brkval>
    45c8:	81 93       	st	Z+, r24
    45ca:	91 93       	st	Z+, r25
    45cc:	02 c0       	rjmp	.+4      	; 0x45d2 <malloc+0x124>
    45ce:	e0 e0       	ldi	r30, 0x00	; 0
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	cf 01       	movw	r24, r30
    45d4:	df 91       	pop	r29
    45d6:	cf 91       	pop	r28
    45d8:	1f 91       	pop	r17
    45da:	0f 91       	pop	r16
    45dc:	08 95       	ret

000045de <free>:
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	00 97       	sbiw	r24, 0x00	; 0
    45e4:	09 f4       	brne	.+2      	; 0x45e8 <free+0xa>
    45e6:	81 c0       	rjmp	.+258    	; 0x46ea <free+0x10c>
    45e8:	fc 01       	movw	r30, r24
    45ea:	32 97       	sbiw	r30, 0x02	; 2
    45ec:	13 82       	std	Z+3, r1	; 0x03
    45ee:	12 82       	std	Z+2, r1	; 0x02
    45f0:	a0 91 f5 03 	lds	r26, 0x03F5	; 0x8003f5 <__flp>
    45f4:	b0 91 f6 03 	lds	r27, 0x03F6	; 0x8003f6 <__flp+0x1>
    45f8:	10 97       	sbiw	r26, 0x00	; 0
    45fa:	81 f4       	brne	.+32     	; 0x461c <free+0x3e>
    45fc:	20 81       	ld	r18, Z
    45fe:	31 81       	ldd	r19, Z+1	; 0x01
    4600:	82 0f       	add	r24, r18
    4602:	93 1f       	adc	r25, r19
    4604:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <__brkval>
    4608:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <__brkval+0x1>
    460c:	28 17       	cp	r18, r24
    460e:	39 07       	cpc	r19, r25
    4610:	51 f5       	brne	.+84     	; 0x4666 <free+0x88>
    4612:	f0 93 f4 03 	sts	0x03F4, r31	; 0x8003f4 <__brkval+0x1>
    4616:	e0 93 f3 03 	sts	0x03F3, r30	; 0x8003f3 <__brkval>
    461a:	67 c0       	rjmp	.+206    	; 0x46ea <free+0x10c>
    461c:	ed 01       	movw	r28, r26
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	ce 17       	cp	r28, r30
    4624:	df 07       	cpc	r29, r31
    4626:	40 f4       	brcc	.+16     	; 0x4638 <free+0x5a>
    4628:	4a 81       	ldd	r20, Y+2	; 0x02
    462a:	5b 81       	ldd	r21, Y+3	; 0x03
    462c:	9e 01       	movw	r18, r28
    462e:	41 15       	cp	r20, r1
    4630:	51 05       	cpc	r21, r1
    4632:	f1 f0       	breq	.+60     	; 0x4670 <free+0x92>
    4634:	ea 01       	movw	r28, r20
    4636:	f5 cf       	rjmp	.-22     	; 0x4622 <free+0x44>
    4638:	d3 83       	std	Z+3, r29	; 0x03
    463a:	c2 83       	std	Z+2, r28	; 0x02
    463c:	40 81       	ld	r20, Z
    463e:	51 81       	ldd	r21, Z+1	; 0x01
    4640:	84 0f       	add	r24, r20
    4642:	95 1f       	adc	r25, r21
    4644:	c8 17       	cp	r28, r24
    4646:	d9 07       	cpc	r29, r25
    4648:	59 f4       	brne	.+22     	; 0x4660 <free+0x82>
    464a:	88 81       	ld	r24, Y
    464c:	99 81       	ldd	r25, Y+1	; 0x01
    464e:	84 0f       	add	r24, r20
    4650:	95 1f       	adc	r25, r21
    4652:	02 96       	adiw	r24, 0x02	; 2
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	80 83       	st	Z, r24
    4658:	8a 81       	ldd	r24, Y+2	; 0x02
    465a:	9b 81       	ldd	r25, Y+3	; 0x03
    465c:	93 83       	std	Z+3, r25	; 0x03
    465e:	82 83       	std	Z+2, r24	; 0x02
    4660:	21 15       	cp	r18, r1
    4662:	31 05       	cpc	r19, r1
    4664:	29 f4       	brne	.+10     	; 0x4670 <free+0x92>
    4666:	f0 93 f6 03 	sts	0x03F6, r31	; 0x8003f6 <__flp+0x1>
    466a:	e0 93 f5 03 	sts	0x03F5, r30	; 0x8003f5 <__flp>
    466e:	3d c0       	rjmp	.+122    	; 0x46ea <free+0x10c>
    4670:	e9 01       	movw	r28, r18
    4672:	fb 83       	std	Y+3, r31	; 0x03
    4674:	ea 83       	std	Y+2, r30	; 0x02
    4676:	49 91       	ld	r20, Y+
    4678:	59 91       	ld	r21, Y+
    467a:	c4 0f       	add	r28, r20
    467c:	d5 1f       	adc	r29, r21
    467e:	ec 17       	cp	r30, r28
    4680:	fd 07       	cpc	r31, r29
    4682:	61 f4       	brne	.+24     	; 0x469c <free+0xbe>
    4684:	80 81       	ld	r24, Z
    4686:	91 81       	ldd	r25, Z+1	; 0x01
    4688:	84 0f       	add	r24, r20
    468a:	95 1f       	adc	r25, r21
    468c:	02 96       	adiw	r24, 0x02	; 2
    468e:	e9 01       	movw	r28, r18
    4690:	99 83       	std	Y+1, r25	; 0x01
    4692:	88 83       	st	Y, r24
    4694:	82 81       	ldd	r24, Z+2	; 0x02
    4696:	93 81       	ldd	r25, Z+3	; 0x03
    4698:	9b 83       	std	Y+3, r25	; 0x03
    469a:	8a 83       	std	Y+2, r24	; 0x02
    469c:	e0 e0       	ldi	r30, 0x00	; 0
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	12 96       	adiw	r26, 0x02	; 2
    46a2:	8d 91       	ld	r24, X+
    46a4:	9c 91       	ld	r25, X
    46a6:	13 97       	sbiw	r26, 0x03	; 3
    46a8:	00 97       	sbiw	r24, 0x00	; 0
    46aa:	19 f0       	breq	.+6      	; 0x46b2 <free+0xd4>
    46ac:	fd 01       	movw	r30, r26
    46ae:	dc 01       	movw	r26, r24
    46b0:	f7 cf       	rjmp	.-18     	; 0x46a0 <free+0xc2>
    46b2:	8d 91       	ld	r24, X+
    46b4:	9c 91       	ld	r25, X
    46b6:	11 97       	sbiw	r26, 0x01	; 1
    46b8:	9d 01       	movw	r18, r26
    46ba:	2e 5f       	subi	r18, 0xFE	; 254
    46bc:	3f 4f       	sbci	r19, 0xFF	; 255
    46be:	82 0f       	add	r24, r18
    46c0:	93 1f       	adc	r25, r19
    46c2:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <__brkval>
    46c6:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <__brkval+0x1>
    46ca:	28 17       	cp	r18, r24
    46cc:	39 07       	cpc	r19, r25
    46ce:	69 f4       	brne	.+26     	; 0x46ea <free+0x10c>
    46d0:	30 97       	sbiw	r30, 0x00	; 0
    46d2:	29 f4       	brne	.+10     	; 0x46de <free+0x100>
    46d4:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <__flp+0x1>
    46d8:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <__flp>
    46dc:	02 c0       	rjmp	.+4      	; 0x46e2 <free+0x104>
    46de:	13 82       	std	Z+3, r1	; 0x03
    46e0:	12 82       	std	Z+2, r1	; 0x02
    46e2:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <__brkval+0x1>
    46e6:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <__brkval>
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	08 95       	ret

000046f0 <abort>:
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	f8 94       	cli
    46f6:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <__do_global_dtors>

000046fa <memset>:
    46fa:	dc 01       	movw	r26, r24
    46fc:	01 c0       	rjmp	.+2      	; 0x4700 <memset+0x6>
    46fe:	6d 93       	st	X+, r22
    4700:	41 50       	subi	r20, 0x01	; 1
    4702:	50 40       	sbci	r21, 0x00	; 0
    4704:	e0 f7       	brcc	.-8      	; 0x46fe <memset+0x4>
    4706:	08 95       	ret

00004708 <sprintf>:
    4708:	ae e0       	ldi	r26, 0x0E	; 14
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	ea e8       	ldi	r30, 0x8A	; 138
    470e:	f3 e2       	ldi	r31, 0x23	; 35
    4710:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__prologue_saves__+0x1c>
    4714:	0d 89       	ldd	r16, Y+21	; 0x15
    4716:	1e 89       	ldd	r17, Y+22	; 0x16
    4718:	86 e0       	ldi	r24, 0x06	; 6
    471a:	8c 83       	std	Y+4, r24	; 0x04
    471c:	1a 83       	std	Y+2, r17	; 0x02
    471e:	09 83       	std	Y+1, r16	; 0x01
    4720:	8f ef       	ldi	r24, 0xFF	; 255
    4722:	9f e7       	ldi	r25, 0x7F	; 127
    4724:	9e 83       	std	Y+6, r25	; 0x06
    4726:	8d 83       	std	Y+5, r24	; 0x05
    4728:	ae 01       	movw	r20, r28
    472a:	47 5e       	subi	r20, 0xE7	; 231
    472c:	5f 4f       	sbci	r21, 0xFF	; 255
    472e:	6f 89       	ldd	r22, Y+23	; 0x17
    4730:	78 8d       	ldd	r23, Y+24	; 0x18
    4732:	ce 01       	movw	r24, r28
    4734:	01 96       	adiw	r24, 0x01	; 1
    4736:	0e 94 a6 23 	call	0x474c	; 0x474c <vfprintf>
    473a:	ef 81       	ldd	r30, Y+7	; 0x07
    473c:	f8 85       	ldd	r31, Y+8	; 0x08
    473e:	e0 0f       	add	r30, r16
    4740:	f1 1f       	adc	r31, r17
    4742:	10 82       	st	Z, r1
    4744:	2e 96       	adiw	r28, 0x0e	; 14
    4746:	e4 e0       	ldi	r30, 0x04	; 4
    4748:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <__epilogue_restores__+0x1c>

0000474c <vfprintf>:
    474c:	ab e0       	ldi	r26, 0x0B	; 11
    474e:	b0 e0       	ldi	r27, 0x00	; 0
    4750:	ec ea       	ldi	r30, 0xAC	; 172
    4752:	f3 e2       	ldi	r31, 0x23	; 35
    4754:	0c 94 37 26 	jmp	0x4c6e	; 0x4c6e <__prologue_saves__>
    4758:	6c 01       	movw	r12, r24
    475a:	7b 01       	movw	r14, r22
    475c:	8a 01       	movw	r16, r20
    475e:	fc 01       	movw	r30, r24
    4760:	17 82       	std	Z+7, r1	; 0x07
    4762:	16 82       	std	Z+6, r1	; 0x06
    4764:	83 81       	ldd	r24, Z+3	; 0x03
    4766:	81 ff       	sbrs	r24, 1
    4768:	cc c1       	rjmp	.+920    	; 0x4b02 <vfprintf+0x3b6>
    476a:	ce 01       	movw	r24, r28
    476c:	01 96       	adiw	r24, 0x01	; 1
    476e:	3c 01       	movw	r6, r24
    4770:	f6 01       	movw	r30, r12
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	f7 01       	movw	r30, r14
    4776:	93 fd       	sbrc	r25, 3
    4778:	85 91       	lpm	r24, Z+
    477a:	93 ff       	sbrs	r25, 3
    477c:	81 91       	ld	r24, Z+
    477e:	7f 01       	movw	r14, r30
    4780:	88 23       	and	r24, r24
    4782:	09 f4       	brne	.+2      	; 0x4786 <vfprintf+0x3a>
    4784:	ba c1       	rjmp	.+884    	; 0x4afa <vfprintf+0x3ae>
    4786:	85 32       	cpi	r24, 0x25	; 37
    4788:	39 f4       	brne	.+14     	; 0x4798 <vfprintf+0x4c>
    478a:	93 fd       	sbrc	r25, 3
    478c:	85 91       	lpm	r24, Z+
    478e:	93 ff       	sbrs	r25, 3
    4790:	81 91       	ld	r24, Z+
    4792:	7f 01       	movw	r14, r30
    4794:	85 32       	cpi	r24, 0x25	; 37
    4796:	29 f4       	brne	.+10     	; 0x47a2 <vfprintf+0x56>
    4798:	b6 01       	movw	r22, r12
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    47a0:	e7 cf       	rjmp	.-50     	; 0x4770 <vfprintf+0x24>
    47a2:	91 2c       	mov	r9, r1
    47a4:	21 2c       	mov	r2, r1
    47a6:	31 2c       	mov	r3, r1
    47a8:	ff e1       	ldi	r31, 0x1F	; 31
    47aa:	f3 15       	cp	r31, r3
    47ac:	d8 f0       	brcs	.+54     	; 0x47e4 <vfprintf+0x98>
    47ae:	8b 32       	cpi	r24, 0x2B	; 43
    47b0:	79 f0       	breq	.+30     	; 0x47d0 <vfprintf+0x84>
    47b2:	38 f4       	brcc	.+14     	; 0x47c2 <vfprintf+0x76>
    47b4:	80 32       	cpi	r24, 0x20	; 32
    47b6:	79 f0       	breq	.+30     	; 0x47d6 <vfprintf+0x8a>
    47b8:	83 32       	cpi	r24, 0x23	; 35
    47ba:	a1 f4       	brne	.+40     	; 0x47e4 <vfprintf+0x98>
    47bc:	23 2d       	mov	r18, r3
    47be:	20 61       	ori	r18, 0x10	; 16
    47c0:	1d c0       	rjmp	.+58     	; 0x47fc <vfprintf+0xb0>
    47c2:	8d 32       	cpi	r24, 0x2D	; 45
    47c4:	61 f0       	breq	.+24     	; 0x47de <vfprintf+0x92>
    47c6:	80 33       	cpi	r24, 0x30	; 48
    47c8:	69 f4       	brne	.+26     	; 0x47e4 <vfprintf+0x98>
    47ca:	23 2d       	mov	r18, r3
    47cc:	21 60       	ori	r18, 0x01	; 1
    47ce:	16 c0       	rjmp	.+44     	; 0x47fc <vfprintf+0xb0>
    47d0:	83 2d       	mov	r24, r3
    47d2:	82 60       	ori	r24, 0x02	; 2
    47d4:	38 2e       	mov	r3, r24
    47d6:	e3 2d       	mov	r30, r3
    47d8:	e4 60       	ori	r30, 0x04	; 4
    47da:	3e 2e       	mov	r3, r30
    47dc:	2a c0       	rjmp	.+84     	; 0x4832 <vfprintf+0xe6>
    47de:	f3 2d       	mov	r31, r3
    47e0:	f8 60       	ori	r31, 0x08	; 8
    47e2:	1d c0       	rjmp	.+58     	; 0x481e <vfprintf+0xd2>
    47e4:	37 fc       	sbrc	r3, 7
    47e6:	2d c0       	rjmp	.+90     	; 0x4842 <vfprintf+0xf6>
    47e8:	20 ed       	ldi	r18, 0xD0	; 208
    47ea:	28 0f       	add	r18, r24
    47ec:	2a 30       	cpi	r18, 0x0A	; 10
    47ee:	40 f0       	brcs	.+16     	; 0x4800 <vfprintf+0xb4>
    47f0:	8e 32       	cpi	r24, 0x2E	; 46
    47f2:	b9 f4       	brne	.+46     	; 0x4822 <vfprintf+0xd6>
    47f4:	36 fc       	sbrc	r3, 6
    47f6:	81 c1       	rjmp	.+770    	; 0x4afa <vfprintf+0x3ae>
    47f8:	23 2d       	mov	r18, r3
    47fa:	20 64       	ori	r18, 0x40	; 64
    47fc:	32 2e       	mov	r3, r18
    47fe:	19 c0       	rjmp	.+50     	; 0x4832 <vfprintf+0xe6>
    4800:	36 fe       	sbrs	r3, 6
    4802:	06 c0       	rjmp	.+12     	; 0x4810 <vfprintf+0xc4>
    4804:	8a e0       	ldi	r24, 0x0A	; 10
    4806:	98 9e       	mul	r9, r24
    4808:	20 0d       	add	r18, r0
    480a:	11 24       	eor	r1, r1
    480c:	92 2e       	mov	r9, r18
    480e:	11 c0       	rjmp	.+34     	; 0x4832 <vfprintf+0xe6>
    4810:	ea e0       	ldi	r30, 0x0A	; 10
    4812:	2e 9e       	mul	r2, r30
    4814:	20 0d       	add	r18, r0
    4816:	11 24       	eor	r1, r1
    4818:	22 2e       	mov	r2, r18
    481a:	f3 2d       	mov	r31, r3
    481c:	f0 62       	ori	r31, 0x20	; 32
    481e:	3f 2e       	mov	r3, r31
    4820:	08 c0       	rjmp	.+16     	; 0x4832 <vfprintf+0xe6>
    4822:	8c 36       	cpi	r24, 0x6C	; 108
    4824:	21 f4       	brne	.+8      	; 0x482e <vfprintf+0xe2>
    4826:	83 2d       	mov	r24, r3
    4828:	80 68       	ori	r24, 0x80	; 128
    482a:	38 2e       	mov	r3, r24
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <vfprintf+0xe6>
    482e:	88 36       	cpi	r24, 0x68	; 104
    4830:	41 f4       	brne	.+16     	; 0x4842 <vfprintf+0xf6>
    4832:	f7 01       	movw	r30, r14
    4834:	93 fd       	sbrc	r25, 3
    4836:	85 91       	lpm	r24, Z+
    4838:	93 ff       	sbrs	r25, 3
    483a:	81 91       	ld	r24, Z+
    483c:	7f 01       	movw	r14, r30
    483e:	81 11       	cpse	r24, r1
    4840:	b3 cf       	rjmp	.-154    	; 0x47a8 <vfprintf+0x5c>
    4842:	98 2f       	mov	r25, r24
    4844:	9f 7d       	andi	r25, 0xDF	; 223
    4846:	95 54       	subi	r25, 0x45	; 69
    4848:	93 30       	cpi	r25, 0x03	; 3
    484a:	28 f4       	brcc	.+10     	; 0x4856 <vfprintf+0x10a>
    484c:	0c 5f       	subi	r16, 0xFC	; 252
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
    4850:	9f e3       	ldi	r25, 0x3F	; 63
    4852:	99 83       	std	Y+1, r25	; 0x01
    4854:	0d c0       	rjmp	.+26     	; 0x4870 <vfprintf+0x124>
    4856:	83 36       	cpi	r24, 0x63	; 99
    4858:	31 f0       	breq	.+12     	; 0x4866 <vfprintf+0x11a>
    485a:	83 37       	cpi	r24, 0x73	; 115
    485c:	71 f0       	breq	.+28     	; 0x487a <vfprintf+0x12e>
    485e:	83 35       	cpi	r24, 0x53	; 83
    4860:	09 f0       	breq	.+2      	; 0x4864 <vfprintf+0x118>
    4862:	59 c0       	rjmp	.+178    	; 0x4916 <vfprintf+0x1ca>
    4864:	21 c0       	rjmp	.+66     	; 0x48a8 <vfprintf+0x15c>
    4866:	f8 01       	movw	r30, r16
    4868:	80 81       	ld	r24, Z
    486a:	89 83       	std	Y+1, r24	; 0x01
    486c:	0e 5f       	subi	r16, 0xFE	; 254
    486e:	1f 4f       	sbci	r17, 0xFF	; 255
    4870:	88 24       	eor	r8, r8
    4872:	83 94       	inc	r8
    4874:	91 2c       	mov	r9, r1
    4876:	53 01       	movw	r10, r6
    4878:	13 c0       	rjmp	.+38     	; 0x48a0 <vfprintf+0x154>
    487a:	28 01       	movw	r4, r16
    487c:	f2 e0       	ldi	r31, 0x02	; 2
    487e:	4f 0e       	add	r4, r31
    4880:	51 1c       	adc	r5, r1
    4882:	f8 01       	movw	r30, r16
    4884:	a0 80       	ld	r10, Z
    4886:	b1 80       	ldd	r11, Z+1	; 0x01
    4888:	36 fe       	sbrs	r3, 6
    488a:	03 c0       	rjmp	.+6      	; 0x4892 <vfprintf+0x146>
    488c:	69 2d       	mov	r22, r9
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <vfprintf+0x14a>
    4892:	6f ef       	ldi	r22, 0xFF	; 255
    4894:	7f ef       	ldi	r23, 0xFF	; 255
    4896:	c5 01       	movw	r24, r10
    4898:	0e 94 92 25 	call	0x4b24	; 0x4b24 <strnlen>
    489c:	4c 01       	movw	r8, r24
    489e:	82 01       	movw	r16, r4
    48a0:	f3 2d       	mov	r31, r3
    48a2:	ff 77       	andi	r31, 0x7F	; 127
    48a4:	3f 2e       	mov	r3, r31
    48a6:	16 c0       	rjmp	.+44     	; 0x48d4 <vfprintf+0x188>
    48a8:	28 01       	movw	r4, r16
    48aa:	22 e0       	ldi	r18, 0x02	; 2
    48ac:	42 0e       	add	r4, r18
    48ae:	51 1c       	adc	r5, r1
    48b0:	f8 01       	movw	r30, r16
    48b2:	a0 80       	ld	r10, Z
    48b4:	b1 80       	ldd	r11, Z+1	; 0x01
    48b6:	36 fe       	sbrs	r3, 6
    48b8:	03 c0       	rjmp	.+6      	; 0x48c0 <vfprintf+0x174>
    48ba:	69 2d       	mov	r22, r9
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <vfprintf+0x178>
    48c0:	6f ef       	ldi	r22, 0xFF	; 255
    48c2:	7f ef       	ldi	r23, 0xFF	; 255
    48c4:	c5 01       	movw	r24, r10
    48c6:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <strnlen_P>
    48ca:	4c 01       	movw	r8, r24
    48cc:	f3 2d       	mov	r31, r3
    48ce:	f0 68       	ori	r31, 0x80	; 128
    48d0:	3f 2e       	mov	r3, r31
    48d2:	82 01       	movw	r16, r4
    48d4:	33 fc       	sbrc	r3, 3
    48d6:	1b c0       	rjmp	.+54     	; 0x490e <vfprintf+0x1c2>
    48d8:	82 2d       	mov	r24, r2
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	88 16       	cp	r8, r24
    48de:	99 06       	cpc	r9, r25
    48e0:	b0 f4       	brcc	.+44     	; 0x490e <vfprintf+0x1c2>
    48e2:	b6 01       	movw	r22, r12
    48e4:	80 e2       	ldi	r24, 0x20	; 32
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    48ec:	2a 94       	dec	r2
    48ee:	f4 cf       	rjmp	.-24     	; 0x48d8 <vfprintf+0x18c>
    48f0:	f5 01       	movw	r30, r10
    48f2:	37 fc       	sbrc	r3, 7
    48f4:	85 91       	lpm	r24, Z+
    48f6:	37 fe       	sbrs	r3, 7
    48f8:	81 91       	ld	r24, Z+
    48fa:	5f 01       	movw	r10, r30
    48fc:	b6 01       	movw	r22, r12
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4904:	21 10       	cpse	r2, r1
    4906:	2a 94       	dec	r2
    4908:	21 e0       	ldi	r18, 0x01	; 1
    490a:	82 1a       	sub	r8, r18
    490c:	91 08       	sbc	r9, r1
    490e:	81 14       	cp	r8, r1
    4910:	91 04       	cpc	r9, r1
    4912:	71 f7       	brne	.-36     	; 0x48f0 <vfprintf+0x1a4>
    4914:	e8 c0       	rjmp	.+464    	; 0x4ae6 <vfprintf+0x39a>
    4916:	84 36       	cpi	r24, 0x64	; 100
    4918:	11 f0       	breq	.+4      	; 0x491e <vfprintf+0x1d2>
    491a:	89 36       	cpi	r24, 0x69	; 105
    491c:	41 f5       	brne	.+80     	; 0x496e <vfprintf+0x222>
    491e:	f8 01       	movw	r30, r16
    4920:	37 fe       	sbrs	r3, 7
    4922:	07 c0       	rjmp	.+14     	; 0x4932 <vfprintf+0x1e6>
    4924:	60 81       	ld	r22, Z
    4926:	71 81       	ldd	r23, Z+1	; 0x01
    4928:	82 81       	ldd	r24, Z+2	; 0x02
    492a:	93 81       	ldd	r25, Z+3	; 0x03
    492c:	0c 5f       	subi	r16, 0xFC	; 252
    492e:	1f 4f       	sbci	r17, 0xFF	; 255
    4930:	08 c0       	rjmp	.+16     	; 0x4942 <vfprintf+0x1f6>
    4932:	60 81       	ld	r22, Z
    4934:	71 81       	ldd	r23, Z+1	; 0x01
    4936:	07 2e       	mov	r0, r23
    4938:	00 0c       	add	r0, r0
    493a:	88 0b       	sbc	r24, r24
    493c:	99 0b       	sbc	r25, r25
    493e:	0e 5f       	subi	r16, 0xFE	; 254
    4940:	1f 4f       	sbci	r17, 0xFF	; 255
    4942:	f3 2d       	mov	r31, r3
    4944:	ff 76       	andi	r31, 0x6F	; 111
    4946:	3f 2e       	mov	r3, r31
    4948:	97 ff       	sbrs	r25, 7
    494a:	09 c0       	rjmp	.+18     	; 0x495e <vfprintf+0x212>
    494c:	90 95       	com	r25
    494e:	80 95       	com	r24
    4950:	70 95       	com	r23
    4952:	61 95       	neg	r22
    4954:	7f 4f       	sbci	r23, 0xFF	; 255
    4956:	8f 4f       	sbci	r24, 0xFF	; 255
    4958:	9f 4f       	sbci	r25, 0xFF	; 255
    495a:	f0 68       	ori	r31, 0x80	; 128
    495c:	3f 2e       	mov	r3, r31
    495e:	2a e0       	ldi	r18, 0x0A	; 10
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	a3 01       	movw	r20, r6
    4964:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__ultoa_invert>
    4968:	88 2e       	mov	r8, r24
    496a:	86 18       	sub	r8, r6
    496c:	45 c0       	rjmp	.+138    	; 0x49f8 <vfprintf+0x2ac>
    496e:	85 37       	cpi	r24, 0x75	; 117
    4970:	31 f4       	brne	.+12     	; 0x497e <vfprintf+0x232>
    4972:	23 2d       	mov	r18, r3
    4974:	2f 7e       	andi	r18, 0xEF	; 239
    4976:	b2 2e       	mov	r11, r18
    4978:	2a e0       	ldi	r18, 0x0A	; 10
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	25 c0       	rjmp	.+74     	; 0x49c8 <vfprintf+0x27c>
    497e:	93 2d       	mov	r25, r3
    4980:	99 7f       	andi	r25, 0xF9	; 249
    4982:	b9 2e       	mov	r11, r25
    4984:	8f 36       	cpi	r24, 0x6F	; 111
    4986:	c1 f0       	breq	.+48     	; 0x49b8 <vfprintf+0x26c>
    4988:	18 f4       	brcc	.+6      	; 0x4990 <vfprintf+0x244>
    498a:	88 35       	cpi	r24, 0x58	; 88
    498c:	79 f0       	breq	.+30     	; 0x49ac <vfprintf+0x260>
    498e:	b5 c0       	rjmp	.+362    	; 0x4afa <vfprintf+0x3ae>
    4990:	80 37       	cpi	r24, 0x70	; 112
    4992:	19 f0       	breq	.+6      	; 0x499a <vfprintf+0x24e>
    4994:	88 37       	cpi	r24, 0x78	; 120
    4996:	21 f0       	breq	.+8      	; 0x49a0 <vfprintf+0x254>
    4998:	b0 c0       	rjmp	.+352    	; 0x4afa <vfprintf+0x3ae>
    499a:	e9 2f       	mov	r30, r25
    499c:	e0 61       	ori	r30, 0x10	; 16
    499e:	be 2e       	mov	r11, r30
    49a0:	b4 fe       	sbrs	r11, 4
    49a2:	0d c0       	rjmp	.+26     	; 0x49be <vfprintf+0x272>
    49a4:	fb 2d       	mov	r31, r11
    49a6:	f4 60       	ori	r31, 0x04	; 4
    49a8:	bf 2e       	mov	r11, r31
    49aa:	09 c0       	rjmp	.+18     	; 0x49be <vfprintf+0x272>
    49ac:	34 fe       	sbrs	r3, 4
    49ae:	0a c0       	rjmp	.+20     	; 0x49c4 <vfprintf+0x278>
    49b0:	29 2f       	mov	r18, r25
    49b2:	26 60       	ori	r18, 0x06	; 6
    49b4:	b2 2e       	mov	r11, r18
    49b6:	06 c0       	rjmp	.+12     	; 0x49c4 <vfprintf+0x278>
    49b8:	28 e0       	ldi	r18, 0x08	; 8
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	05 c0       	rjmp	.+10     	; 0x49c8 <vfprintf+0x27c>
    49be:	20 e1       	ldi	r18, 0x10	; 16
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	02 c0       	rjmp	.+4      	; 0x49c8 <vfprintf+0x27c>
    49c4:	20 e1       	ldi	r18, 0x10	; 16
    49c6:	32 e0       	ldi	r19, 0x02	; 2
    49c8:	f8 01       	movw	r30, r16
    49ca:	b7 fe       	sbrs	r11, 7
    49cc:	07 c0       	rjmp	.+14     	; 0x49dc <vfprintf+0x290>
    49ce:	60 81       	ld	r22, Z
    49d0:	71 81       	ldd	r23, Z+1	; 0x01
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	0c 5f       	subi	r16, 0xFC	; 252
    49d8:	1f 4f       	sbci	r17, 0xFF	; 255
    49da:	06 c0       	rjmp	.+12     	; 0x49e8 <vfprintf+0x29c>
    49dc:	60 81       	ld	r22, Z
    49de:	71 81       	ldd	r23, Z+1	; 0x01
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	0e 5f       	subi	r16, 0xFE	; 254
    49e6:	1f 4f       	sbci	r17, 0xFF	; 255
    49e8:	a3 01       	movw	r20, r6
    49ea:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__ultoa_invert>
    49ee:	88 2e       	mov	r8, r24
    49f0:	86 18       	sub	r8, r6
    49f2:	fb 2d       	mov	r31, r11
    49f4:	ff 77       	andi	r31, 0x7F	; 127
    49f6:	3f 2e       	mov	r3, r31
    49f8:	36 fe       	sbrs	r3, 6
    49fa:	0d c0       	rjmp	.+26     	; 0x4a16 <vfprintf+0x2ca>
    49fc:	23 2d       	mov	r18, r3
    49fe:	2e 7f       	andi	r18, 0xFE	; 254
    4a00:	a2 2e       	mov	r10, r18
    4a02:	89 14       	cp	r8, r9
    4a04:	58 f4       	brcc	.+22     	; 0x4a1c <vfprintf+0x2d0>
    4a06:	34 fe       	sbrs	r3, 4
    4a08:	0b c0       	rjmp	.+22     	; 0x4a20 <vfprintf+0x2d4>
    4a0a:	32 fc       	sbrc	r3, 2
    4a0c:	09 c0       	rjmp	.+18     	; 0x4a20 <vfprintf+0x2d4>
    4a0e:	83 2d       	mov	r24, r3
    4a10:	8e 7e       	andi	r24, 0xEE	; 238
    4a12:	a8 2e       	mov	r10, r24
    4a14:	05 c0       	rjmp	.+10     	; 0x4a20 <vfprintf+0x2d4>
    4a16:	b8 2c       	mov	r11, r8
    4a18:	a3 2c       	mov	r10, r3
    4a1a:	03 c0       	rjmp	.+6      	; 0x4a22 <vfprintf+0x2d6>
    4a1c:	b8 2c       	mov	r11, r8
    4a1e:	01 c0       	rjmp	.+2      	; 0x4a22 <vfprintf+0x2d6>
    4a20:	b9 2c       	mov	r11, r9
    4a22:	a4 fe       	sbrs	r10, 4
    4a24:	0f c0       	rjmp	.+30     	; 0x4a44 <vfprintf+0x2f8>
    4a26:	fe 01       	movw	r30, r28
    4a28:	e8 0d       	add	r30, r8
    4a2a:	f1 1d       	adc	r31, r1
    4a2c:	80 81       	ld	r24, Z
    4a2e:	80 33       	cpi	r24, 0x30	; 48
    4a30:	21 f4       	brne	.+8      	; 0x4a3a <vfprintf+0x2ee>
    4a32:	9a 2d       	mov	r25, r10
    4a34:	99 7e       	andi	r25, 0xE9	; 233
    4a36:	a9 2e       	mov	r10, r25
    4a38:	09 c0       	rjmp	.+18     	; 0x4a4c <vfprintf+0x300>
    4a3a:	a2 fe       	sbrs	r10, 2
    4a3c:	06 c0       	rjmp	.+12     	; 0x4a4a <vfprintf+0x2fe>
    4a3e:	b3 94       	inc	r11
    4a40:	b3 94       	inc	r11
    4a42:	04 c0       	rjmp	.+8      	; 0x4a4c <vfprintf+0x300>
    4a44:	8a 2d       	mov	r24, r10
    4a46:	86 78       	andi	r24, 0x86	; 134
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <vfprintf+0x300>
    4a4a:	b3 94       	inc	r11
    4a4c:	a3 fc       	sbrc	r10, 3
    4a4e:	11 c0       	rjmp	.+34     	; 0x4a72 <vfprintf+0x326>
    4a50:	a0 fe       	sbrs	r10, 0
    4a52:	06 c0       	rjmp	.+12     	; 0x4a60 <vfprintf+0x314>
    4a54:	b2 14       	cp	r11, r2
    4a56:	88 f4       	brcc	.+34     	; 0x4a7a <vfprintf+0x32e>
    4a58:	28 0c       	add	r2, r8
    4a5a:	92 2c       	mov	r9, r2
    4a5c:	9b 18       	sub	r9, r11
    4a5e:	0e c0       	rjmp	.+28     	; 0x4a7c <vfprintf+0x330>
    4a60:	b2 14       	cp	r11, r2
    4a62:	60 f4       	brcc	.+24     	; 0x4a7c <vfprintf+0x330>
    4a64:	b6 01       	movw	r22, r12
    4a66:	80 e2       	ldi	r24, 0x20	; 32
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4a6e:	b3 94       	inc	r11
    4a70:	f7 cf       	rjmp	.-18     	; 0x4a60 <vfprintf+0x314>
    4a72:	b2 14       	cp	r11, r2
    4a74:	18 f4       	brcc	.+6      	; 0x4a7c <vfprintf+0x330>
    4a76:	2b 18       	sub	r2, r11
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <vfprintf+0x332>
    4a7a:	98 2c       	mov	r9, r8
    4a7c:	21 2c       	mov	r2, r1
    4a7e:	a4 fe       	sbrs	r10, 4
    4a80:	10 c0       	rjmp	.+32     	; 0x4aa2 <vfprintf+0x356>
    4a82:	b6 01       	movw	r22, r12
    4a84:	80 e3       	ldi	r24, 0x30	; 48
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4a8c:	a2 fe       	sbrs	r10, 2
    4a8e:	17 c0       	rjmp	.+46     	; 0x4abe <vfprintf+0x372>
    4a90:	a1 fc       	sbrc	r10, 1
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <vfprintf+0x34e>
    4a94:	88 e7       	ldi	r24, 0x78	; 120
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	02 c0       	rjmp	.+4      	; 0x4a9e <vfprintf+0x352>
    4a9a:	88 e5       	ldi	r24, 0x58	; 88
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	b6 01       	movw	r22, r12
    4aa0:	0c c0       	rjmp	.+24     	; 0x4aba <vfprintf+0x36e>
    4aa2:	8a 2d       	mov	r24, r10
    4aa4:	86 78       	andi	r24, 0x86	; 134
    4aa6:	59 f0       	breq	.+22     	; 0x4abe <vfprintf+0x372>
    4aa8:	a1 fe       	sbrs	r10, 1
    4aaa:	02 c0       	rjmp	.+4      	; 0x4ab0 <vfprintf+0x364>
    4aac:	8b e2       	ldi	r24, 0x2B	; 43
    4aae:	01 c0       	rjmp	.+2      	; 0x4ab2 <vfprintf+0x366>
    4ab0:	80 e2       	ldi	r24, 0x20	; 32
    4ab2:	a7 fc       	sbrc	r10, 7
    4ab4:	8d e2       	ldi	r24, 0x2D	; 45
    4ab6:	b6 01       	movw	r22, r12
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4abe:	89 14       	cp	r8, r9
    4ac0:	38 f4       	brcc	.+14     	; 0x4ad0 <vfprintf+0x384>
    4ac2:	b6 01       	movw	r22, r12
    4ac4:	80 e3       	ldi	r24, 0x30	; 48
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4acc:	9a 94       	dec	r9
    4ace:	f7 cf       	rjmp	.-18     	; 0x4abe <vfprintf+0x372>
    4ad0:	8a 94       	dec	r8
    4ad2:	f3 01       	movw	r30, r6
    4ad4:	e8 0d       	add	r30, r8
    4ad6:	f1 1d       	adc	r31, r1
    4ad8:	80 81       	ld	r24, Z
    4ada:	b6 01       	movw	r22, r12
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4ae2:	81 10       	cpse	r8, r1
    4ae4:	f5 cf       	rjmp	.-22     	; 0x4ad0 <vfprintf+0x384>
    4ae6:	22 20       	and	r2, r2
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <vfprintf+0x3a0>
    4aea:	42 ce       	rjmp	.-892    	; 0x4770 <vfprintf+0x24>
    4aec:	b6 01       	movw	r22, r12
    4aee:	80 e2       	ldi	r24, 0x20	; 32
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <fputc>
    4af6:	2a 94       	dec	r2
    4af8:	f6 cf       	rjmp	.-20     	; 0x4ae6 <vfprintf+0x39a>
    4afa:	f6 01       	movw	r30, r12
    4afc:	86 81       	ldd	r24, Z+6	; 0x06
    4afe:	97 81       	ldd	r25, Z+7	; 0x07
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <vfprintf+0x3ba>
    4b02:	8f ef       	ldi	r24, 0xFF	; 255
    4b04:	9f ef       	ldi	r25, 0xFF	; 255
    4b06:	2b 96       	adiw	r28, 0x0b	; 11
    4b08:	e2 e1       	ldi	r30, 0x12	; 18
    4b0a:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <__epilogue_restores__>

00004b0e <strnlen_P>:
    4b0e:	fc 01       	movw	r30, r24
    4b10:	05 90       	lpm	r0, Z+
    4b12:	61 50       	subi	r22, 0x01	; 1
    4b14:	70 40       	sbci	r23, 0x00	; 0
    4b16:	01 10       	cpse	r0, r1
    4b18:	d8 f7       	brcc	.-10     	; 0x4b10 <strnlen_P+0x2>
    4b1a:	80 95       	com	r24
    4b1c:	90 95       	com	r25
    4b1e:	8e 0f       	add	r24, r30
    4b20:	9f 1f       	adc	r25, r31
    4b22:	08 95       	ret

00004b24 <strnlen>:
    4b24:	fc 01       	movw	r30, r24
    4b26:	61 50       	subi	r22, 0x01	; 1
    4b28:	70 40       	sbci	r23, 0x00	; 0
    4b2a:	01 90       	ld	r0, Z+
    4b2c:	01 10       	cpse	r0, r1
    4b2e:	d8 f7       	brcc	.-10     	; 0x4b26 <strnlen+0x2>
    4b30:	80 95       	com	r24
    4b32:	90 95       	com	r25
    4b34:	8e 0f       	add	r24, r30
    4b36:	9f 1f       	adc	r25, r31
    4b38:	08 95       	ret

00004b3a <fputc>:
    4b3a:	0f 93       	push	r16
    4b3c:	1f 93       	push	r17
    4b3e:	cf 93       	push	r28
    4b40:	df 93       	push	r29
    4b42:	fb 01       	movw	r30, r22
    4b44:	23 81       	ldd	r18, Z+3	; 0x03
    4b46:	21 fd       	sbrc	r18, 1
    4b48:	03 c0       	rjmp	.+6      	; 0x4b50 <fputc+0x16>
    4b4a:	8f ef       	ldi	r24, 0xFF	; 255
    4b4c:	9f ef       	ldi	r25, 0xFF	; 255
    4b4e:	2c c0       	rjmp	.+88     	; 0x4ba8 <fputc+0x6e>
    4b50:	22 ff       	sbrs	r18, 2
    4b52:	16 c0       	rjmp	.+44     	; 0x4b80 <fputc+0x46>
    4b54:	46 81       	ldd	r20, Z+6	; 0x06
    4b56:	57 81       	ldd	r21, Z+7	; 0x07
    4b58:	24 81       	ldd	r18, Z+4	; 0x04
    4b5a:	35 81       	ldd	r19, Z+5	; 0x05
    4b5c:	42 17       	cp	r20, r18
    4b5e:	53 07       	cpc	r21, r19
    4b60:	44 f4       	brge	.+16     	; 0x4b72 <fputc+0x38>
    4b62:	a0 81       	ld	r26, Z
    4b64:	b1 81       	ldd	r27, Z+1	; 0x01
    4b66:	9d 01       	movw	r18, r26
    4b68:	2f 5f       	subi	r18, 0xFF	; 255
    4b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6c:	31 83       	std	Z+1, r19	; 0x01
    4b6e:	20 83       	st	Z, r18
    4b70:	8c 93       	st	X, r24
    4b72:	26 81       	ldd	r18, Z+6	; 0x06
    4b74:	37 81       	ldd	r19, Z+7	; 0x07
    4b76:	2f 5f       	subi	r18, 0xFF	; 255
    4b78:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7a:	37 83       	std	Z+7, r19	; 0x07
    4b7c:	26 83       	std	Z+6, r18	; 0x06
    4b7e:	14 c0       	rjmp	.+40     	; 0x4ba8 <fputc+0x6e>
    4b80:	8b 01       	movw	r16, r22
    4b82:	ec 01       	movw	r28, r24
    4b84:	fb 01       	movw	r30, r22
    4b86:	00 84       	ldd	r0, Z+8	; 0x08
    4b88:	f1 85       	ldd	r31, Z+9	; 0x09
    4b8a:	e0 2d       	mov	r30, r0
    4b8c:	09 95       	icall
    4b8e:	89 2b       	or	r24, r25
    4b90:	e1 f6       	brne	.-72     	; 0x4b4a <fputc+0x10>
    4b92:	d8 01       	movw	r26, r16
    4b94:	16 96       	adiw	r26, 0x06	; 6
    4b96:	8d 91       	ld	r24, X+
    4b98:	9c 91       	ld	r25, X
    4b9a:	17 97       	sbiw	r26, 0x07	; 7
    4b9c:	01 96       	adiw	r24, 0x01	; 1
    4b9e:	17 96       	adiw	r26, 0x07	; 7
    4ba0:	9c 93       	st	X, r25
    4ba2:	8e 93       	st	-X, r24
    4ba4:	16 97       	sbiw	r26, 0x06	; 6
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	1f 91       	pop	r17
    4bae:	0f 91       	pop	r16
    4bb0:	08 95       	ret

00004bb2 <__ultoa_invert>:
    4bb2:	fa 01       	movw	r30, r20
    4bb4:	aa 27       	eor	r26, r26
    4bb6:	28 30       	cpi	r18, 0x08	; 8
    4bb8:	51 f1       	breq	.+84     	; 0x4c0e <__ultoa_invert+0x5c>
    4bba:	20 31       	cpi	r18, 0x10	; 16
    4bbc:	81 f1       	breq	.+96     	; 0x4c1e <__ultoa_invert+0x6c>
    4bbe:	e8 94       	clt
    4bc0:	6f 93       	push	r22
    4bc2:	6e 7f       	andi	r22, 0xFE	; 254
    4bc4:	6e 5f       	subi	r22, 0xFE	; 254
    4bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4bca:	9f 4f       	sbci	r25, 0xFF	; 255
    4bcc:	af 4f       	sbci	r26, 0xFF	; 255
    4bce:	b1 e0       	ldi	r27, 0x01	; 1
    4bd0:	3e d0       	rcall	.+124    	; 0x4c4e <__ultoa_invert+0x9c>
    4bd2:	b4 e0       	ldi	r27, 0x04	; 4
    4bd4:	3c d0       	rcall	.+120    	; 0x4c4e <__ultoa_invert+0x9c>
    4bd6:	67 0f       	add	r22, r23
    4bd8:	78 1f       	adc	r23, r24
    4bda:	89 1f       	adc	r24, r25
    4bdc:	9a 1f       	adc	r25, r26
    4bde:	a1 1d       	adc	r26, r1
    4be0:	68 0f       	add	r22, r24
    4be2:	79 1f       	adc	r23, r25
    4be4:	8a 1f       	adc	r24, r26
    4be6:	91 1d       	adc	r25, r1
    4be8:	a1 1d       	adc	r26, r1
    4bea:	6a 0f       	add	r22, r26
    4bec:	71 1d       	adc	r23, r1
    4bee:	81 1d       	adc	r24, r1
    4bf0:	91 1d       	adc	r25, r1
    4bf2:	a1 1d       	adc	r26, r1
    4bf4:	20 d0       	rcall	.+64     	; 0x4c36 <__ultoa_invert+0x84>
    4bf6:	09 f4       	brne	.+2      	; 0x4bfa <__ultoa_invert+0x48>
    4bf8:	68 94       	set
    4bfa:	3f 91       	pop	r19
    4bfc:	2a e0       	ldi	r18, 0x0A	; 10
    4bfe:	26 9f       	mul	r18, r22
    4c00:	11 24       	eor	r1, r1
    4c02:	30 19       	sub	r19, r0
    4c04:	30 5d       	subi	r19, 0xD0	; 208
    4c06:	31 93       	st	Z+, r19
    4c08:	de f6       	brtc	.-74     	; 0x4bc0 <__ultoa_invert+0xe>
    4c0a:	cf 01       	movw	r24, r30
    4c0c:	08 95       	ret
    4c0e:	46 2f       	mov	r20, r22
    4c10:	47 70       	andi	r20, 0x07	; 7
    4c12:	40 5d       	subi	r20, 0xD0	; 208
    4c14:	41 93       	st	Z+, r20
    4c16:	b3 e0       	ldi	r27, 0x03	; 3
    4c18:	0f d0       	rcall	.+30     	; 0x4c38 <__ultoa_invert+0x86>
    4c1a:	c9 f7       	brne	.-14     	; 0x4c0e <__ultoa_invert+0x5c>
    4c1c:	f6 cf       	rjmp	.-20     	; 0x4c0a <__ultoa_invert+0x58>
    4c1e:	46 2f       	mov	r20, r22
    4c20:	4f 70       	andi	r20, 0x0F	; 15
    4c22:	40 5d       	subi	r20, 0xD0	; 208
    4c24:	4a 33       	cpi	r20, 0x3A	; 58
    4c26:	18 f0       	brcs	.+6      	; 0x4c2e <__ultoa_invert+0x7c>
    4c28:	49 5d       	subi	r20, 0xD9	; 217
    4c2a:	31 fd       	sbrc	r19, 1
    4c2c:	40 52       	subi	r20, 0x20	; 32
    4c2e:	41 93       	st	Z+, r20
    4c30:	02 d0       	rcall	.+4      	; 0x4c36 <__ultoa_invert+0x84>
    4c32:	a9 f7       	brne	.-22     	; 0x4c1e <__ultoa_invert+0x6c>
    4c34:	ea cf       	rjmp	.-44     	; 0x4c0a <__ultoa_invert+0x58>
    4c36:	b4 e0       	ldi	r27, 0x04	; 4
    4c38:	a6 95       	lsr	r26
    4c3a:	97 95       	ror	r25
    4c3c:	87 95       	ror	r24
    4c3e:	77 95       	ror	r23
    4c40:	67 95       	ror	r22
    4c42:	ba 95       	dec	r27
    4c44:	c9 f7       	brne	.-14     	; 0x4c38 <__ultoa_invert+0x86>
    4c46:	00 97       	sbiw	r24, 0x00	; 0
    4c48:	61 05       	cpc	r22, r1
    4c4a:	71 05       	cpc	r23, r1
    4c4c:	08 95       	ret
    4c4e:	9b 01       	movw	r18, r22
    4c50:	ac 01       	movw	r20, r24
    4c52:	0a 2e       	mov	r0, r26
    4c54:	06 94       	lsr	r0
    4c56:	57 95       	ror	r21
    4c58:	47 95       	ror	r20
    4c5a:	37 95       	ror	r19
    4c5c:	27 95       	ror	r18
    4c5e:	ba 95       	dec	r27
    4c60:	c9 f7       	brne	.-14     	; 0x4c54 <__ultoa_invert+0xa2>
    4c62:	62 0f       	add	r22, r18
    4c64:	73 1f       	adc	r23, r19
    4c66:	84 1f       	adc	r24, r20
    4c68:	95 1f       	adc	r25, r21
    4c6a:	a0 1d       	adc	r26, r0
    4c6c:	08 95       	ret

00004c6e <__prologue_saves__>:
    4c6e:	2f 92       	push	r2
    4c70:	3f 92       	push	r3
    4c72:	4f 92       	push	r4
    4c74:	5f 92       	push	r5
    4c76:	6f 92       	push	r6
    4c78:	7f 92       	push	r7
    4c7a:	8f 92       	push	r8
    4c7c:	9f 92       	push	r9
    4c7e:	af 92       	push	r10
    4c80:	bf 92       	push	r11
    4c82:	cf 92       	push	r12
    4c84:	df 92       	push	r13
    4c86:	ef 92       	push	r14
    4c88:	ff 92       	push	r15
    4c8a:	0f 93       	push	r16
    4c8c:	1f 93       	push	r17
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	ca 1b       	sub	r28, r26
    4c98:	db 0b       	sbc	r29, r27
    4c9a:	0f b6       	in	r0, 0x3f	; 63
    4c9c:	f8 94       	cli
    4c9e:	de bf       	out	0x3e, r29	; 62
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	cd bf       	out	0x3d, r28	; 61
    4ca4:	09 94       	ijmp

00004ca6 <__epilogue_restores__>:
    4ca6:	2a 88       	ldd	r2, Y+18	; 0x12
    4ca8:	39 88       	ldd	r3, Y+17	; 0x11
    4caa:	48 88       	ldd	r4, Y+16	; 0x10
    4cac:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cae:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cb8:	b9 84       	ldd	r11, Y+9	; 0x09
    4cba:	c8 84       	ldd	r12, Y+8	; 0x08
    4cbc:	df 80       	ldd	r13, Y+7	; 0x07
    4cbe:	ee 80       	ldd	r14, Y+6	; 0x06
    4cc0:	fd 80       	ldd	r15, Y+5	; 0x05
    4cc2:	0c 81       	ldd	r16, Y+4	; 0x04
    4cc4:	1b 81       	ldd	r17, Y+3	; 0x03
    4cc6:	aa 81       	ldd	r26, Y+2	; 0x02
    4cc8:	b9 81       	ldd	r27, Y+1	; 0x01
    4cca:	ce 0f       	add	r28, r30
    4ccc:	d1 1d       	adc	r29, r1
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	f8 94       	cli
    4cd2:	de bf       	out	0x3e, r29	; 62
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	ed 01       	movw	r28, r26
    4cda:	08 95       	ret

00004cdc <__do_global_dtors>:
    4cdc:	15 e0       	ldi	r17, 0x05	; 5
    4cde:	ce e8       	ldi	r28, 0x8E	; 142
    4ce0:	d5 e0       	ldi	r29, 0x05	; 5
    4ce2:	04 c0       	rjmp	.+8      	; 0x4cec <__do_global_dtors+0x10>
    4ce4:	fe 01       	movw	r30, r28
    4ce6:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__tablejump2__>
    4cea:	21 96       	adiw	r28, 0x01	; 1
    4cec:	cf 38       	cpi	r28, 0x8F	; 143
    4cee:	d1 07       	cpc	r29, r17
    4cf0:	c9 f7       	brne	.-14     	; 0x4ce4 <__do_global_dtors+0x8>
    4cf2:	f8 94       	cli

00004cf4 <__stop_program>:
    4cf4:	ff cf       	rjmp	.-2      	; 0x4cf4 <__stop_program>
